1	C:\wlua_dump\path\EE\Types\ScriptCommandsJSON.lua
Pos   Hex Data           Description or Code
------------------------------------------------------------------------
0000                     ** source chunk: C:\wlua_dump\path\EE\Types\ScriptCommandsJSON.lua
                         ** global header start **
0000  7F                 header signature: ""
0001  00                 version (major:minor hex digits)
0002  00                 format (0=official)
0003  00                 endianness (1=little endian)
0004  00                 size of int (bytes)
0005  00                 size of size_t (bytes)
0006  02                 size of Instruction (bytes)
0007  15                 size of number (bytes)
0008  5D                 integral (1=integral)
493
                         * number type: single
                         * x86 standard (32-bit, little endian, doubles)
                         ** global header end **
VERSION
-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json), version 
 ]-
__tostring
__index
onDecodeOfNilError
onDecodeError
onDecodeOfHTMLError
[
"
%\
%z

-

]
JSON array
JSON object
string
math
?
string
%s at char %d of: %s
%s: %s
 (
)
assert
 (
)
assert
^-?[1-9]%d*
^-?0
expected number
^%.%d+

^[eE][-+]?%d+
bad number
"
expected string's opening quote

\
^\b

^\f

^\n


^\r

^\t
	
^\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])
^\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])
^\(.)
unclosed string
^[ 
	]+
{
expected '{'
strictTypes
}
:
expected colon
,
expected comma or '}'
unclosed '{'
[
expected '['
strictTypes
]
table
,
expected comma or '['
unclosed '['
unexpected end of string
^"
^[-0123456789 ]
^%{
^%[
^true
^false
^null
can't parse JSON
table
__index
JSON:decode must be called in method format
string
nil passed to JSON:decode()
expected string argument to JSON:decode(), got %s
^%s*$
^%s*<
html passed to JSON:decode()
JSON package groks only UTF-8, sorry
assert


\n

\r
	
\t

\b

\f
"
\"
\
\\
string
\u%04x
"
string
table
number
math
huge
can't encode table with a key of type 
JSON array
JSON object
_G
JSON
noKeyConversion
a table with both numeric and string keys could be an object or array; aborting
conflict converting table with mixed-type keys into a JSON object: key 
 exists both as a string and a number.
null
string
number
math
huge
1e+9999
-1e+9999
boolean
table
can't convert 
 to JSON
table 
 is a child of itself
[ 
, 
 ]
[
,
]

    
 
%s%
%d
s: %s
{

,



}
%s:%s
{
[]
table
__index
JSON:encode must be called in method format
table
__index
JSON:encode_pretty must be called in method format

JSON encode/decode package
                         
0001                     ** function [0] definition (level 1)
                         ** start of function **
0001  00                 string size (0)
                         source name: (none)
0002  00                 line defined (0)
0003  00                 last line defined (0)
0004  00                 nups (0)
0005  00                 numparams (0)
0006  02                 is_vararg (2)
0007  15                 maxstacksize (21)
                         * code:
0008  5D                 sizecode (93)
0009  19000000           [01] loadk      0   0        ; 42
000D  4B400000           [02] newtable   1   0   1    ; array=0, hash=1
0011  4C008080           [03] settable   1   257 0    ; "VERSION"
0015  99800000           [04] loadk      2   2        ; "-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json), version "
0019  DDC00000           [05] getglobal  3   3        ; -1615931716
001D  12010000           [06] move       4   0      
0021  E2800001           [07] call       3   2   2  
0025  19010100           [08] loadk      4   4        ; " ]-"
0029  82000101           [09] concat     2   2   4  
002D  CB400000           [10] newtable   3   0   1    ; array=0, hash=1
0031  25010000           [11] closure    4   0      
0035  CC008182           [12] settable   3   261 4    ; "__tostring"
0039  CCC00083           [13] settable   3   262 3    ; "__index"
003D  0B410000           [14] newtable   4   0   1    ; array=0, hash=1
0041  65410000           [15] closure    5   1      
0045  0C418182           [16] settable   4   261 5    ; "__tostring"
0049  0C010183           [17] settable   4   262 4    ; "__index"
004D  65810000           [18] closure    5   2      
0051  12008001           [19] move       0   3      
0055  4C408183           [20] settable   1   263 5    ; -427173452
0059  65C10000           [21] closure    5   3      
005D  12000002           [22] move       0   4      
0061  4C400184           [23] settable   1   264 5    ; -1147133379
0065  65010100           [24] closure    5   4      
0069  A5410100           [25] closure    6   5      
006D  12008000           [26] move       0   1      
0071  4C808184           [27] settable   1   265 6    ; 55930489
0075  8EC1C200           [28] gettable   6   1   267  ; "onDecodeError"
0079  4C800185           [29] settable   1   266 6    ; "onDecodeOfNilError"
007D  8EC1C200           [30] gettable   6   1   267  ; "onDecodeError"
0081  4C800186           [31] settable   1   268 6    ; "onDecodeOfHTMLError"
0085  A5810100           [32] closure    6   6      
0089  12008000           [33] move       0   1      
008D  4C808186           [34] settable   1   269 6    ; 930586644
0091  A5C10100           [35] closure    6   7      
0095  E5010200           [36] closure    7   8      
0099  12008002           [37] move       0   5      
009D  25420200           [38] closure    8   9      
00A1  46028004           [39] loadnil    9   9      
00A5  A5820200           [40] closure    10  10     
00A9  12000004           [41] move       0   8      
00AD  12008003           [42] move       0   7      
00B1  12008004           [43] move       0   9      
00B5  E5C20200           [44] closure    11  11     
00B9  12000004           [45] move       0   8      
00BD  12008004           [46] move       0   9      
00C1  65020300           [47] closure    9   12     
00C5  12000004           [48] move       0   8      
00C9  12008003           [49] move       0   7      
00CD  12000003           [50] move       0   6      
00D1  12000005           [51] move       0   10     
00D5  12008005           [52] move       0   11     
00D9  25430300           [53] closure    12  13     
00DD  12008000           [54] move       0   1      
00E1  12008004           [55] move       0   9      
00E5  4C000387           [56] settable   1   270 12   ; -1976663275
00E9  25830300           [57] closure    12  14     
00ED  59C30300           [58] loadk      13  15       ; "["
00F1  99030400           [59] loadk      14  16       ; "\""
00F5  D9430400           [60] loadk      15  17       ; "%\\"
00F9  19840400           [61] loadk      16  18       ; "%z"
00FD  59C40400           [62] loadk      17  19       ; "\1"
0101  99040500           [63] loadk      18  20       ; "-"
0105  D9440500           [64] loadk      19  21       ; "\31"
0109  19850500           [65] loadk      20  22       ; "]"
010D  42038506           [66] concat     13  13  20 
0111  A5C30300           [67] closure    14  15     
0115  12008006           [68] move       0   13     
0119  12000006           [69] move       0   12     
011D  E5030400           [70] closure    15  16     
0121  06040008           [71] loadnil    16  16     
0125  25440400           [72] closure    16  17     
0129  12000007           [73] move       0   14     
012D  12008007           [74] move       0   15     
0131  12000008           [75] move       0   16     
0135  65840400           [76] closure    17  18     
0139  12008000           [77] move       0   1      
013D  12000008           [78] move       0   16     
0141  4C40848B           [79] settable   1   279 17   ; -1916729509
0145  65C40400           [80] closure    17  19     
0149  12008000           [81] move       0   1      
014D  12000008           [82] move       0   16     
0151  4C40048C           [83] settable   1   280 17   ; 1356058457
0155  65040500           [84] closure    17  20     
0159  4C40848C           [85] settable   1   281 17   ; -643440752
015D  4C400083           [86] settable   1   262 1    ; "__index"
0161  65440500           [87] closure    17  21     
0165  12008000           [88] move       0   1      
0169  4C40048D           [89] settable   1   282 17   ; -1715765956
016D  6484C600           [90] self       17  1   282  ; -1715765956
0171  47040001           [91] tailcall   17  2   0  
0175  5E040000           [92] return     17  0      
0179  1E008000           [93] return     0   1      
                         * constants:
017D  1B                 sizek (27)
017E  03                 const type 3
017F  2AA8994B           const [0]: (42)
0183  04                 const type 4
0184  08                 string size (8)
0185  56455253494F4E00   "VERSION\0"
                         const [1]: "VERSION"
018D  04                 const type 4
018E  52                 string size (82)
018F  2D5B204A534F4E2E+  "-[ JSON."
0197  6C7561207061636B+  "lua pack"
019F  616765206279204A+  "age by J"
01A7  6566667265792046+  "effrey F"
01AF  726965646C202868+  "riedl (h"
01B7  7474703A2F2F7265+  "ttp://re"
01BF  6765782E696E666F+  "gex.info"
01C7  2F626C6F672F6C75+  "/blog/lu"
01CF  612F6A736F6E292C+  "a/json),"
01D7  2076657273696F6E+  " version"
01DF  2000               " \0"
                         const [2]: "-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json), version "
01E1  01                 const type 3
01E2  BCD6AE9F           const [3]: (-1615931716)
01E6  04                 const type 4
01E7  04                 string size (4)
01E8  205D2D00           " ]-\0"
                         const [4]: " ]-"
01EC  04                 const type 4
01ED  0B                 string size (11)
01EE  5F5F746F73747269+  "__tostri"
01F6  6E6700             "ng\0"
                         const [5]: "__tostring"
01F9  04                 const type 4
01FA  08                 string size (8)
01FB  5F5F696E64657800   "__index\0"
                         const [6]: "__index"
0203  01                 const type 3
0204  B4D989E6           const [7]: (-427173452)
0208  01                 const type 3
0209  3D22A0BB           const [8]: (-1147133379)
020D  01                 const type 3
020E  796E5503           const [9]: (55930489)
0212  04                 const type 4
0213  13                 string size (19)
0214  6F6E4465636F6465+  "onDecode"
021C  4F664E696C457272+  "OfNilErr"
0224  6F7200             "or\0"
                         const [10]: "onDecodeOfNilError"
0227  04                 const type 4
0228  0E                 string size (14)
0229  6F6E4465636F6465+  "onDecode"
0231  4572726F7200       "Error\0"
                         const [11]: "onDecodeError"
0237  04                 const type 4
0238  14                 string size (20)
0239  6F6E4465636F6465+  "onDecode"
0241  4F6648544D4C4572+  "OfHTMLEr"
0249  726F7200           "ror\0"
                         const [12]: "onDecodeOfHTMLError"
024D  01                 const type 3
024E  14A07737           const [13]: (930586644)
0252  01                 const type 3
0253  15832E8A           const [14]: (-1976663275)
0257  04                 const type 4
0258  02                 string size (2)
0259  5B00               "[\0"
                         const [15]: "["
025B  04                 const type 4
025C  02                 string size (2)
025D  2200               "\"\0"
                         const [16]: "\""
025F  04                 const type 4
0260  03                 string size (3)
0261  255C00             "%\\\0"
                         const [17]: "%\\"
0264  04                 const type 4
0265  03                 string size (3)
0266  257A00             "%z\0"
                         const [18]: "%z"
0269  04                 const type 4
026A  02                 string size (2)
026B  0100               "\1\0"
                         const [19]: "\1"
026D  04                 const type 4
026E  02                 string size (2)
026F  2D00               "-\0"
                         const [20]: "-"
0271  04                 const type 4
0272  02                 string size (2)
0273  1F00               "\31\0"
                         const [21]: "\31"
0275  04                 const type 4
0276  02                 string size (2)
0277  5D00               "]\0"
                         const [22]: "]"
0279  01                 const type 3
027A  5B07C18D           const [23]: (-1916729509)
027E  01                 const type 3
027F  59CFD350           const [24]: (1356058457)
0283  01                 const type 3
0284  90DFA5D9           const [25]: (-643440752)
0288  01                 const type 3
0289  3C7DBB99           const [26]: (-1715765956)
                         * functions:
028D  16                 sizep (22)
                         
028E                     ** function [0] definition (level 2)
                         ** start of function **
028E  00                 string size (0)
                         source name: (none)
0290  01                 line defined (175)
0291  AF                 last line defined (175)
0292  01                 nups (0)
0293  00                 numparams (0)
0294  00                 is_vararg (0)
0295  00                 maxstacksize (2)
                         * code:
0297  03                 sizecode (3)
0298  19000000           [1] loadk      0   0        ; "JSON array"
029C  1E000001           [2] return     0   2      
02A0  1E008000           [3] return     0   1      
                         * constants:
02A4  01                 sizek (1)
02A5  04                 const type 4
02A6  0B                 string size (11)
02A7  4A534F4E20617272+  "JSON arr"
02AF  617900             "ay\0"
                         const [0]: "JSON array"
                         * functions:
02B2  00                 sizep (0)
                         * lines:
02B3  03                 sizelineinfo (3)
                         [pc] (line)
02B4  AF                 [1] (-81)
02B5  00                 [2] (-81)
02B6  00                 [3] (-81)
                         * locals:
02C0  00                 sizelocvars (0)
                         * upvalues:
02C1  00                 sizeupvalues (0)
                         ** end of function **

                         
02C2                     ** function [1] definition (level 2)
                         ** start of function **
02C2  00                 string size (0)
                         source name: (none)
02C4  01                 line defined (176)
02C5  B0                 last line defined (176)
02C6  01                 nups (0)
02C7  00                 numparams (0)
02C8  00                 is_vararg (0)
02C9  00                 maxstacksize (2)
                         * code:
02CB  03                 sizecode (3)
02CC  19000000           [1] loadk      0   0        ; "JSON object"
02D0  1E000001           [2] return     0   2      
02D4  1E008000           [3] return     0   1      
                         * constants:
02D8  01                 sizek (1)
02D9  04                 const type 4
02DA  0C                 string size (12)
02DB  4A534F4E206F626A+  "JSON obj"
02E3  65637400           "ect\0"
                         const [0]: "JSON object"
                         * functions:
02E7  00                 sizep (0)
                         * lines:
02E8  03                 sizelineinfo (3)
                         [pc] (line)
02E9  B0                 [1] (-80)
02EA  00                 [2] (-80)
02EB  00                 [3] (-80)
                         * locals:
02F5  00                 sizelocvars (0)
                         * upvalues:
02F6  00                 sizeupvalues (0)
                         ** end of function **

                         
02F7                     ** function [2] definition (level 2)
                         ** start of function **
02F7  00                 string size (0)
                         source name: (none)
02F9  01                 line defined (179)
02FA  B5                 last line defined (181)
02FB  01                 nups (1)
02FC  01                 numparams (2)
02FD  02                 is_vararg (0)
02FE  00                 maxstacksize (5)
                         * code:
0300  08                 sizecode (8)
0301  9D000000           [1] getglobal  2   0        ; -1900524209
fail op	5
0305  C5408000           [2] getglobal  3   513      ; nil
0309  1A000080           [3] jmp        1            ; to [5]
030D  CB000000           [4] newtable   3   0   0    ; array=0, hash=0
0311  13010000           [5] getupval   4   0      
0315  87008001           [6] tailcall   2   3   0  
0319  9E000000           [7] return     2   0      
031D  1E008000           [8] return     0   1      
                         * constants:
0321  01                 sizek (1)
0322  01                 const type 3
0323  4F4DB88E           const [0]: (-1900524209)
                         * functions:
0327  00                 sizep (0)
                         * lines:
0328  08                 sizelineinfo (8)
                         [pc] (line)
0329  B4                 [1] (-76)
032A  00                 [2] (-76)
032B  00                 [3] (-76)
032C  00                 [4] (-76)
032D  B4                 [5] (-76)
032E  00                 [6] (-76)
032F  00                 [7] (-76)
0330  00                 [8] (-75)
                         * locals:
0349  00                 sizelocvars (0)
                         * upvalues:
034A  00                 sizeupvalues (0)
                         ** end of function **

                         
034B                     ** function [3] definition (level 2)
                         ** start of function **
034B  00                 string size (0)
                         source name: (none)
034D  01                 line defined (183)
034E  B9                 last line defined (185)
034F  01                 nups (1)
0350  01                 numparams (2)
0351  02                 is_vararg (0)
0352  00                 maxstacksize (5)
                         * code:
0354  08                 sizecode (8)
0355  9D000000           [1] getglobal  2   0        ; -1900524209
fail op	5
0359  C5408000           [2] getglobal  3   513      ; nil
035D  1A000080           [3] jmp        1            ; to [5]
0361  CB000000           [4] newtable   3   0   0    ; array=0, hash=0
0365  13010000           [5] getupval   4   0      
0369  87008001           [6] tailcall   2   3   0  
036D  9E000000           [7] return     2   0      
0371  1E008000           [8] return     0   1      
                         * constants:
0375  01                 sizek (1)
0376  01                 const type 3
0377  4F4DB88E           const [0]: (-1900524209)
                         * functions:
037B  00                 sizep (0)
                         * lines:
037C  08                 sizelineinfo (8)
                         [pc] (line)
037D  B8                 [1] (-72)
037E  00                 [2] (-72)
037F  00                 [3] (-72)
0380  00                 [4] (-72)
0381  B8                 [5] (-72)
0382  00                 [6] (-72)
0383  00                 [7] (-72)
0384  00                 [8] (-71)
                         * locals:
039D  00                 sizelocvars (0)
                         * upvalues:
039E  00                 sizeupvalues (0)
                         ** end of function **

                         
039F                     ** function [4] definition (level 2)
                         ** start of function **
039F  00                 string size (0)
                         source name: (none)
03A1  01                 line defined (187)
03A2  F8                 last line defined (248)
03A3  01                 nups (0)
03A4  00                 numparams (1)
03A5  01                 is_vararg (0)
03A6  00                 maxstacksize (17)
                         * code:
03A8  5E                 sizecode (94)
fail op	33
03A9  21004000           [01] tforloop   0       256  ; to [3] if exit
03AD  1A400180           [02] jmp        6            ; to [9]
03B1  5D400000           [03] getglobal  1   1        ; string
03B5  4E80C000           [04] gettable   1   1   258  ; 158743409
03B9  92000000           [05] move       2   0      
03BD  47000001           [06] tailcall   1   2   0  
03C1  5E000000           [07] return     1   0      
03C5  1A001580           [08] jmp        85           ; to [94]
fail op	33
03C9  21C04000           [09] tforloop   0       259  ; to [11] if exit
03CD  1A000380           [10] jmp        13           ; to [24]
03D1  5D000100           [11] getglobal  1   4        ; math
03D5  4E40C100           [12] gettable   1   1   261  ; -150971781
03D9  9C804100           [13] div        2   0   262  ; 0
03DD  62800001           [14] call       1   2   2  
03E1  84400083           [15] mul        2   262 1    ; 0
03E5  8D800000           [16] sub        2   0   2  
03E9  DD400000           [17] getglobal  3   1        ; string
03ED  CE80C001           [18] gettable   3   3   258  ; 158743409
03F1  03418083           [19] add        4   263 1    ; 0
03F5  43810084           [20] add        5   264 2    ; 0
03F9  C7008001           [21] tailcall   3   3   0  
03FD  DE000000           [22] return     3   0      
0401  1A401180           [23] jmp        70           ; to [94]
fail op	33
0405  21404200           [24] tforloop   0       265  ; to [26] if exit
0409  1A400A80           [25] jmp        42           ; to [68]
040D  DD000100           [26] getglobal  3   4        ; math
0411  CE40C101           [27] gettable   3   3   261  ; -150971781
0415  1C814200           [28] div        4   0   266  ; 0
0419  E2800001           [29] call       3   2   2  
041D  04C10085           [30] mul        4   266 3    ; 0
0421  0D010100           [31] sub        4   0   4  
0425  5D010100           [32] getglobal  5   4        ; math
0429  4E41C102           [33] gettable   5   5   261  ; -150971781
042D  9C814102           [34] div        6   4   262  ; 0
0431  62810001           [35] call       5   2   2  
0435  84410183           [36] mul        6   262 5    ; 0
0439  8D810102           [37] sub        6   4   6  
043D  C3C08085           [38] add        3   267 3    ; 0
0441  43410184           [39] add        5   264 5    ; 0
0445  83810184           [40] add        6   264 6    ; 0
fail op	35
0449  23C0C201           [41] close      0  
044D  1A400080           [42] jmp        2            ; to [45]
fail op	21
0451  5500C302           [43] concat     1   5   268
0455  1AC00280           [44] jmp        12           ; to [57]
fail op	35
0459  2340C301           [45] close      0  
045D  1A400080           [46] jmp        2            ; to [49]
fail op	21
0461  55400187           [47] concat     1   270 5  
0465  1AC00180           [48] jmp        8            ; to [57]
fail op	35
0469  23C0C301           [49] close      0  
046D  1A400080           [50] jmp        2            ; to [53]
fail op	21
0471  5500C402           [51] concat     1   5   272
0475  1AC00080           [52] jmp        4            ; to [57]
fail op	35
0479  2340C401           [53] close      0  
047D  1A000180           [54] jmp        5            ; to [60]
fail op	21
0481  15400189           [55] concat     0   274 5  
0485  1A800080           [56] jmp        3            ; to [60]
0489  D9C10400           [57] loadk      7   19       ; "?"
048D  DE010001           [58] return     7   2      
0491  1A400880           [59] jmp        34           ; to [94]
0495  DD410000           [60] getglobal  7   1        ; string
0499  CE81C003           [61] gettable   7   7   258  ; 158743409
049D  12028001           [62] move       8   3      
04A1  52028002           [63] move       9   5      
04A5  92020003           [64] move       10  6      
04A9  C7010002           [65] tailcall   7   4   0  
04AD  DE010000           [66] return     7   0      
04B1  1A400680           [67] jmp        26           ; to [94]
04B5  DD010100           [68] getglobal  7   4        ; math
04B9  CE41C103           [69] gettable   7   7   261  ; -150971781
04BD  1C024500           [70] div        8   0   276  ; 0
04C1  E2810001           [71] call       7   2   2  
04C5  04C2018A           [72] mul        8   276 7    ; 0
04C9  0D020200           [73] sub        8   0   8  
04CD  5D020100           [74] getglobal  9   4        ; math
04D1  4E42C104           [75] gettable   9   9   261  ; -150971781
04D5  9C824204           [76] div        10  8   266  ; 0
04D9  62820001           [77] call       9   2   2  
04DD  84420285           [78] mul        10  266 9    ; 0
04E1  0D820204           [79] sub        8   8   10 
04E5  9D020100           [80] getglobal  10  4        ; math
04E9  8E424105           [81] gettable   10  10  261  ; -150971781
04ED  DC824104           [82] div        11  8   262  ; 0
04F1  A2820001           [83] call       10  2   2  
04F5  C4820283           [84] mul        11  262 10   ; 0
04F9  CDC20204           [85] sub        11  8   11 
04FD  1D430000           [86] getglobal  12  1        ; string
0501  0E834006           [87] gettable   12  12  258  ; 158743409
0505  43C38187           [88] add        13  271 7    ; 0
0509  83430284           [89] add        14  264 9    ; 0
050D  C3830284           [90] add        15  264 10   ; 0
0511  03C40284           [91] add        16  264 11   ; 0
0515  07038002           [92] tailcall   12  5   0  
0519  1E030000           [93] return     12  0      
051D  1E008000           [94] return     0   1      
                         * constants:
0521  15                 sizek (21)
0522  03                 const type 3
0523  0000FE42           const [0]: (0)
0527  04                 const type 4
0528  07                 string size (7)
0529  737472696E6700     "string\0"
                         const [1]: "string"
0530  01                 const type 3
0531  713B7609           const [2]: (158743409)
0535  03                 const type 3
0536  00E0FF44           const [3]: (0)
053A  04                 const type 4
053B  05                 string size (5)
053C  6D61746800         "math\0"
                         const [4]: "math"
0541  01                 const type 3
0542  7B5A00F7           const [5]: (-150971781)
0546  03                 const type 3
0547  00008042           const [6]: (0)
054B  03                 const type 3
054C  00004043           const [7]: (0)
0550  03                 const type 3
0551  00000043           const [8]: (0)
0555  03                 const type 3
0556  00FF7F47           const [9]: (0)
055A  03                 const type 3
055B  00008045           const [10]: (0)
055F  03                 const type 3
0560  00006043           const [11]: (0)
0564  03                 const type 3
0565  00002043           const [12]: (0)
0569  03                 const type 3
056A  00006D43           const [13]: (0)
056E  03                 const type 3
056F  00001F43           const [14]: (0)
0573  03                 const type 3
0574  00007043           const [15]: (0)
0578  03                 const type 3
0579  00001043           const [16]: (0)
057D  03                 const type 3
057E  00007443           const [17]: (0)
0582  03                 const type 3
0583  00000F43           const [18]: (0)
0587  04                 const type 4
0588  02                 string size (2)
0589  3F00               "?\0"
                         const [19]: "?"
058B  03                 const type 3
058C  00008048           const [20]: (0)
                         * functions:
0590  00                 sizep (0)
                         * lines:
0591  5E                 sizelineinfo (94)
                         [pc] (line)
0592  BF                 [01] (-65)
0593  00                 [02] (-65)
0594  00                 [03] (-64)
0595  00                 [04] (-64)
0596  BF                 [05] (-64)
0597  00                 [06] (-64)
0598  00                 [07] (-64)
0599  00                 [08] (-64)
059A  C0                 [09] (-62)
059B  00                 [10] (-62)
059C  00                 [11] (-58)
059D  00                 [12] (-58)
059E  C0                 [13] (-58)
059F  00                 [14] (-58)
05A0  00                 [15] (-57)
05A1  00                 [16] (-57)
05A2  C0                 [17] (-56)
05A3  00                 [18] (-56)
05A4  00                 [19] (-56)
05A5  00                 [20] (-55)
05A6  C0                 [21] (-56)
05A7  00                 [22] (-55)
05A8  00                 [23] (-55)
05A9  00                 [24] (-53)
05AA  C0                 [25] (-53)
05AB  00                 [26] (-49)
05AC  00                 [27] (-49)
05AD  00                 [28] (-49)
05AE  C0                 [29] (-49)
05AF  00                 [30] (-48)
05B0  00                 [31] (-48)
05B1  00                 [32] (-47)
05B2  C2                 [33] (-47)
05B3  00                 [34] (-47)
05B4  00                 [35] (-47)
05B5  00                 [36] (-46)
05B6  C2                 [37] (-46)
05B7  00                 [38] (-44)
05B8  00                 [39] (-43)
05B9  00                 [40] (-42)
05BA  C6                 [41] (-36)
05BB  00                 [42] (-36)
05BC  00                 [43] (-36)
05BD  00                 [44] (-36)
05BE  C6                 [45] (-35)
05BF  00                 [46] (-35)
05C0  00                 [47] (-35)
05C1  00                 [48] (-35)
05C2  C6                 [49] (-34)
05C3  00                 [50] (-34)
05C4  00                 [51] (-34)
05C5  00                 [52] (-34)
05C6  C6                 [53] (-33)
05C7  00                 [54] (-33)
05C8  00                 [55] (-33)
05C9  00                 [56] (-33)
05CA  C7                 [57] (-31)
05CB  00                 [58] (-31)
05CC  00                 [59] (-31)
05CD  00                 [60] (-29)
05CE  C7                 [61] (-29)
05CF  00                 [62] (-29)
05D0  00                 [63] (-28)
05D1  00                 [64] (-27)
05D2  C8                 [65] (-29)
05D3  00                 [66] (-27)
05D4  00                 [67] (-26)
05D5  00                 [68] (-20)
05D6  C8                 [69] (-20)
05D7  00                 [70] (-20)
05D8  00                 [71] (-20)
05D9  00                 [72] (-19)
05DA  C8                 [73] (-19)
05DB  00                 [74] (-18)
05DC  00                 [75] (-18)
05DD  00                 [76] (-18)
05DE  C9                 [77] (-18)
05DF  00                 [78] (-17)
05E0  00                 [79] (-17)
05E1  00                 [80] (-16)
05E2  C8                 [81] (-16)
05E3  00                 [82] (-16)
05E4  00                 [83] (-16)
05E5  00                 [84] (-15)
05E6  C9                 [85] (-15)
05E7  00                 [86] (-13)
05E8  00                 [87] (-13)
05E9  00                 [88] (-13)
05EA  C9                 [89] (-12)
05EB  00                 [90] (-11)
05EC  00                 [91] (-10)
05ED  00                 [92] (-13)
05EE  CB                 [93] (-10)
05EF  00                 [94] (-8)
                         * locals:
070A  00                 sizelocvars (0)
                         * upvalues:
070B  00                 sizeupvalues (0)
                         ** end of function **

                         
070C                     ** function [5] definition (level 2)
                         ** start of function **
070C  00                 string size (0)
                         source name: (none)
070E  01                 line defined (250)
070F  8C                 last line defined (268)
0710  02                 nups (1)
0711  01                 numparams (5)
0712  05                 is_vararg (0)
0713  00                 maxstacksize (10)
                         * code:
0715  2B                 sizecode (43)
0716  98000000           [01] test       2       0    ; to [3] if true
071A  1A400480           [02] jmp        18           ; to [21]
071E  D8000000           [03] test       3       0    ; to [5] if true
0722  1A000280           [04] jmp        9            ; to [14]
0726  5D010000           [05] getglobal  5   0        ; string
072A  4E41C002           [06] gettable   5   5   257  ; 1260343128
072E  99810000           [07] loadk      6   2        ; "%s at char %d of: %s"
0732  D2018000           [08] move       7   1      
0736  12028001           [09] move       8   3      
073A  52020001           [10] move       9   2      
073E  62818002           [11] call       5   5   2  
0742  52008002           [12] move       1   5      
0746  1A800180           [13] jmp        7            ; to [21]
074A  5D010000           [14] getglobal  5   0        ; string
074E  4E41C002           [15] gettable   5   5   257  ; 1260343128
0752  99C10000           [16] loadk      6   3        ; "%s: %s"
0756  D2018000           [17] move       7   1      
075A  12020001           [18] move       8   2      
075E  62810002           [19] call       5   4   2  
0762  52008002           [20] move       1   5      
fail op	35
0766  63004102           [21] close      1  
076A  1AC00180           [22] jmp        8            ; to [31]
076E  52018000           [23] move       5   1      
0772  99410100           [24] loadk      6   5        ; " ("
0776  D3010000           [25] getupval   7   0      
077A  E481C103           [26] self       7   7   262  ; -1916729509
077E  52020002           [27] move       9   4      
0782  E2818001           [28] call       7   3   2  
0786  19C20100           [29] loadk      8   7        ; ")"
078A  42008202           [30] concat     1   5   8  
078E  4E014200           [31] gettable   5   0   264  ; "assert"
0792  58010000           [32] test       5       0    ; to [34] if true
0796  1A000180           [33] jmp        5            ; to [39]
079A  4E414200           [34] gettable   5   0   265  ; 317968122
079E  97010000           [35] loadbool   6   0   0    ; false
07A2  D2018000           [36] move       7   1      
07A6  62418001           [37] call       5   3   1  
07AA  1AC00080           [38] jmp        4            ; to [43]
07AE  5D410200           [39] getglobal  5   9        ; 317968122
07B2  97010000           [40] loadbool   6   0   0    ; false
07B6  D2018000           [41] move       7   1      
07BA  62418001           [42] call       5   3   1  
07BE  1E008000           [43] return     0   1      
                         * constants:
07C2  0A                 sizek (10)
07C3  04                 const type 4
07C4  07                 string size (7)
07C5  737472696E6700     "string\0"
                         const [0]: "string"
07CC  01                 const type 3
07CD  584F1F4B           const [1]: (1260343128)
07D1  04                 const type 4
07D2  15                 string size (21)
07D3  2573206174206368+  "%s at ch"
07DB  6172202564206F66+  "ar %d of"
07E3  3A20257300         ": %s\0"
                         const [2]: "%s at char %d of: %s"
07E8  04                 const type 4
07E9  07                 string size (7)
07EA  25733A20257300     "%s: %s\0"
                         const [3]: "%s: %s"
07F1  00                 const type 0
                         const [4]: nil
07F2  04                 const type 4
07F3  03                 string size (3)
07F4  202800             " (\0"
                         const [5]: " ("
07F7  01                 const type 3
07F8  5B07C18D           const [6]: (-1916729509)
07FC  04                 const type 4
07FD  02                 string size (2)
07FE  2900               ")\0"
                         const [7]: ")"
0800  04                 const type 4
0801  07                 string size (7)
0802  61737365727400     "assert\0"
                         const [8]: "assert"
0809  01                 const type 3
080A  FACEF312           const [9]: (317968122)
                         * functions:
080E  00                 sizep (0)
                         * lines:
080F  2B                 sizelineinfo (43)
                         [pc] (line)
0810  FB                 [01] (-5)
0811  00                 [02] (-5)
0812  00                 [03] (-4)
0813  00                 [04] (-4)
0814  FB                 [05] (-3)
0815  00                 [06] (-3)
0816  00                 [07] (-3)
0817  00                 [08] (-3)
0818  FC                 [09] (-3)
0819  00                 [10] (-3)
081A  00                 [11] (-3)
081B  00                 [12] (-3)
081C  FC                 [13] (-3)
081D  00                 [14] (-1)
081E  00                 [15] (-1)
081F  00                 [16] (-1)
0820  FD                 [17] (-1)
0821  00                 [18] (-1)
0822  00                 [19] (-1)
0823  00                 [20] (-1)
0824  FD                 [21] (3)
0825  00                 [22] (3)
0826  00                 [23] (4)
0827  00                 [24] (4)
0828  FD                 [25] (4)
0829  00                 [26] (4)
082A  00                 [27] (4)
082B  00                 [28] (4)
082C  FD                 [29] (4)
082D  00                 [30] (4)
082E  00                 [31] (7)
082F  00                 [32] (7)
0830  FD                 [33] (7)
0831  00                 [34] (8)
0832  00                 [35] (8)
0833  00                 [36] (8)
0834  FD                 [37] (8)
0835  00                 [38] (8)
0836  00                 [39] (10)
0837  00                 [40] (10)
0838  FD                 [41] (10)
0839  00                 [42] (10)
083A  00                 [43] (12)
                         * locals:
08BC  00                 sizelocvars (0)
                         * upvalues:
08BD  00                 sizeupvalues (0)
                         ** end of function **

                         
08BE                     ** function [6] definition (level 2)
                         ** start of function **
08BE  00                 string size (0)
                         source name: (none)
08C0  02                 line defined (273)
08C1  9B                 last line defined (283)
08C2  02                 nups (1)
08C3  01                 numparams (3)
08C4  03                 is_vararg (0)
08C5  00                 maxstacksize (8)
                         * code:
08C7  17                 sizecode (23)
fail op	35
08C8  63004001           [01] close      1  
08CC  1AC00180           [02] jmp        8            ; to [11]
08D0  D2008000           [03] move       3   1      
08D4  19410000           [04] loadk      4   1        ; " ("
08D8  53010000           [05] getupval   5   0      
08DC  6481C002           [06] self       5   5   258  ; -1916729509
08E0  D2010001           [07] move       7   2      
08E4  62818001           [08] call       5   3   2  
08E8  99C10000           [09] loadk      6   3        ; ")"
08EC  42808101           [10] concat     1   3   6  
08F0  CE004100           [11] gettable   3   0   260  ; "assert"
08F4  D8000000           [12] test       3       0    ; to [14] if true
08F8  1A000180           [13] jmp        5            ; to [19]
08FC  CE404100           [14] gettable   3   0   261  ; 317968122
0900  17010000           [15] loadbool   4   0   0    ; false
0904  52018000           [16] move       5   1      
0908  E2408001           [17] call       3   3   1  
090C  1AC00080           [18] jmp        4            ; to [23]
0910  DD400100           [19] getglobal  3   5        ; 317968122
0914  17010000           [20] loadbool   4   0   0    ; false
0918  52018000           [21] move       5   1      
091C  E2408001           [22] call       3   3   1  
0920  1E008000           [23] return     0   1      
                         * constants:
0924  06                 sizek (6)
0925  00                 const type 0
                         const [0]: nil
0926  04                 const type 4
0927  03                 string size (3)
0928  202800             " (\0"
                         const [1]: " ("
092B  01                 const type 3
092C  5B07C18D           const [2]: (-1916729509)
0930  04                 const type 4
0931  02                 string size (2)
0932  2900               ")\0"
                         const [3]: ")"
0934  04                 const type 4
0935  07                 string size (7)
0936  61737365727400     "assert\0"
                         const [4]: "assert"
093D  01                 const type 3
093E  FACEF312           const [5]: (317968122)
                         * functions:
0942  00                 sizep (0)
                         * lines:
0943  17                 sizelineinfo (23)
                         [pc] (line)
0944  12                 [01] (18)
0945  01                 [02] (18)
0946  00                 [03] (19)
0947  00                 [04] (19)
0948  12                 [05] (19)
0949  01                 [06] (19)
094A  00                 [07] (19)
094B  00                 [08] (19)
094C  13                 [09] (19)
094D  01                 [10] (19)
094E  00                 [11] (22)
094F  00                 [12] (22)
0950  13                 [13] (22)
0951  01                 [14] (23)
0952  00                 [15] (23)
0953  00                 [16] (23)
0954  13                 [17] (23)
0955  01                 [18] (23)
0956  00                 [19] (25)
0957  00                 [20] (25)
0958  13                 [21] (25)
0959  01                 [22] (25)
095A  00                 [23] (27)
                         * locals:
09A0  00                 sizelocvars (0)
                         * upvalues:
09A1  00                 sizeupvalues (0)
                         ** end of function **

                         
09A2                     ** function [7] definition (level 2)
                         ** start of function **
09A2  00                 string size (0)
                         source name: (none)
09A4  02                 line defined (285)
09A5  C0                 last line defined (320)
09A6  02                 nups (0)
09A7  00                 numparams (4)
09A8  04                 is_vararg (0)
09A9  00                 maxstacksize (16)
                         * code:
09AB  3C                 sizecode (60)
09AC  2401C000           [01] self       4   1   256  ; -1354460921
09B0  99410000           [02] loadk      6   1        ; "^-?[1-9]%d*"
09B4  D2010001           [03] move       7   2      
09B8  22810002           [04] call       4   4   2  
09BC  18410000           [05] test       4       1    ; to [7] if false
09C0  1AC00080           [06] jmp        4            ; to [11]
09C4  2401C000           [07] self       4   1   256  ; -1354460921
09C8  99810000           [08] loadk      6   2        ; "^-?0"
09CC  D2010001           [09] move       7   2      
09D0  22810002           [10] call       4   4   2  
09D4  18410000           [11] test       4       1    ; to [13] if false
09D8  1A400180           [12] jmp        6            ; to [19]
09DC  64C14000           [13] self       5   0   259  ; 55930489
09E0  D9010100           [14] loadk      7   4        ; "expected number"
09E4  12028000           [15] move       8   1      
09E8  52020001           [16] move       9   2      
09EC  92028001           [17] move       10  3      
09F0  62410003           [18] call       5   6   1  
09F4  64414102           [19] self       5   4   261  ; -965268854
09F8  62810001           [20] call       5   2   2  
09FC  43410101           [21] add        5   2   5  
0A00  A401C000           [22] self       6   1   256  ; -1354460921
0A04  19820100           [23] loadk      8   6        ; "^%.%d+"
0A08  52028002           [24] move       9   5      
0A0C  A2810002           [25] call       6   4   2  
0A10  98410000           [26] test       6       1    ; to [28] if false
0A14  1A000080           [27] jmp        1            ; to [29]
0A18  99C10100           [28] loadk      6   7        ; ""
0A1C  E4414103           [29] self       7   6   261  ; -965268854
0A20  E2810001           [30] call       7   2   2  
0A24  43C18102           [31] add        5   5   7  
0A28  E401C000           [32] self       7   1   256  ; -1354460921
0A2C  59020200           [33] loadk      9   8        ; "^[eE][-+]?%d+"
0A30  92028002           [34] move       10  5      
0A34  E2810002           [35] call       7   4   2  
0A38  D8410000           [36] test       7       1    ; to [38] if false
0A3C  1A000080           [37] jmp        1            ; to [39]
0A40  D9C10100           [38] loadk      7   7        ; ""
0A44  2442C103           [39] self       8   7   261  ; -965268854
0A48  22820001           [40] call       8   2   2  
0A4C  43018202           [41] add        5   5   8  
0A50  12020002           [42] move       8   4      
0A54  52020003           [43] move       9   6      
0A58  92028003           [44] move       10  7      
0A5C  02820204           [45] concat     8   8   10 
0A60  5D420200           [46] getglobal  9   9        ; -174740002
0A64  92020004           [47] move       10  8      
0A68  62820001           [48] call       9   2   2  
0A6C  58420000           [49] test       9       1    ; to [51] if false
0A70  1A400180           [50] jmp        6            ; to [57]
0A74  A4C24000           [51] self       10  0   259  ; 55930489
0A78  19830200           [52] loadk      12  10       ; "bad number"
0A7C  52038000           [53] move       13  1      
0A80  92030001           [54] move       14  2      
0A84  D2038001           [55] move       15  3      
0A88  A2420003           [56] call       10  6   1  
0A8C  92028004           [57] move       10  9      
0A90  D2028002           [58] move       11  5      
0A94  9E028001           [59] return     10  3      
0A98  1E008000           [60] return     0   1      
                         * constants:
0A9C  0B                 sizek (11)
0A9D  01                 const type 3
0A9E  079144AF           const [0]: (-1354460921)
0AA2  04                 const type 4
0AA3  0C                 string size (12)
0AA4  5E2D3F5B312D395D+  "^-?[1-9]"
0AAC  25642A00           "%d*\0"
                         const [1]: "^-?[1-9]%d*"
0AB0  04                 const type 4
0AB1  05                 string size (5)
0AB2  5E2D3F3000         "^-?0\0"
                         const [2]: "^-?0"
0AB7  01                 const type 3
0AB8  796E5503           const [3]: (55930489)
0ABC  04                 const type 4
0ABD  10                 string size (16)
0ABE  6578706563746564+  "expected"
0AC6  206E756D62657200   " number\0"
                         const [4]: "expected number"
0ACE  01                 const type 3
0ACF  8A2A77C6           const [5]: (-965268854)
0AD3  04                 const type 4
0AD4  07                 string size (7)
0AD5  5E252E25642B00     "^%.%d+\0"
                         const [6]: "^%.%d+"
0ADC  04                 const type 4
0ADD  01                 string size (0)
                         const [7]: ""
0ADF  04                 const type 4
0AE0  0E                 string size (14)
0AE1  5E5B65455D5B2D2B+  "^[eE][-+"
0AE9  5D3F25642B00       "]?%d+\0"
                         const [8]: "^[eE][-+]?%d+"
0AEF  01                 const type 3
0AF0  DEAD95F5           const [9]: (-174740002)
0AF4  04                 const type 4
0AF5  0B                 string size (11)
0AF6  626164206E756D62+  "bad numb"
0AFE  657200             "er\0"
                         const [10]: "bad number"
                         * functions:
0B01  00                 sizep (0)
                         * lines:
0B02  3C                 sizelineinfo (60)
                         [pc] (line)
0B03  21                 [01] (33)
0B04  01                 [02] (33)
0B05  00                 [03] (33)
0B06  00                 [04] (33)
0B07  21                 [05] (34)
0B08  01                 [06] (34)
0B09  00                 [07] (34)
0B0A  00                 [08] (34)
0B0B  21                 [09] (34)
0B0C  01                 [10] (34)
0B0D  00                 [11] (36)
0B0E  00                 [12] (36)
0B0F  21                 [13] (37)
0B10  01                 [14] (37)
0B11  00                 [15] (37)
0B12  00                 [16] (37)
0B13  22                 [17] (37)
0B14  01                 [18] (37)
0B15  00                 [19] (40)
0B16  00                 [20] (40)
0B17  22                 [21] (40)
0B18  01                 [22] (45)
0B19  00                 [23] (45)
0B1A  00                 [24] (45)
0B1B  22                 [25] (45)
0B1C  01                 [26] (45)
0B1D  00                 [27] (45)
0B1E  00                 [28] (45)
0B1F  22                 [29] (47)
0B20  01                 [30] (47)
0B21  00                 [31] (47)
0B22  00                 [32] (52)
0B23  22                 [33] (52)
0B24  01                 [34] (52)
0B25  00                 [35] (52)
0B26  00                 [36] (52)
0B27  22                 [37] (52)
0B28  01                 [38] (52)
0B29  00                 [39] (54)
0B2A  00                 [40] (54)
0B2B  24                 [41] (54)
0B2C  01                 [42] (56)
0B2D  00                 [43] (56)
0B2E  00                 [44] (56)
0B2F  24                 [45] (56)
0B30  01                 [46] (57)
0B31  00                 [47] (57)
0B32  00                 [48] (57)
0B33  25                 [49] (59)
0B34  01                 [50] (59)
0B35  00                 [51] (60)
0B36  00                 [52] (60)
0B37  25                 [53] (60)
0B38  01                 [54] (60)
0B39  00                 [55] (60)
0B3A  00                 [56] (60)
0B3B  25                 [57] (63)
0B3C  01                 [58] (63)
0B3D  00                 [59] (63)
0B3E  00                 [60] (64)
                         * locals:
0BF3  00                 sizelocvars (0)
                         * upvalues:
0BF4  00                 sizeupvalues (0)
                         ** end of function **

                         
0BF5                     ** function [8] definition (level 2)
                         ** start of function **
0BF5  00                 string size (0)
                         source name: (none)
0BF7  02                 line defined (323)
0BF8  81                 last line defined (385)
0BF9  03                 nups (1)
0BFA  01                 numparams (4)
0BFB  04                 is_vararg (0)
0BFC  00                 maxstacksize (17)
                         * code:
0BFF  01                 sizecode (141)
0C00  2401C000           [001] self       4   1   256  ; 2071470131
0C04  92010001           [002] move       6   2      
0C08  D2010001           [003] move       7   2      
0C0C  22810002           [004] call       4   4   2  
fail op	35
0C10  63404002           [005] close      1  
0C14  1A400180           [006] jmp        6            ; to [13]
0C18  24814000           [007] self       4   0   258  ; 55930489
0C1C  99C10000           [008] loadk      6   3        ; "expected string's opening quote"
0C20  D2018000           [009] move       7   1      
0C24  12020001           [010] move       8   2      
0C28  52028001           [011] move       9   3      
0C2C  22410003           [012] call       4   6   1  
0C30  03014101           [013] add        4   2   260  ; 0
0C34  6441C100           [014] self       5   1   261  ; -965268854
0C38  62810001           [015] call       5   2   2  
0C3C  99810100           [016] loadk      6   6        ; ""
fail op	33
0C40  21400102           [017] tforloop   0       5    ; to [19] if exit
0C44  1AC01C80           [018] jmp        116          ; to [135]
0C48  E401C000           [019] self       7   1   256  ; 2071470131
0C4C  52020002           [020] move       9   4      
0C50  92020002           [021] move       10  4      
0C54  E2810002           [022] call       7   4   2  
fail op	35
0C58  2340C003           [023] close      0  
0C5C  1A800080           [024] jmp        3            ; to [28]
0C60  12020003           [025] move       8   6      
0C64  43024102           [026] add        9   4   260  ; 0
0C68  1E028001           [027] return     8   3      
fail op	35
0C6C  63C0C103           [028] close      1  
0C70  1A000180           [029] jmp        5            ; to [35]
0C74  12020003           [030] move       8   6      
0C78  52028003           [031] move       9   7      
0C7C  82410204           [032] concat     6   8   9  
0C80  03014102           [033] add        4   4   260  ; 0
0C84  1A40FB7F           [034] jmp        -18          ; to [17]
0C88  2402C200           [035] self       8   1   264  ; -1354460921
0C8C  99420200           [036] loadk      10  9        ; "^\\b"
0C90  D2020002           [037] move       11  4      
0C94  22820002           [038] call       8   4   2  
0C98  18020000           [039] test       8       0    ; to [41] if true
0C9C  1A000180           [040] jmp        5            ; to [46]
0CA0  12020003           [041] move       8   6      
0CA4  59820200           [042] loadk      9   10       ; "\b"
0CA8  82410204           [043] concat     6   8   9  
0CAC  03C14202           [044] add        4   4   267  ; 0
0CB0  1A80F87F           [045] jmp        -29          ; to [17]
0CB4  2402C200           [046] self       8   1   264  ; -1354460921
0CB8  99020300           [047] loadk      10  12       ; "^\\f"
0CBC  D2020002           [048] move       11  4      
0CC0  22820002           [049] call       8   4   2  
0CC4  18020000           [050] test       8       0    ; to [52] if true
0CC8  1A000180           [051] jmp        5            ; to [57]
0CCC  12020003           [052] move       8   6      
0CD0  59420300           [053] loadk      9   13       ; "\f"
0CD4  82410204           [054] concat     6   8   9  
0CD8  03C14202           [055] add        4   4   267  ; 0
0CDC  1AC0F57F           [056] jmp        -40          ; to [17]
0CE0  2402C200           [057] self       8   1   264  ; -1354460921
0CE4  99820300           [058] loadk      10  14       ; "^\\n"
0CE8  D2020002           [059] move       11  4      
0CEC  22820002           [060] call       8   4   2  
0CF0  18020000           [061] test       8       0    ; to [63] if true
0CF4  1A000180           [062] jmp        5            ; to [68]
0CF8  12020003           [063] move       8   6      
0CFC  59C20300           [064] loadk      9   15       ; "\n"
0D00  82410204           [065] concat     6   8   9  
0D04  03C14202           [066] add        4   4   267  ; 0
0D08  1A00F37F           [067] jmp        -51          ; to [17]
0D0C  2402C200           [068] self       8   1   264  ; -1354460921
0D10  99020400           [069] loadk      10  16       ; "^\\r"
0D14  D2020002           [070] move       11  4      
0D18  22820002           [071] call       8   4   2  
0D1C  18020000           [072] test       8       0    ; to [74] if true
0D20  1A000180           [073] jmp        5            ; to [79]
0D24  12020003           [074] move       8   6      
0D28  59420400           [075] loadk      9   17       ; "\r"
0D2C  82410204           [076] concat     6   8   9  
0D30  03C14202           [077] add        4   4   267  ; 0
0D34  1A40F07F           [078] jmp        -62          ; to [17]
0D38  2402C200           [079] self       8   1   264  ; -1354460921
0D3C  99820400           [080] loadk      10  18       ; "^\\t"
0D40  D2020002           [081] move       11  4      
0D44  22820002           [082] call       8   4   2  
0D48  18020000           [083] test       8       0    ; to [85] if true
0D4C  1A000180           [084] jmp        5            ; to [90]
0D50  12020003           [085] move       8   6      
0D54  59C20400           [086] loadk      9   19       ; "\t"
0D58  82410204           [087] concat     6   8   9  
0D5C  03C14202           [088] add        4   4   267  ; 0
0D60  1A80ED7F           [089] jmp        -73          ; to [17]
0D64  2402C200           [090] self       8   1   264  ; -1354460921
0D68  99020500           [091] loadk      10  20       ; "^\\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])"
0D6C  D2020002           [092] move       11  4      
0D70  22820002           [093] call       8   4   2  
0D74  18020000           [094] test       8       0    ; to [96] if true
0D78  1A800780           [095] jmp        31           ; to [127]
0D7C  03414502           [096] add        4   4   277  ; 0
0D80  5D820500           [097] getglobal  9   22       ; -174740002
0D84  92020004           [098] move       10  8      
0D88  D9C20500           [099] loadk      11  23       ; 0
0D8C  62828001           [100] call       9   3   2  
fail op	33
0D90  2140028C           [101] tforloop   0       9    ; to [103] if exit
0D94  1A400480           [102] jmp        18           ; to [121]
fail op	33
0D98  2140C604           [103] tforloop   0       281  ; to [105] if exit
0D9C  1AC00380           [104] jmp        16           ; to [121]
0DA0  A402C200           [105] self       10  1   264  ; -1354460921
0DA4  19830600           [106] loadk      12  26       ; "^\\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])"
0DA8  52030002           [107] move       13  4      
0DAC  A2820002           [108] call       10  4   2  
0DB0  98020000           [109] test       10      0    ; to [111] if true
0DB4  1A400280           [110] jmp        10           ; to [121]
0DB8  03414502           [111] add        4   4   277  ; 0
0DBC  CD02C604           [112] sub        11  9   280  ; 0
0DC0  C4C2C605           [113] mul        11  11  283  ; 0
0DC4  C3C2028E           [114] add        11  284 11   ; 0
0DC8  1D830500           [115] getglobal  12  22       ; -174740002
0DCC  52030005           [116] move       13  10     
0DD0  99C30500           [117] loadk      14  23       ; 0
0DD4  22838001           [118] call       12  3   2  
0DD8  43028305           [119] add        9   11  12 
0DDC  1AC0FF7F           [120] jmp        0            ; to [121]
0DE0  D2020003           [121] move       11  6      
0DE4  13030000           [122] getupval   12  0      
0DE8  52038004           [123] move       13  9      
0DEC  22830001           [124] call       12  2   2  
0DF0  82018305           [125] concat     6   11  12 
0DF4  1A40E47F           [126] jmp        -110         ; to [17]
0DF8  D2020003           [127] move       11  6      
0DFC  2403C200           [128] self       12  1   264  ; -1354460921
0E00  99430700           [129] loadk      14  29       ; "^\\(.)"
0E04  D2030002           [130] move       15  4      
0E08  22830002           [131] call       12  4   2  
0E0C  82018305           [132] concat     6   11  12 
0E10  03C14202           [133] add        4   4   267  ; 0
0E14  1A40E27F           [134] jmp        -118         ; to [17]
0E18  E4824000           [135] self       11  0   258  ; 55930489
0E1C  59830700           [136] loadk      13  30       ; "unclosed string"
0E20  92038000           [137] move       14  1      
0E24  D2030001           [138] move       15  2      
0E28  12048001           [139] move       16  3      
0E2C  E2420003           [140] call       11  6   1  
0E30  1E008000           [141] return     0   1      
                         * constants:
0E34  1F                 sizek (31)
0E35  01                 const type 3
0E36  3320787B           const [0]: (2071470131)
0E3A  04                 const type 4
0E3B  02                 string size (2)
0E3C  2200               "\"\0"
                         const [1]: "\""
0E3E  01                 const type 3
0E3F  796E5503           const [2]: (55930489)
0E43  04                 const type 4
0E44  20                 string size (32)
0E45  6578706563746564+  "expected"
0E4D  20737472696E6727+  " string'"
0E55  73206F70656E696E+  "s openin"
0E5D  672071756F746500   "g quote\0"
                         const [3]: "expected string's opening quote"
0E65  03                 const type 3
0E66  0000803F           const [4]: (0)
0E6A  01                 const type 3
0E6B  8A2A77C6           const [5]: (-965268854)
0E6F  04                 const type 4
0E70  01                 string size (0)
                         const [6]: ""
0E72  04                 const type 4
0E73  02                 string size (2)
0E74  5C00               "\\\0"
                         const [7]: "\\"
0E76  01                 const type 3
0E77  079144AF           const [8]: (-1354460921)
0E7B  04                 const type 4
0E7C  04                 string size (4)
0E7D  5E5C6200           "^\\b\0"
                         const [9]: "^\\b"
0E81  04                 const type 4
0E82  02                 string size (2)
0E83  0800               "\b\0"
                         const [10]: "\b"
0E85  03                 const type 3
0E86  00000040           const [11]: (0)
0E8A  04                 const type 4
0E8B  04                 string size (4)
0E8C  5E5C6600           "^\\f\0"
                         const [12]: "^\\f"
0E90  04                 const type 4
0E91  02                 string size (2)
0E92  0C00               "\f\0"
                         const [13]: "\f"
0E94  04                 const type 4
0E95  04                 string size (4)
0E96  5E5C6E00           "^\\n\0"
                         const [14]: "^\\n"
0E9A  04                 const type 4
0E9B  02                 string size (2)
0E9C  0A00               "\n\0"
                         const [15]: "\n"
0E9E  04                 const type 4
0E9F  04                 string size (4)
0EA0  5E5C7200           "^\\r\0"
                         const [16]: "^\\r"
0EA4  04                 const type 4
0EA5  02                 string size (2)
0EA6  0D00               "\r\0"
                         const [17]: "\r"
0EA8  04                 const type 4
0EA9  04                 string size (4)
0EAA  5E5C7400           "^\\t\0"
                         const [18]: "^\\t"
0EAE  04                 const type 4
0EAF  02                 string size (2)
0EB0  0900               "\t\0"
                         const [19]: "\t"
0EB2  04                 const type 4
0EB3  66                 string size (102)
0EB4  5E5C75285B303132+  "^\\u([012"
0EBC  3334353637383961+  "3456789a"
0EC4  4162426343644465+  "AbBcCdDe"
0ECC  4566465D5B303132+  "EfF][012"
0ED4  3334353637383961+  "3456789a"
0EDC  4162426343644465+  "AbBcCdDe"
0EE4  4566465D5B303132+  "EfF][012"
0EEC  3334353637383961+  "3456789a"
0EF4  4162426343644465+  "AbBcCdDe"
0EFC  4566465D5B303132+  "EfF][012"
0F04  3334353637383961+  "3456789a"
0F0C  4162426343644465+  "AbBcCdDe"
0F14  4566465D2900       "EfF])\0"
                         const [20]: "^\\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])"
0F1A  03                 const type 3
0F1B  0000C040           const [21]: (0)
0F1F  01                 const type 3
0F20  DEAD95F5           const [22]: (-174740002)
0F24  03                 const type 3
0F25  00008041           const [23]: (0)
0F29  03                 const type 3
0F2A  00005847           const [24]: (0)
0F2E  03                 const type 3
0F2F  00FF5B47           const [25]: (0)
0F33  04                 const type 4
0F34  44                 string size (68)
0F35  5E5C75285B64445D+  "^\\u([dD]"
0F3D  5B63646566434445+  "[cdefCDE"
0F45  465D5B3031323334+  "F][01234"
0F4D  3536373839614162+  "56789aAb"
0F55  4263436444654566+  "BcCdDeEf"
0F5D  465D5B3031323334+  "F][01234"
0F65  3536373839614162+  "56789aAb"
0F6D  4263436444654566+  "BcCdDeEf"
0F75  465D2900           "F])\0"
                         const [26]: "^\\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])"
0F79  03                 const type 3
0F7A  00008044           const [27]: (0)
0F7E  03                 const type 3
0F7F  00001046           const [28]: (0)
0F83  04                 const type 4
0F84  06                 string size (6)
0F85  5E5C282E2900       "^\\(.)\0"
                         const [29]: "^\\(.)"
0F8B  04                 const type 4
0F8C  10                 string size (16)
0F8D  756E636C6F736564+  "unclosed"
0F95  20737472696E6700   " string\0"
                         const [30]: "unclosed string"
                         * functions:
0F9D  00                 sizep (0)
                         * lines:
0F9F  01                 sizelineinfo (141)
                         [pc] (line)
0FA0  45                 [001] (69)
0FA1  01                 [002] (69)
0FA2  00                 [003] (69)
0FA3  00                 [004] (69)
0FA4  45                 [005] (69)
0FA5  01                 [006] (69)
0FA6  00                 [007] (70)
0FA7  00                 [008] (70)
0FA8  45                 [009] (70)
0FA9  01                 [010] (70)
0FAA  00                 [011] (70)
0FAB  00                 [012] (70)
0FAC  45                 [013] (73)
0FAD  01                 [014] (74)
0FAE  00                 [015] (74)
0FAF  00                 [016] (75)
0FB0  45                 [017] (76)
0FB1  01                 [018] (76)
0FB2  00                 [019] (77)
0FB3  00                 [020] (77)
0FB4  45                 [021] (77)
0FB5  01                 [022] (77)
0FB6  00                 [023] (78)
0FB7  00                 [024] (78)
0FB8  46                 [025] (79)
0FB9  01                 [026] (79)
0FBA  00                 [027] (79)
0FBB  00                 [028] (81)
0FBC  46                 [029] (81)
0FBD  01                 [030] (82)
0FBE  00                 [031] (82)
0FBF  00                 [032] (82)
0FC0  46                 [033] (83)
0FC1  01                 [034] (83)
0FC2  00                 [035] (84)
0FC3  00                 [036] (84)
0FC4  46                 [037] (84)
0FC5  01                 [038] (84)
0FC6  00                 [039] (84)
0FC7  00                 [040] (84)
0FC8  46                 [041] (85)
0FC9  01                 [042] (85)
0FCA  00                 [043] (85)
0FCB  00                 [044] (86)
0FCC  46                 [045] (86)
0FCD  01                 [046] (87)
0FCE  00                 [047] (87)
0FCF  00                 [048] (87)
0FD0  49                 [049] (87)
0FD1  01                 [050] (87)
0FD2  00                 [051] (87)
0FD3  00                 [052] (88)
0FD4  4A                 [053] (88)
0FD5  01                 [054] (88)
0FD6  00                 [055] (89)
0FD7  00                 [056] (89)
0FD8  4A                 [057] (90)
0FD9  01                 [058] (90)
0FDA  00                 [059] (90)
0FDB  00                 [060] (90)
0FDC  4B                 [061] (90)
0FDD  01                 [062] (90)
0FDE  00                 [063] (91)
0FDF  00                 [064] (91)
0FE0  4C                 [065] (91)
0FE1  01                 [066] (92)
0FE2  00                 [067] (92)
0FE3  00                 [068] (93)
0FE4  4C                 [069] (93)
0FE5  01                 [070] (93)
0FE6  00                 [071] (93)
0FE7  00                 [072] (93)
0FE8  4D                 [073] (93)
0FE9  01                 [074] (94)
0FEA  00                 [075] (94)
0FEB  00                 [076] (94)
0FEC  4D                 [077] (95)
0FED  01                 [078] (95)
0FEE  00                 [079] (96)
0FEF  00                 [080] (96)
0FF0  4D                 [081] (96)
0FF1  01                 [082] (96)
0FF2  00                 [083] (96)
0FF3  00                 [084] (96)
0FF4  4D                 [085] (97)
0FF5  01                 [086] (97)
0FF6  00                 [087] (97)
0FF7  00                 [088] (98)
0FF8  4E                 [089] (98)
0FF9  01                 [090] (100)
0FFA  00                 [091] (100)
0FFB  00                 [092] (100)
0FFC  4E                 [093] (100)
0FFD  01                 [094] (101)
0FFE  00                 [095] (101)
0FFF  00                 [096] (102)
1000  4F                 [097] (106)
1001  01                 [098] (106)
1002  00                 [099] (106)
1003  00                 [100] (106)
1004  4F                 [101] (107)
1005  01                 [102] (107)
1006  00                 [103] (107)
1007  00                 [104] (107)
1008  4F                 [105] (109)
1009  01                 [106] (109)
100A  00                 [107] (109)
100B  00                 [108] (109)
100C  51                 [109] (110)
100D  01                 [110] (110)
100E  00                 [111] (111)
100F  00                 [112] (112)
1010  51                 [113] (112)
1011  01                 [114] (112)
1012  00                 [115] (112)
1013  00                 [116] (112)
1014  52                 [117] (112)
1015  01                 [118] (112)
1016  00                 [119] (112)
1017  00                 [120] (112)
1018  52                 [121] (117)
1019  01                 [122] (117)
101A  00                 [123] (117)
101B  00                 [124] (117)
101C  52                 [125] (117)
101D  01                 [126] (117)
101E  00                 [127] (122)
101F  00                 [128] (122)
1020  53                 [129] (122)
1021  01                 [130] (122)
1022  00                 [131] (122)
1023  00                 [132] (122)
1024  53                 [133] (123)
1025  01                 [134] (125)
1026  00                 [135] (-128)
1027  00                 [136] (-128)
1028  54                 [137] (-128)
1029  01                 [138] (-128)
102A  00                 [139] (-128)
102B  00                 [140] (-128)
102C  54                 [141] (-127)
                         * locals:
11D4  00                 sizelocvars (0)
                         * upvalues:
11D5  00                 sizeupvalues (0)
                         ** end of function **

                         
11D6                     ** function [9] definition (level 2)
                         ** start of function **
11D6  00                 string size (0)
                         source name: (none)
11D8  03                 line defined (387)
11D9  8B                 last line defined (395)
11DA  03                 nups (0)
11DB  00                 numparams (2)
11DC  02                 is_vararg (0)
11DD  00                 maxstacksize (6)
                         * code:
11DF  0B                 sizecode (11)
11E0  A4004000           [01] self       2   0   256  ; -565905820
11E4  19410000           [02] loadk      4   1        ; "^[ \n\r\t]+"
11E8  52018000           [03] move       5   1      
11EC  A2C00002           [04] call       2   4   3  
11F0  D8000000           [05] test       3       0    ; to [7] if true
11F4  1A800080           [06] jmp        3            ; to [10]
11F8  0381C001           [07] add        4   3   258  ; 0
11FC  1E010001           [08] return     4   2      
1200  1A000080           [09] jmp        1            ; to [11]
1204  5E000001           [10] return     1   2      
1208  1E008000           [11] return     0   1      
                         * constants:
120C  03                 sizek (3)
120D  01                 const type 3
120E  64F644DE           const [0]: (-565905820)
1212  04                 const type 4
1213  09                 string size (9)
1214  5E5B200A0D095D2B+  "^[ \n\r\t]+"
121C  00                 "\0"
                         const [1]: "^[ \n\r\t]+"
121D  03                 const type 3
121E  0000803F           const [2]: (0)
                         * functions:
1222  00                 sizep (0)
                         * lines:
1223  0B                 sizelineinfo (11)
                         [pc] (line)
1224  85                 [01] (-123)
1225  01                 [02] (-123)
1226  00                 [03] (-123)
1227  00                 [04] (-123)
1228  85                 [05] (-122)
1229  01                 [06] (-122)
122A  00                 [07] (-121)
122B  00                 [08] (-121)
122C  85                 [09] (-121)
122D  01                 [10] (-119)
122E  00                 [11] (-117)
                         * locals:
1250  00                 sizelocvars (0)
                         * upvalues:
1251  00                 sizeupvalues (0)
                         ** end of function **

                         
1252                     ** function [10] definition (level 2)
                         ** start of function **
1252  00                 string size (0)
                         source name: (none)
1254  03                 line defined (399)
1255  BE                 last line defined (446)
1256  03                 nups (3)
1257  03                 numparams (4)
1258  04                 is_vararg (0)
1259  00                 maxstacksize (18)
                         * code:
125B  70                 sizecode (112)
125C  2401C000           [001] self       4   1   256  ; 2071470131
1260  92010001           [002] move       6   2      
1264  D2010001           [003] move       7   2      
1268  22810002           [004] call       4   4   2  
fail op	9
126C  09010002           [005] settable   4   4   0  
fail op	35
1270  23404002           [006] close      0  
1274  1A400180           [007] jmp        6            ; to [14]
1278  24814000           [008] self       4   0   258  ; 55930489
127C  99C10000           [009] loadk      6   3        ; "expected '{'"
1280  D2018000           [010] move       7   1      
1284  12020001           [011] move       8   2      
1288  52028001           [012] move       9   3      
128C  22410003           [013] call       4   6   1  
1290  13010000           [014] getupval   4   0      
1294  52018000           [015] move       5   1      
1298  83014101           [016] add        6   2   260  ; 0
129C  22818001           [017] call       4   3   2  
12A0  4E414100           [018] gettable   5   0   261  ; "strictTypes"
12A4  58010000           [019] test       5       0    ; to [21] if true
12A8  1A000180           [020] jmp        5            ; to [26]
12AC  64814100           [021] self       5   0   262  ; -1147133379
12B0  CB010000           [022] newtable   7   0   0    ; array=0, hash=0
12B4  62818001           [023] call       5   3   2  
12B8  58410000           [024] test       5       1    ; to [26] if false
12BC  1A000080           [025] jmp        1            ; to [27]
12C0  4B010000           [026] newtable   5   0   0    ; array=0, hash=0
12C4  A401C000           [027] self       6   1   256  ; 2071470131
12C8  12020002           [028] move       8   4      
12CC  52020002           [029] move       9   4      
12D0  A2810002           [030] call       6   4   2  
fail op	35
12D4  23C04103           [031] close      0  
12D8  1A800080           [032] jmp        3            ; to [36]
12DC  92018002           [033] move       6   5      
12E0  C3014102           [034] add        7   4   260  ; 0
12E4  9E018001           [035] return     6   3      
12E8  A401C200           [036] self       6   1   264  ; -965268854
12EC  A2810001           [037] call       6   2   2  
fail op	33
12F0  21800102           [038] tforloop   0       6    ; to [40] if exit
12F4  1A401080           [039] jmp        66           ; to [106]
12F8  D3018000           [040] getupval   7   1      
12FC  12020000           [041] move       8   0      
1300  52028000           [042] move       9   1      
1304  92020002           [043] move       10  4      
1308  D2028001           [044] move       11  3      
130C  E2C18002           [045] call       7   5   3  
1310  53020000           [046] getupval   9   0      
1314  92028000           [047] move       10  1      
1318  D2020004           [048] move       11  8      
131C  62828001           [049] call       9   3   2  
1320  12018004           [050] move       4   9      
1324  6402C000           [051] self       9   1   256  ; 2071470131
1328  D2020002           [052] move       11  4      
132C  12030002           [053] move       12  4      
1330  62820002           [054] call       9   4   2  
fail op	35
1334  6340C204           [055] close      1  
1338  1A400180           [056] jmp        6            ; to [63]
133C  64824000           [057] self       9   0   258  ; 55930489
1340  D9820200           [058] loadk      11  10       ; "expected colon"
1344  12038000           [059] move       12  1      
1348  52030002           [060] move       13  4      
134C  92038001           [061] move       14  3      
1350  62420003           [062] call       9   6   1  
1354  53020000           [063] getupval   9   0      
1358  92028000           [064] move       10  1      
135C  C3024102           [065] add        11  4   260  ; 0
1360  62828001           [066] call       9   3   2  
1364  12018004           [067] move       4   9      
1368  53020001           [068] getupval   9   2      
136C  92020000           [069] move       10  0      
1370  D2028000           [070] move       11  1      
1374  12030002           [071] move       12  4      
1378  62C20002           [072] call       9   4   3  
137C  4C418203           [073] settable   5   7   9  
1380  D3020000           [074] getupval   11  0      
1384  12038000           [075] move       12  1      
1388  52030005           [076] move       13  10     
138C  E2828001           [077] call       11  3   2  
1390  12018005           [078] move       4   11     
1394  E402C000           [079] self       11  1   256  ; 2071470131
1398  52030002           [080] move       13  4      
139C  92030002           [081] move       14  4      
13A0  E2820002           [082] call       11  4   2  
fail op	35
13A4  23C0C105           [083] close      0  
13A8  1A800080           [084] jmp        3            ; to [88]
13AC  12038002           [085] move       12  5      
13B0  43034102           [086] add        13  4   260  ; 0
13B4  1E038001           [087] return     12  3      
13B8  2403C000           [088] self       12  1   256  ; 2071470131
13BC  92030002           [089] move       14  4      
13C0  D2030002           [090] move       15  4      
13C4  22830002           [091] call       12  4   2  
fail op	35
13C8  63C04206           [092] close      1  
13CC  1A400180           [093] jmp        6            ; to [100]
13D0  24834000           [094] self       12  0   258  ; 55930489
13D4  99030300           [095] loadk      14  12       ; "expected comma or '}'"
13D8  D2038000           [096] move       15  1      
13DC  12040002           [097] move       16  4      
13E0  52048001           [098] move       17  3      
13E4  22430003           [099] call       12  6   1  
13E8  13030000           [100] getupval   12  0      
13EC  52038000           [101] move       13  1      
13F0  83034102           [102] add        14  4   260  ; 0
13F4  22838001           [103] call       12  3   2  
13F8  12010006           [104] move       4   12     
13FC  1AC0EE7F           [105] jmp        -68          ; to [38]
1400  24834000           [106] self       12  0   258  ; 55930489
1404  99430300           [107] loadk      14  13       ; "unclosed '{'"
1408  D2038000           [108] move       15  1      
140C  12040001           [109] move       16  2      
1410  52048001           [110] move       17  3      
1414  22430003           [111] call       12  6   1  
1418  1E008000           [112] return     0   1      
                         * constants:
141C  0E                 sizek (14)
141D  01                 const type 3
141E  3320787B           const [0]: (2071470131)
1422  04                 const type 4
1423  02                 string size (2)
1424  7B00               "{\0"
                         const [1]: "{"
1426  01                 const type 3
1427  796E5503           const [2]: (55930489)
142B  04                 const type 4
142C  0D                 string size (13)
142D  6578706563746564+  "expected"
1435  20277B2700         " '{'\0"
                         const [3]: "expected '{'"
143A  03                 const type 3
143B  0000803F           const [4]: (0)
143F  04                 const type 4
1440  0C                 string size (12)
1441  7374726963745479+  "strictTy"
1449  70657300           "pes\0"
                         const [5]: "strictTypes"
144D  01                 const type 3
144E  3D22A0BB           const [6]: (-1147133379)
1452  04                 const type 4
1453  02                 string size (2)
1454  7D00               "}\0"
                         const [7]: "}"
1456  01                 const type 3
1457  8A2A77C6           const [8]: (-965268854)
145B  04                 const type 4
145C  02                 string size (2)
145D  3A00               ":\0"
                         const [9]: ":"
145F  04                 const type 4
1460  0F                 string size (15)
1461  6578706563746564+  "expected"
1469  20636F6C6F6E00     " colon\0"
                         const [10]: "expected colon"
1470  04                 const type 4
1471  02                 string size (2)
1472  2C00               ",\0"
                         const [11]: ","
1474  04                 const type 4
1475  16                 string size (22)
1476  6578706563746564+  "expected"
147E  20636F6D6D61206F+  " comma o"
1486  7220277D2700       "r '}'\0"
                         const [12]: "expected comma or '}'"
148C  04                 const type 4
148D  0D                 string size (13)
148E  756E636C6F736564+  "unclosed"
1496  20277B2700         " '{'\0"
                         const [13]: "unclosed '{'"
                         * functions:
149B  00                 sizep (0)
                         * lines:
149C  70                 sizelineinfo (112)
                         [pc] (line)
149D  90                 [001] (-112)
149E  01                 [002] (-112)
149F  00                 [003] (-112)
14A0  00                 [004] (-112)
14A1  90                 [005] (-112)
14A2  01                 [006] (-112)
14A3  00                 [007] (-112)
14A4  00                 [008] (-111)
14A5  90                 [009] (-111)
14A6  01                 [010] (-111)
14A7  00                 [011] (-111)
14A8  00                 [012] (-111)
14A9  90                 [013] (-111)
14AA  01                 [014] (-108)
14AB  00                 [015] (-108)
14AC  00                 [016] (-108)
14AD  90                 [017] (-108)
14AE  01                 [018] (-106)
14AF  00                 [019] (-106)
14B0  00                 [020] (-106)
14B1  90                 [021] (-106)
14B2  01                 [022] (-106)
14B3  00                 [023] (-106)
14B4  00                 [024] (-106)
14B5  90                 [025] (-106)
14B6  01                 [026] (-106)
14B7  00                 [027] (-104)
14B8  00                 [028] (-104)
14B9  91                 [029] (-104)
14BA  01                 [030] (-104)
14BB  00                 [031] (-104)
14BC  00                 [032] (-104)
14BD  91                 [033] (-103)
14BE  01                 [034] (-103)
14BF  00                 [035] (-103)
14C0  00                 [036] (-101)
14C1  91                 [037] (-101)
14C2  01                 [038] (-100)
14C3  00                 [039] (-100)
14C4  00                 [040] (-99)
14C5  91                 [041] (-99)
14C6  01                 [042] (-99)
14C7  00                 [043] (-99)
14C8  00                 [044] (-99)
14C9  91                 [045] (-99)
14CA  01                 [046] (-97)
14CB  00                 [047] (-97)
14CC  00                 [048] (-97)
14CD  91                 [049] (-97)
14CE  01                 [050] (-97)
14CF  00                 [051] (-95)
14D0  00                 [052] (-95)
14D1  94                 [053] (-95)
14D2  01                 [054] (-95)
14D3  00                 [055] (-95)
14D4  00                 [056] (-95)
14D5  94                 [057] (-94)
14D6  01                 [058] (-94)
14D7  00                 [059] (-94)
14D8  00                 [060] (-94)
14D9  94                 [061] (-94)
14DA  01                 [062] (-94)
14DB  00                 [063] (-91)
14DC  00                 [064] (-91)
14DD  94                 [065] (-91)
14DE  01                 [066] (-91)
14DF  00                 [067] (-91)
14E0  00                 [068] (-89)
14E1  96                 [069] (-89)
14E2  01                 [070] (-89)
14E3  00                 [071] (-89)
14E4  00                 [072] (-89)
14E5  96                 [073] (-87)
14E6  01                 [074] (-82)
14E7  00                 [075] (-82)
14E8  00                 [076] (-82)
14E9  96                 [077] (-82)
14EA  01                 [078] (-82)
14EB  00                 [079] (-80)
14EC  00                 [080] (-80)
14ED  96                 [081] (-80)
14EE  01                 [082] (-80)
14EF  00                 [083] (-78)
14F0  00                 [084] (-78)
14F1  96                 [085] (-77)
14F2  01                 [086] (-77)
14F3  00                 [087] (-77)
14F4  00                 [088] (-74)
14F5  96                 [089] (-74)
14F6  01                 [090] (-74)
14F7  00                 [091] (-74)
14F8  00                 [092] (-74)
14F9  96                 [093] (-74)
14FA  01                 [094] (-73)
14FB  00                 [095] (-73)
14FC  00                 [096] (-73)
14FD  96                 [097] (-73)
14FE  01                 [098] (-73)
14FF  00                 [099] (-73)
1500  00                 [100] (-70)
1501  96                 [101] (-70)
1502  01                 [102] (-70)
1503  00                 [103] (-70)
1504  00                 [104] (-70)
1505  98                 [105] (-70)
1506  01                 [106] (-67)
1507  00                 [107] (-67)
1508  00                 [108] (-67)
1509  98                 [109] (-67)
150A  01                 [110] (-67)
150B  00                 [111] (-67)
150C  00                 [112] (-66)
                         * locals:
165D  00                 sizelocvars (0)
                         * upvalues:
165E  00                 sizeupvalues (0)
                         ** end of function **

                         
165F                     ** function [11] definition (level 2)
                         ** start of function **
165F  00                 string size (0)
                         source name: (none)
1661  03                 line defined (448)
1662  E0                 last line defined (480)
1663  03                 nups (2)
1664  02                 numparams (4)
1665  04                 is_vararg (0)
1666  00                 maxstacksize (16)
                         * code:
1668  58                 sizecode (88)
1669  2401C000           [01] self       4   1   256  ; 2071470131
166D  92010001           [02] move       6   2      
1671  D2010001           [03] move       7   2      
1675  22810002           [04] call       4   4   2  
fail op	9
1679  09010002           [05] settable   4   4   0  
fail op	35
167D  23404002           [06] close      0  
1681  1A400180           [07] jmp        6            ; to [14]
1685  24814000           [08] self       4   0   258  ; 55930489
1689  99C10000           [09] loadk      6   3        ; "expected '['"
168D  D2018000           [10] move       7   1      
1691  12020001           [11] move       8   2      
1695  52028001           [12] move       9   3      
1699  22410003           [13] call       4   6   1  
169D  13010000           [14] getupval   4   0      
16A1  52018000           [15] move       5   1      
16A5  83014101           [16] add        6   2   260  ; 0
16A9  22818001           [17] call       4   3   2  
16AD  4E414100           [18] gettable   5   0   261  ; "strictTypes"
16B1  58010000           [19] test       5       0    ; to [21] if true
16B5  1A000180           [20] jmp        5            ; to [26]
16B9  64814100           [21] self       5   0   262  ; -427173452
16BD  CB010000           [22] newtable   7   0   0    ; array=0, hash=0
16C1  62818001           [23] call       5   3   2  
16C5  58410000           [24] test       5       1    ; to [26] if false
16C9  1A000080           [25] jmp        1            ; to [27]
16CD  4B010000           [26] newtable   5   0   0    ; array=0, hash=0
16D1  A401C000           [27] self       6   1   256  ; 2071470131
16D5  12020002           [28] move       8   4      
16D9  52020002           [29] move       9   4      
16DD  A2810002           [30] call       6   4   2  
fail op	35
16E1  23C04103           [31] close      0  
16E5  1A800080           [32] jmp        3            ; to [36]
16E9  92018002           [33] move       6   5      
16ED  C3014102           [34] add        7   4   260  ; 0
16F1  9E018001           [35] return     6   3      
16F5  A401C200           [36] self       6   1   264  ; -965268854
16F9  A2810001           [37] call       6   2   2  
fail op	33
16FD  21800102           [38] tforloop   0       6    ; to [40] if exit
1701  1A400A80           [39] jmp        42           ; to [82]
1705  D3018000           [40] getupval   7   1      
1709  12020000           [41] move       8   0      
170D  52028000           [42] move       9   1      
1711  92020002           [43] move       10  4      
1715  E2C10002           [44] call       7   4   3  
1719  5D420200           [45] getglobal  9   9        ; table
171D  4E82C204           [46] gettable   9   9   266  ; -431682403
1721  92028002           [47] move       10  5      
1725  D2028003           [48] move       11  7      
1729  62428001           [49] call       9   3   1  
172D  53020000           [50] getupval   9   0      
1731  92028000           [51] move       10  1      
1735  D2020004           [52] move       11  8      
1739  62828001           [53] call       9   3   2  
173D  12018004           [54] move       4   9      
1741  6402C000           [55] self       9   1   256  ; 2071470131
1745  D2020002           [56] move       11  4      
1749  12030002           [57] move       12  4      
174D  62820002           [58] call       9   4   2  
fail op	35
1751  23C0C104           [59] close      0  
1755  1A800080           [60] jmp        3            ; to [64]
1759  92028002           [61] move       10  5      
175D  C3024102           [62] add        11  4   260  ; 0
1761  9E028001           [63] return     10  3      
1765  A402C000           [64] self       10  1   256  ; 2071470131
1769  12030002           [65] move       12  4      
176D  52030002           [66] move       13  4      
1771  A2820002           [67] call       10  4   2  
fail op	35
1775  63C04205           [68] close      1  
1779  1A400180           [69] jmp        6            ; to [76]
177D  A4824000           [70] self       10  0   258  ; 55930489
1781  19030300           [71] loadk      12  12       ; "expected comma or '['"
1785  52038000           [72] move       13  1      
1789  92030002           [73] move       14  4      
178D  D2038001           [74] move       15  3      
1791  A2420003           [75] call       10  6   1  
1795  93020000           [76] getupval   10  0      
1799  D2028000           [77] move       11  1      
179D  03034102           [78] add        12  4   260  ; 0
17A1  A2828001           [79] call       10  3   2  
17A5  12010005           [80] move       4   10     
17A9  1AC0F47F           [81] jmp        -44          ; to [38]
17AD  A4824000           [82] self       10  0   258  ; 55930489
17B1  19430300           [83] loadk      12  13       ; "unclosed '['"
17B5  52038000           [84] move       13  1      
17B9  92030001           [85] move       14  2      
17BD  D2038001           [86] move       15  3      
17C1  A2420003           [87] call       10  6   1  
17C5  1E008000           [88] return     0   1      
                         * constants:
17C9  0E                 sizek (14)
17CA  01                 const type 3
17CB  3320787B           const [0]: (2071470131)
17CF  04                 const type 4
17D0  02                 string size (2)
17D1  5B00               "[\0"
                         const [1]: "["
17D3  01                 const type 3
17D4  796E5503           const [2]: (55930489)
17D8  04                 const type 4
17D9  0D                 string size (13)
17DA  6578706563746564+  "expected"
17E2  20275B2700         " '['\0"
                         const [3]: "expected '['"
17E7  03                 const type 3
17E8  0000803F           const [4]: (0)
17EC  04                 const type 4
17ED  0C                 string size (12)
17EE  7374726963745479+  "strictTy"
17F6  70657300           "pes\0"
                         const [5]: "strictTypes"
17FA  01                 const type 3
17FB  B4D989E6           const [6]: (-427173452)
17FF  04                 const type 4
1800  02                 string size (2)
1801  5D00               "]\0"
                         const [7]: "]"
1803  01                 const type 3
1804  8A2A77C6           const [8]: (-965268854)
1808  04                 const type 4
1809  06                 string size (6)
180A  7461626C6500       "table\0"
                         const [9]: "table"
1810  01                 const type 3
1811  9D0C45E6           const [10]: (-431682403)
1815  04                 const type 4
1816  02                 string size (2)
1817  2C00               ",\0"
                         const [11]: ","
1819  04                 const type 4
181A  16                 string size (22)
181B  6578706563746564+  "expected"
1823  20636F6D6D61206F+  " comma o"
182B  7220275B2700       "r '['\0"
                         const [12]: "expected comma or '['"
1831  04                 const type 4
1832  0D                 string size (13)
1833  756E636C6F736564+  "unclosed"
183B  20275B2700         " '['\0"
                         const [13]: "unclosed '['"
                         * functions:
1840  00                 sizep (0)
                         * lines:
1841  58                 sizelineinfo (88)
                         [pc] (line)
1842  C1                 [01] (-63)
1843  01                 [02] (-63)
1844  00                 [03] (-63)
1845  00                 [04] (-63)
1846  C1                 [05] (-63)
1847  01                 [06] (-63)
1848  00                 [07] (-63)
1849  00                 [08] (-62)
184A  C1                 [09] (-62)
184B  01                 [10] (-62)
184C  00                 [11] (-62)
184D  00                 [12] (-62)
184E  C1                 [13] (-62)
184F  01                 [14] (-59)
1850  00                 [15] (-59)
1851  00                 [16] (-59)
1852  C1                 [17] (-59)
1853  01                 [18] (-58)
1854  00                 [19] (-58)
1855  00                 [20] (-58)
1856  C1                 [21] (-58)
1857  01                 [22] (-58)
1858  00                 [23] (-58)
1859  00                 [24] (-58)
185A  C1                 [25] (-58)
185B  01                 [26] (-58)
185C  00                 [27] (-57)
185D  00                 [28] (-57)
185E  C2                 [29] (-57)
185F  01                 [30] (-57)
1860  00                 [31] (-57)
1861  00                 [32] (-57)
1862  C2                 [33] (-56)
1863  01                 [34] (-56)
1864  00                 [35] (-56)
1865  00                 [36] (-53)
1866  C2                 [37] (-53)
1867  01                 [38] (-52)
1868  00                 [39] (-52)
1869  00                 [40] (-51)
186A  C2                 [41] (-51)
186B  01                 [42] (-51)
186C  00                 [43] (-51)
186D  00                 [44] (-51)
186E  C2                 [45] (-49)
186F  01                 [46] (-49)
1870  00                 [47] (-49)
1871  00                 [48] (-49)
1872  C2                 [49] (-49)
1873  01                 [50] (-47)
1874  00                 [51] (-47)
1875  00                 [52] (-47)
1876  C5                 [53] (-47)
1877  01                 [54] (-47)
1878  00                 [55] (-42)
1879  00                 [56] (-42)
187A  C5                 [57] (-42)
187B  01                 [58] (-42)
187C  00                 [59] (-41)
187D  00                 [60] (-41)
187E  C5                 [61] (-40)
187F  01                 [62] (-40)
1880  00                 [63] (-40)
1881  00                 [64] (-38)
1882  C5                 [65] (-38)
1883  01                 [66] (-38)
1884  00                 [67] (-38)
1885  00                 [68] (-38)
1886  C6                 [69] (-38)
1887  01                 [70] (-37)
1888  00                 [71] (-37)
1889  00                 [72] (-37)
188A  C6                 [73] (-37)
188B  01                 [74] (-37)
188C  00                 [75] (-37)
188D  00                 [76] (-35)
188E  C6                 [77] (-35)
188F  01                 [78] (-35)
1890  00                 [79] (-35)
1891  00                 [80] (-35)
1892  C6                 [81] (-35)
1893  01                 [82] (-33)
1894  00                 [83] (-33)
1895  00                 [84] (-33)
1896  C6                 [85] (-33)
1897  01                 [86] (-33)
1898  00                 [87] (-33)
1899  00                 [88] (-32)
                         * locals:
19A2  00                 sizelocvars (0)
                         * upvalues:
19A3  00                 sizeupvalues (0)
                         ** end of function **

                         
19A4                     ** function [12] definition (level 2)
                         ** start of function **
19A4  00                 string size (0)
                         source name: (none)
19A6  03                 line defined (483)
19A7  83                 last line defined (515)
19A8  04                 nups (5)
19A9  05                 numparams (4)
19AA  04                 is_vararg (0)
19AB  00                 maxstacksize (10)
                         * code:
19AD  6C                 sizecode (108)
19AE  13010000           [001] getupval   4   0      
19B2  52018000           [002] move       5   1      
19B6  92010001           [003] move       6   2      
19BA  22818001           [004] call       4   3   2  
19BE  92000002           [005] move       2   4      
19C2  2401C000           [006] self       4   1   256  ; -965268854
19C6  22810001           [007] call       4   2   2  
fail op	21
19CA  15800002           [008] concat     0   4   2  
19CE  1A400180           [009] jmp        6            ; to [16]
19D2  24414000           [010] self       4   0   257  ; 55930489
19D6  99810000           [011] loadk      6   2        ; "unexpected end of string"
19DA  D2018000           [012] move       7   1      
19DE  06020004           [013] loadnil    8   8      
19E2  52028001           [014] move       9   3      
19E6  22410003           [015] call       4   6   1  
19EA  24C1C000           [016] self       4   1   259  ; -565905820
19EE  99010100           [017] loadk      6   4        ; "^\""
19F2  D2010001           [018] move       7   2      
19F6  22810002           [019] call       4   4   2  
19FA  18010000           [020] test       4       0    ; to [22] if true
19FE  1AC00180           [021] jmp        8            ; to [30]
1A02  13018000           [022] getupval   4   1      
1A06  52010000           [023] move       5   0      
1A0A  92018000           [024] move       6   1      
1A0E  D2010001           [025] move       7   2      
1A12  12028001           [026] move       8   3      
1A16  07018002           [027] tailcall   4   5   0  
1A1A  1E010000           [028] return     4   0      
1A1E  1A401380           [029] jmp        78           ; to [108]
1A22  24C1C000           [030] self       4   1   259  ; -565905820
1A26  99410100           [031] loadk      6   5        ; "^[-0123456789 ]"
1A2A  D2010001           [032] move       7   2      
1A2E  22810002           [033] call       4   4   2  
1A32  18010000           [034] test       4       0    ; to [36] if true
1A36  1AC00180           [035] jmp        8            ; to [44]
1A3A  13010001           [036] getupval   4   2      
1A3E  52010000           [037] move       5   0      
1A42  92018000           [038] move       6   1      
1A46  D2010001           [039] move       7   2      
1A4A  12028001           [040] move       8   3      
1A4E  07018002           [041] tailcall   4   5   0  
1A52  1E010000           [042] return     4   0      
1A56  1AC00F80           [043] jmp        64           ; to [108]
1A5A  24C1C000           [044] self       4   1   259  ; -565905820
1A5E  99810100           [045] loadk      6   6        ; "^%{"
1A62  D2010001           [046] move       7   2      
1A66  22810002           [047] call       4   4   2  
1A6A  18010000           [048] test       4       0    ; to [50] if true
1A6E  1AC00180           [049] jmp        8            ; to [58]
1A72  13018001           [050] getupval   4   3      
1A76  52010000           [051] move       5   0      
1A7A  92018000           [052] move       6   1      
1A7E  D2010001           [053] move       7   2      
1A82  12028001           [054] move       8   3      
1A86  07018002           [055] tailcall   4   5   0  
1A8A  1E010000           [056] return     4   0      
1A8E  1A400C80           [057] jmp        50           ; to [108]
1A92  24C1C000           [058] self       4   1   259  ; -565905820
1A96  99C10100           [059] loadk      6   7        ; "^%["
1A9A  D2010001           [060] move       7   2      
1A9E  22810002           [061] call       4   4   2  
1AA2  18010000           [062] test       4       0    ; to [64] if true
1AA6  1AC00180           [063] jmp        8            ; to [72]
1AAA  13010002           [064] getupval   4   4      
1AAE  52010000           [065] move       5   0      
1AB2  92018000           [066] move       6   1      
1AB6  D2010001           [067] move       7   2      
1ABA  12028001           [068] move       8   3      
1ABE  07018002           [069] tailcall   4   5   0  
1AC2  1E010000           [070] return     4   0      
1AC6  1AC00880           [071] jmp        36           ; to [108]
1ACA  24C1C000           [072] self       4   1   259  ; -565905820
1ACE  99010200           [073] loadk      6   8        ; "^true"
1AD2  D2010001           [074] move       7   2      
1AD6  22810002           [075] call       4   4   2  
1ADA  18010000           [076] test       4       0    ; to [78] if true
1ADE  1AC00080           [077] jmp        4            ; to [82]
1AE2  17018000           [078] loadbool   4   1   0    ; true
1AE6  43414201           [079] add        5   2   265  ; 0
1AEA  1E018001           [080] return     4   3      
1AEE  1A400680           [081] jmp        26           ; to [108]
1AF2  24C1C000           [082] self       4   1   259  ; -565905820
1AF6  99810200           [083] loadk      6   10       ; "^false"
1AFA  D2010001           [084] move       7   2      
1AFE  22810002           [085] call       4   4   2  
1B02  18010000           [086] test       4       0    ; to [88] if true
1B06  1AC00080           [087] jmp        4            ; to [92]
1B0A  17010000           [088] loadbool   4   0   0    ; false
1B0E  43C14201           [089] add        5   2   267  ; 0
1B12  1E018001           [090] return     4   3      
1B16  1AC00380           [091] jmp        16           ; to [108]
1B1A  24C1C000           [092] self       4   1   259  ; -565905820
1B1E  99010300           [093] loadk      6   12       ; "^null"
1B22  D2010001           [094] move       7   2      
1B26  22810002           [095] call       4   4   2  
1B2A  18010000           [096] test       4       0    ; to [98] if true
1B2E  1AC00080           [097] jmp        4            ; to [102]
1B32  06010002           [098] loadnil    4   4      
1B36  43414201           [099] add        5   2   265  ; 0
1B3A  1E018001           [100] return     4   3      
1B3E  1A400180           [101] jmp        6            ; to [108]
1B42  24414000           [102] self       4   0   257  ; 55930489
1B46  99410300           [103] loadk      6   13       ; "can't parse JSON"
1B4A  D2018000           [104] move       7   1      
1B4E  12020001           [105] move       8   2      
1B52  52028001           [106] move       9   3      
1B56  22410003           [107] call       4   6   1  
1B5A  1E008000           [108] return     0   1      
                         * constants:
1B5E  0E                 sizek (14)
1B5F  01                 const type 3
1B60  8A2A77C6           const [0]: (-965268854)
1B64  01                 const type 3
1B65  796E5503           const [1]: (55930489)
1B69  04                 const type 4
1B6A  19                 string size (25)
1B6B  756E657870656374+  "unexpect"
1B73  656420656E64206F+  "ed end o"
1B7B  6620737472696E67+  "f string"
1B83  00                 "\0"
                         const [2]: "unexpected end of string"
1B84  01                 const type 3
1B85  64F644DE           const [3]: (-565905820)
1B89  04                 const type 4
1B8A  03                 string size (3)
1B8B  5E2200             "^\"\0"
                         const [4]: "^\""
1B8E  04                 const type 4
1B8F  10                 string size (16)
1B90  5E5B2D3031323334+  "^[-01234"
1B98  3536373839205D00   "56789 ]\0"
                         const [5]: "^[-0123456789 ]"
1BA0  04                 const type 4
1BA1  04                 string size (4)
1BA2  5E257B00           "^%{\0"
                         const [6]: "^%{"
1BA6  04                 const type 4
1BA7  04                 string size (4)
1BA8  5E255B00           "^%[\0"
                         const [7]: "^%["
1BAC  04                 const type 4
1BAD  06                 string size (6)
1BAE  5E7472756500       "^true\0"
                         const [8]: "^true"
1BB4  03                 const type 3
1BB5  00008040           const [9]: (0)
1BB9  04                 const type 4
1BBA  07                 string size (7)
1BBB  5E66616C736500     "^false\0"
                         const [10]: "^false"
1BC2  03                 const type 3
1BC3  0000A040           const [11]: (0)
1BC7  04                 const type 4
1BC8  06                 string size (6)
1BC9  5E6E756C6C00       "^null\0"
                         const [12]: "^null"
1BCF  04                 const type 4
1BD0  11                 string size (17)
1BD1  63616E2774207061+  "can't pa"
1BD9  727365204A534F4E+  "rse JSON"
1BE1  00                 "\0"
                         const [13]: "can't parse JSON"
                         * functions:
1BE2  00                 sizep (0)
                         * lines:
1BE3  6C                 sizelineinfo (108)
                         [pc] (line)
1BE4  E5                 [001] (-27)
1BE5  01                 [002] (-27)
1BE6  00                 [003] (-27)
1BE7  00                 [004] (-27)
1BE8  E5                 [005] (-27)
1BE9  01                 [006] (-25)
1BEA  00                 [007] (-25)
1BEB  00                 [008] (-25)
1BEC  E5                 [009] (-25)
1BED  01                 [010] (-24)
1BEE  00                 [011] (-24)
1BEF  00                 [012] (-24)
1BF0  E5                 [013] (-24)
1BF1  01                 [014] (-24)
1BF2  00                 [015] (-24)
1BF3  00                 [016] (-21)
1BF4  E5                 [017] (-21)
1BF5  01                 [018] (-21)
1BF6  00                 [019] (-21)
1BF7  00                 [020] (-21)
1BF8  E7                 [021] (-21)
1BF9  01                 [022] (-20)
1BFA  00                 [023] (-20)
1BFB  00                 [024] (-20)
1BFC  E7                 [025] (-20)
1BFD  01                 [026] (-20)
1BFE  00                 [027] (-20)
1BFF  00                 [028] (-20)
1C00  E7                 [029] (-20)
1C01  01                 [030] (-18)
1C02  00                 [031] (-18)
1C03  00                 [032] (-18)
1C04  E7                 [033] (-18)
1C05  01                 [034] (-18)
1C06  00                 [035] (-18)
1C07  00                 [036] (-17)
1C08  E8                 [037] (-17)
1C09  01                 [038] (-17)
1C0A  00                 [039] (-17)
1C0B  00                 [040] (-17)
1C0C  E8                 [041] (-17)
1C0D  01                 [042] (-17)
1C0E  00                 [043] (-17)
1C0F  00                 [044] (-15)
1C10  E8                 [045] (-15)
1C11  01                 [046] (-15)
1C12  00                 [047] (-15)
1C13  00                 [048] (-15)
1C14  E8                 [049] (-15)
1C15  01                 [050] (-14)
1C16  00                 [051] (-14)
1C17  00                 [052] (-14)
1C18  E8                 [053] (-14)
1C19  01                 [054] (-14)
1C1A  00                 [055] (-14)
1C1B  00                 [056] (-14)
1C1C  E8                 [057] (-14)
1C1D  01                 [058] (-12)
1C1E  00                 [059] (-12)
1C1F  00                 [060] (-12)
1C20  EB                 [061] (-12)
1C21  01                 [062] (-12)
1C22  00                 [063] (-12)
1C23  00                 [064] (-11)
1C24  EB                 [065] (-11)
1C25  01                 [066] (-11)
1C26  00                 [067] (-11)
1C27  00                 [068] (-11)
1C28  EB                 [069] (-11)
1C29  01                 [070] (-11)
1C2A  00                 [071] (-11)
1C2B  00                 [072] (-9)
1C2C  EB                 [073] (-9)
1C2D  01                 [074] (-9)
1C2E  00                 [075] (-9)
1C2F  00                 [076] (-9)
1C30  EB                 [077] (-9)
1C31  01                 [078] (-8)
1C32  00                 [079] (-8)
1C33  00                 [080] (-8)
1C34  EB                 [081] (-8)
1C35  01                 [082] (-6)
1C36  00                 [083] (-6)
1C37  00                 [084] (-6)
1C38  EC                 [085] (-6)
1C39  01                 [086] (-6)
1C3A  00                 [087] (-6)
1C3B  00                 [088] (-5)
1C3C  EC                 [089] (-5)
1C3D  01                 [090] (-5)
1C3E  00                 [091] (-5)
1C3F  00                 [092] (-3)
1C40  EC                 [093] (-3)
1C41  01                 [094] (-3)
1C42  00                 [095] (-3)
1C43  00                 [096] (-3)
1C44  EC                 [097] (-3)
1C45  01                 [098] (-2)
1C46  00                 [099] (-2)
1C47  00                 [100] (-2)
1C48  EC                 [101] (-2)
1C49  01                 [102] (1)
1C4A  00                 [103] (1)
1C4B  00                 [104] (1)
1C4C  EC                 [105] (1)
1C4D  01                 [106] (1)
1C4E  00                 [107] (1)
1C4F  00                 [108] (3)
                         * locals:
1D94  00                 sizelocvars (0)
                         * upvalues:
1D95  00                 sizeupvalues (0)
                         ** end of function **

                         
1D96                     ** function [13] definition (level 2)
                         ** start of function **
1D96  00                 string size (0)
                         source name: (none)
1D98  04                 line defined (517)
1D99  B0                 last line defined (560)
1D9A  04                 nups (2)
1D9B  02                 numparams (3)
1D9C  03                 is_vararg (0)
1D9D  00                 maxstacksize (9)
                         * code:
1D9F  74                 sizecode (116)
1DA0  DD000000           [001] getglobal  3   0        ; 1780700712
1DA4  12010000           [002] move       4   0      
1DA8  E2800001           [003] call       3   2   2  
fail op	35
1DAC  2340C001           [004] close      0  
1DB0  1AC00080           [005] jmp        4            ; to [10]
1DB4  CE804000           [006] gettable   3   0   258  ; "__index"
1DB8  13010000           [007] getupval   4   0      
fail op	35
1DBC  63008101           [008] close      1  
1DC0  1A400180           [009] jmp        6            ; to [16]
1DC4  D3000000           [010] getupval   3   0      
1DC8  E4C0C001           [011] self       3   3   259  ; 55930489
1DCC  59010100           [012] loadk      5   4        ; "JSON:decode must be called in method format"
1DD0  86018003           [013] loadnil    6   7      
1DD4  12020001           [014] move       8   2      
1DD8  E2400003           [015] call       3   6   1  
fail op	35
1DDC  2340C100           [016] close      0  
1DE0  1A000280           [017] jmp        9            ; to [27]
1DE4  E4804100           [018] self       3   0   262  ; -1874878906
1DE8  5DC10100           [019] getglobal  5   7        ; string
1DEC  4E01C202           [020] gettable   5   5   264  ; 1260343128
1DF0  99410200           [021] loadk      6   9        ; "nil passed to JSON:decode()"
1DF4  62810001           [022] call       5   2   2  
1DF8  86018003           [023] loadnil    6   7      
1DFC  12020001           [024] move       8   2      
1E00  E2400003           [025] call       3   6   1  
1E04  1AC00380           [026] jmp        16           ; to [43]
1E08  DD000000           [027] getglobal  3   0        ; 1780700712
1E0C  12018000           [028] move       4   1      
1E10  E2800001           [029] call       3   2   2  
fail op	35
1E14  63C0C101           [030] close      1  
1E18  1A800280           [031] jmp        11           ; to [43]
1E1C  E4C04000           [032] self       3   0   259  ; 55930489
1E20  5DC10100           [033] getglobal  5   7        ; string
1E24  4E01C202           [034] gettable   5   5   264  ; 1260343128
1E28  99810200           [035] loadk      6   10       ; "expected string argument to JSON:decode(), got %s"
1E2C  DD010000           [036] getglobal  7   0        ; 1780700712
1E30  12028000           [037] move       8   1      
1E34  E2010001           [038] call       7   2   0  
1E38  62810000           [039] call       5   0   2  
1E3C  86018003           [040] loadnil    6   7      
1E40  12020001           [041] move       8   2      
1E44  E2400003           [042] call       3   6   1  
1E48  E4C0C200           [043] self       3   1   267  ; -1354460921
1E4C  59010300           [044] loadk      5   12       ; "^%s*$"
1E50  E2808001           [045] call       3   3   2  
1E54  D8000000           [046] test       3       0    ; to [48] if true
1E58  1A400080           [047] jmp        2            ; to [50]
1E5C  C6008001           [048] loadnil    3   3      
1E60  DE000001           [049] return     3   2      
1E64  E4C0C200           [050] self       3   1   267  ; -1354460921
1E68  59410300           [051] loadk      5   13       ; "^%s*<"
1E6C  E2808001           [052] call       3   3   2  
1E70  D8000000           [053] test       3       0    ; to [55] if true
1E74  1A000280           [054] jmp        9            ; to [64]
1E78  E4804300           [055] self       3   0   270  ; -323340558
1E7C  5DC10100           [056] getglobal  5   7        ; string
1E80  4E01C202           [057] gettable   5   5   264  ; 1260343128
1E84  99C10300           [058] loadk      6   15       ; "html passed to JSON:decode()"
1E88  62810001           [059] call       5   2   2  
1E8C  92018000           [060] move       6   1      
1E90  C6018003           [061] loadnil    7   7      
1E94  12020001           [062] move       8   2      
1E98  E2400003           [063] call       3   6   1  
1E9C  E400C400           [064] self       3   1   272  ; 2071470131
1EA0  59410400           [065] loadk      5   17       ; 0
1EA4  99410400           [066] loadk      6   17       ; 0
1EA8  E2800002           [067] call       3   4   2  
1EAC  E480C401           [068] self       3   3   274  ; 1886284694
1EB0  E2800001           [069] call       3   2   2  
fail op	35
1EB4  63C0C401           [070] close      1  
1EB8  1AC00280           [071] jmp        12           ; to [84]
1EBC  E400C500           [072] self       3   1   276  ; -965268854
1EC0  E2800001           [073] call       3   2   2  
fail op	33
1EC4  21C0808A           [074] tforloop   0       3    ; to [76] if exit
1EC8  1A400380           [075] jmp        14           ; to [90]
1ECC  E400C400           [076] self       3   1   272  ; 2071470131
1ED0  59410500           [077] loadk      5   21       ; 0
1ED4  99410500           [078] loadk      6   21       ; 0
1ED8  E2800002           [079] call       3   4   2  
1EDC  E480C401           [080] self       3   3   274  ; 1886284694
1EE0  E2800001           [081] call       3   2   2  
fail op	35
1EE4  23C0C401           [082] close      0  
1EE8  1A400180           [083] jmp        6            ; to [90]
1EEC  E4C04000           [084] self       3   0   259  ; 55930489
1EF0  59810500           [085] loadk      5   22       ; "JSON package groks only UTF-8, sorry"
1EF4  92018000           [086] move       6   1      
1EF8  C6018003           [087] loadnil    7   7      
1EFC  12020001           [088] move       8   2      
1F00  E2400003           [089] call       3   6   1  
1F04  DDC00500           [090] getglobal  3   23       ; -209943037
1F08  13018000           [091] getupval   4   1      
1F0C  52010000           [092] move       5   0      
1F10  92018000           [093] move       6   1      
1F14  D9410400           [094] loadk      7   17       ; 0
1F18  12020001           [095] move       8   2      
1F1C  E2C00003           [096] call       3   6   3  
1F20  D8000000           [097] test       3       0    ; to [99] if true
1F24  1A400080           [098] jmp        2            ; to [101]
1F28  1E010001           [099] return     4   2      
1F2C  1A800380           [100] jmp        15           ; to [116]
1F30  4E014600           [101] gettable   5   0   280  ; "assert"
1F34  58010000           [102] test       5       0    ; to [104] if true
1F38  1A000180           [103] jmp        5            ; to [109]
1F3C  4E414600           [104] gettable   5   0   281  ; 317968122
1F40  97010000           [105] loadbool   6   0   0    ; false
1F44  D2010002           [106] move       7   4      
1F48  62418001           [107] call       5   3   1  
1F4C  1AC00080           [108] jmp        4            ; to [113]
1F50  5D410600           [109] getglobal  5   25       ; 317968122
1F54  97010000           [110] loadbool   6   0   0    ; false
1F58  D2010002           [111] move       7   4      
1F5C  62418001           [112] call       5   3   1  
1F60  46018002           [113] loadnil    5   5      
1F64  92010002           [114] move       6   4      
1F68  5E018001           [115] return     5   3      
1F6C  1E008000           [116] return     0   1      
                         * constants:
1F70  1A                 sizek (26)
1F71  01                 const type 3
1F72  2856236A           const [0]: (1780700712)
1F76  04                 const type 4
1F77  06                 string size (6)
1F78  7461626C6500       "table\0"
                         const [1]: "table"
1F7E  04                 const type 4
1F7F  08                 string size (8)
1F80  5F5F696E64657800   "__index\0"
                         const [2]: "__index"
1F88  01                 const type 3
1F89  796E5503           const [3]: (55930489)
1F8D  04                 const type 4
1F8E  2C                 string size (44)
1F8F  4A534F4E3A646563+  "JSON:dec"
1F97  6F6465206D757374+  "ode must"
1F9F  2062652063616C6C+  " be call"
1FA7  656420696E206D65+  "ed in me"
1FAF  74686F6420666F72+  "thod for"
1FB7  6D617400           "mat\0"
                         const [4]: "JSON:decode must be called in method format"
1FBB  00                 const type 0
                         const [5]: nil
1FBC  01                 const type 3
1FBD  469E3F90           const [6]: (-1874878906)
1FC1  04                 const type 4
1FC2  07                 string size (7)
1FC3  737472696E6700     "string\0"
                         const [7]: "string"
1FCA  01                 const type 3
1FCB  584F1F4B           const [8]: (1260343128)
1FCF  04                 const type 4
1FD0  1C                 string size (28)
1FD1  6E696C2070617373+  "nil pass"
1FD9  656420746F204A53+  "ed to JS"
1FE1  4F4E3A6465636F64+  "ON:decod"
1FE9  65282900           "e()\0"
                         const [9]: "nil passed to JSON:decode()"
1FED  04                 const type 4
1FEE  32                 string size (50)
1FEF  6578706563746564+  "expected"
1FF7  20737472696E6720+  " string "
1FFF  617267756D656E74+  "argument"
2007  20746F204A534F4E+  " to JSON"
200F  3A6465636F646528+  ":decode("
2017  292C20676F742025+  "), got %"
201F  7300               "s\0"
                         const [10]: "expected string argument to JSON:decode(), got %s"
2021  01                 const type 3
2022  079144AF           const [11]: (-1354460921)
2026  04                 const type 4
2027  06                 string size (6)
2028  5E25732A2400       "^%s*$\0"
                         const [12]: "^%s*$"
202E  04                 const type 4
202F  06                 string size (6)
2030  5E25732A3C00       "^%s*<\0"
                         const [13]: "^%s*<"
2036  01                 const type 3
2037  F236BAEC           const [14]: (-323340558)
203B  04                 const type 4
203C  1D                 string size (29)
203D  68746D6C20706173+  "html pas"
2045  73656420746F204A+  "sed to J"
204D  534F4E3A6465636F+  "SON:deco"
2055  6465282900         "de()\0"
                         const [15]: "html passed to JSON:decode()"
205A  01                 const type 3
205B  3320787B           const [16]: (2071470131)
205F  03                 const type 3
2060  0000803F           const [17]: (0)
2064  01                 const type 3
2065  966B6E70           const [18]: (1886284694)
2069  03                 const type 3
206A  00000000           const [19]: (0)
206E  01                 const type 3
206F  8A2A77C6           const [20]: (-965268854)
2073  03                 const type 3
2074  00000040           const [21]: (0)
2078  04                 const type 4
2079  25                 string size (37)
207A  4A534F4E20706163+  "JSON pac"
2082  6B6167652067726F+  "kage gro"
208A  6B73206F6E6C7920+  "ks only "
2092  5554462D382C2073+  "UTF-8, s"
209A  6F72727900         "orry\0"
                         const [22]: "JSON package groks only UTF-8, sorry"
209F  01                 const type 3
20A0  03867CF3           const [23]: (-209943037)
20A4  04                 const type 4
20A5  07                 string size (7)
20A6  61737365727400     "assert\0"
                         const [24]: "assert"
20AD  01                 const type 3
20AE  FACEF312           const [25]: (317968122)
                         * functions:
20B2  00                 sizep (0)
                         * lines:
20B3  74                 sizelineinfo (116)
                         [pc] (line)
20B4  06                 [001] (6)
20B5  02                 [002] (6)
20B6  00                 [003] (6)
20B7  00                 [004] (6)
20B8  06                 [005] (6)
20B9  02                 [006] (6)
20BA  00                 [007] (6)
20BB  00                 [008] (6)
20BC  06                 [009] (6)
20BD  02                 [010] (7)
20BE  00                 [011] (7)
20BF  00                 [012] (7)
20C0  06                 [013] (7)
20C1  02                 [014] (7)
20C2  00                 [015] (7)
20C3  00                 [016] (10)
20C4  06                 [017] (10)
20C5  02                 [018] (11)
20C6  00                 [019] (11)
20C7  00                 [020] (11)
20C8  06                 [021] (11)
20C9  02                 [022] (11)
20CA  00                 [023] (11)
20CB  00                 [024] (11)
20CC  06                 [025] (11)
20CD  02                 [026] (11)
20CE  00                 [027] (12)
20CF  00                 [028] (12)
20D0  06                 [029] (12)
20D1  02                 [030] (12)
20D2  00                 [031] (12)
20D3  00                 [032] (13)
20D4  06                 [033] (13)
20D5  02                 [034] (13)
20D6  00                 [035] (13)
20D7  00                 [036] (13)
20D8  07                 [037] (13)
20D9  02                 [038] (13)
20DA  00                 [039] (13)
20DB  00                 [040] (13)
20DC  07                 [041] (13)
20DD  02                 [042] (13)
20DE  00                 [043] (16)
20DF  00                 [044] (16)
20E0  07                 [045] (16)
20E1  02                 [046] (16)
20E2  00                 [047] (16)
20E3  00                 [048] (17)
20E4  07                 [049] (17)
20E5  02                 [050] (20)
20E6  00                 [051] (20)
20E7  00                 [052] (20)
20E8  07                 [053] (20)
20E9  02                 [054] (20)
20EA  00                 [055] (22)
20EB  00                 [056] (22)
20EC  07                 [057] (22)
20ED  02                 [058] (22)
20EE  00                 [059] (22)
20EF  00                 [060] (22)
20F0  0A                 [061] (22)
20F1  02                 [062] (22)
20F2  00                 [063] (22)
20F3  00                 [064] (30)
20F4  0A                 [065] (30)
20F5  02                 [066] (30)
20F6  00                 [067] (30)
20F7  00                 [068] (30)
20F8  0B                 [069] (30)
20F9  02                 [070] (30)
20FA  00                 [071] (30)
20FB  00                 [072] (30)
20FC  0B                 [073] (30)
20FD  02                 [074] (30)
20FE  00                 [075] (30)
20FF  00                 [076] (30)
2100  0B                 [077] (30)
2101  02                 [078] (30)
2102  00                 [079] (30)
2103  00                 [080] (30)
2104  0B                 [081] (30)
2105  02                 [082] (30)
2106  00                 [083] (30)
2107  00                 [084] (31)
2108  0B                 [085] (31)
2109  02                 [086] (31)
210A  00                 [087] (31)
210B  00                 [088] (31)
210C  0B                 [089] (31)
210D  02                 [090] (34)
210E  00                 [091] (34)
210F  00                 [092] (34)
2110  0B                 [093] (34)
2111  02                 [094] (34)
2112  00                 [095] (34)
2113  00                 [096] (34)
2114  0B                 [097] (36)
2115  02                 [098] (36)
2116  00                 [099] (37)
2117  00                 [100] (37)
2118  0B                 [101] (40)
2119  02                 [102] (40)
211A  00                 [103] (40)
211B  00                 [104] (41)
211C  0C                 [105] (41)
211D  02                 [106] (41)
211E  00                 [107] (41)
211F  00                 [108] (41)
2120  0C                 [109] (43)
2121  02                 [110] (43)
2122  00                 [111] (43)
2123  00                 [112] (43)
2124  0C                 [113] (46)
2125  02                 [114] (46)
2126  00                 [115] (46)
2127  00                 [116] (48)
                         * locals:
2284  00                 sizelocvars (0)
                         * upvalues:
2285  00                 sizeupvalues (0)
                         ** end of function **

                         
2286                     ** function [14] definition (level 2)
                         ** start of function **
2286  00                 string size (0)
                         source name: (none)
2288  04                 line defined (562)
2289  C4                 last line defined (580)
228A  04                 nups (0)
228B  00                 numparams (1)
228C  01                 is_vararg (0)
228D  00                 maxstacksize (5)
                         * code:
228F  2B                 sizecode (43)
fail op	35
2290  23004000           [01] close      0  
2294  1A800080           [02] jmp        3            ; to [6]
2298  59400000           [03] loadk      1   1        ; "\\n"
229C  5E000001           [04] return     1   2      
22A0  1A000980           [05] jmp        37           ; to [43]
fail op	35
22A4  23804000           [06] close      0  
22A8  1A800080           [07] jmp        3            ; to [11]
22AC  59C00000           [08] loadk      1   3        ; "\\r"
22B0  5E000001           [09] return     1   2      
22B4  1AC00780           [10] jmp        32           ; to [43]
fail op	35
22B8  23004100           [11] close      0  
22BC  1A800080           [12] jmp        3            ; to [16]
22C0  59400100           [13] loadk      1   5        ; "\\t"
22C4  5E000001           [14] return     1   2      
22C8  1A800680           [15] jmp        27           ; to [43]
fail op	35
22CC  23804100           [16] close      0  
22D0  1A800080           [17] jmp        3            ; to [21]
22D4  59C00100           [18] loadk      1   7        ; "\\b"
22D8  5E000001           [19] return     1   2      
22DC  1A400580           [20] jmp        22           ; to [43]
fail op	35
22E0  23004200           [21] close      0  
22E4  1A800080           [22] jmp        3            ; to [26]
22E8  59400200           [23] loadk      1   9        ; "\\f"
22EC  5E000001           [24] return     1   2      
22F0  1A000480           [25] jmp        17           ; to [43]
fail op	35
22F4  23804200           [26] close      0  
22F8  1A800080           [27] jmp        3            ; to [31]
22FC  59C00200           [28] loadk      1   11       ; "\\\""
2300  5E000001           [29] return     1   2      
2304  1AC00280           [30] jmp        12           ; to [43]
fail op	35
2308  23004300           [31] close      0  
230C  1A800080           [32] jmp        3            ; to [36]
2310  59400300           [33] loadk      1   13       ; "\\\\"
2314  5E000001           [34] return     1   2      
2318  1A800180           [35] jmp        7            ; to [43]
231C  5D800300           [36] getglobal  1   14       ; string
2320  4EC0C300           [37] gettable   1   1   271  ; 1260343128
2324  99000400           [38] loadk      2   16       ; "\\u%04x"
2328  E4404400           [39] self       3   0   273  ; 1886284694
232C  E2000001           [40] call       3   2   0  
2330  47000000           [41] tailcall   1   0   0  
2334  5E000000           [42] return     1   0      
2338  1E008000           [43] return     0   1      
                         * constants:
233C  12                 sizek (18)
233D  04                 const type 4
233E  02                 string size (2)
233F  0A00               "\n\0"
                         const [0]: "\n"
2341  04                 const type 4
2342  03                 string size (3)
2343  5C6E00             "\\n\0"
                         const [1]: "\\n"
2346  04                 const type 4
2347  02                 string size (2)
2348  0D00               "\r\0"
                         const [2]: "\r"
234A  04                 const type 4
234B  03                 string size (3)
234C  5C7200             "\\r\0"
                         const [3]: "\\r"
234F  04                 const type 4
2350  02                 string size (2)
2351  0900               "\t\0"
                         const [4]: "\t"
2353  04                 const type 4
2354  03                 string size (3)
2355  5C7400             "\\t\0"
                         const [5]: "\\t"
2358  04                 const type 4
2359  02                 string size (2)
235A  0800               "\b\0"
                         const [6]: "\b"
235C  04                 const type 4
235D  03                 string size (3)
235E  5C6200             "\\b\0"
                         const [7]: "\\b"
2361  04                 const type 4
2362  02                 string size (2)
2363  0C00               "\f\0"
                         const [8]: "\f"
2365  04                 const type 4
2366  03                 string size (3)
2367  5C6600             "\\f\0"
                         const [9]: "\\f"
236A  04                 const type 4
236B  02                 string size (2)
236C  2200               "\"\0"
                         const [10]: "\""
236E  04                 const type 4
236F  03                 string size (3)
2370  5C2200             "\\\"\0"
                         const [11]: "\\\""
2373  04                 const type 4
2374  02                 string size (2)
2375  5C00               "\\\0"
                         const [12]: "\\"
2377  04                 const type 4
2378  03                 string size (3)
2379  5C5C00             "\\\\\0"
                         const [13]: "\\\\"
237C  04                 const type 4
237D  07                 string size (7)
237E  737472696E6700     "string\0"
                         const [14]: "string"
2385  01                 const type 3
2386  584F1F4B           const [15]: (1260343128)
238A  04                 const type 4
238B  07                 string size (7)
238C  5C752530347800     "\\u%04x\0"
                         const [16]: "\\u%04x"
2393  01                 const type 3
2394  966B6E70           const [17]: (1886284694)
                         * functions:
2398  00                 sizep (0)
                         * lines:
2399  2B                 sizelineinfo (43)
                         [pc] (line)
239A  33                 [01] (51)
239B  02                 [02] (51)
239C  00                 [03] (52)
239D  00                 [04] (52)
239E  33                 [05] (52)
239F  02                 [06] (53)
23A0  00                 [07] (53)
23A1  00                 [08] (54)
23A2  34                 [09] (54)
23A3  02                 [10] (54)
23A4  00                 [11] (55)
23A5  00                 [12] (55)
23A6  34                 [13] (56)
23A7  02                 [14] (56)
23A8  00                 [15] (56)
23A9  00                 [16] (57)
23AA  34                 [17] (57)
23AB  02                 [18] (58)
23AC  00                 [19] (58)
23AD  00                 [20] (58)
23AE  35                 [21] (59)
23AF  02                 [22] (59)
23B0  00                 [23] (60)
23B1  00                 [24] (60)
23B2  35                 [25] (60)
23B3  02                 [26] (61)
23B4  00                 [27] (61)
23B5  00                 [28] (62)
23B6  36                 [29] (62)
23B7  02                 [30] (62)
23B8  00                 [31] (63)
23B9  00                 [32] (63)
23BA  36                 [33] (64)
23BB  02                 [34] (64)
23BC  00                 [35] (64)
23BD  00                 [36] (66)
23BE  36                 [37] (66)
23BF  02                 [38] (66)
23C0  00                 [39] (66)
23C1  00                 [40] (66)
23C2  37                 [41] (66)
23C3  02                 [42] (66)
23C4  00                 [43] (68)
                         * locals:
2446  00                 sizelocvars (0)
                         * upvalues:
2447  00                 sizeupvalues (0)
                         ** end of function **

                         
2448                     ** function [15] definition (level 2)
                         ** start of function **
2448  00                 string size (0)
                         source name: (none)
244A  04                 line defined (590)
244B  D1                 last line defined (593)
244C  04                 nups (2)
244D  02                 numparams (1)
244E  01                 is_vararg (0)
244F  00                 maxstacksize (5)
                         * code:
2451  0A                 sizecode (10)
2452  64004000           [01] self       1   0   256  ; 1664893510
2456  D3000000           [02] getupval   3   0      
245A  13018000           [03] getupval   4   1      
245E  62800002           [04] call       1   4   2  
2462  99400000           [05] loadk      2   1        ; "\""
2466  D2008000           [06] move       3   1      
246A  19410000           [07] loadk      4   1        ; "\""
246E  82000101           [08] concat     2   2   4  
2472  9E000001           [09] return     2   2      
2476  1E008000           [10] return     0   1      
                         * constants:
247A  02                 sizek (2)
247B  01                 const type 3
247C  46423C63           const [0]: (1664893510)
2480  04                 const type 4
2481  02                 string size (2)
2482  2200               "\"\0"
                         const [1]: "\""
                         * functions:
2484  00                 sizep (0)
                         * lines:
2485  0A                 sizelineinfo (10)
                         [pc] (line)
2486  4F                 [01] (79)
2487  02                 [02] (79)
2488  00                 [03] (79)
2489  00                 [04] (79)
248A  4F                 [05] (80)
248B  02                 [06] (80)
248C  00                 [07] (80)
248D  00                 [08] (80)
248E  4F                 [09] (80)
248F  02                 [10] (81)
                         * locals:
24AE  00                 sizelocvars (0)
                         * upvalues:
24AF  00                 sizeupvalues (0)
                         ** end of function **

                         
24B0                     ** function [16] definition (level 2)
                         ** start of function **
24B0  00                 string size (0)
                         source name: (none)
24B2  04                 line defined (595)
24B3  A5                 last line defined (677)
24B4  05                 nups (0)
24B5  00                 numparams (3)
24B6  03                 is_vararg (0)
24B7  00                 maxstacksize (28)
                         * code:
24BA  01                 sizecode (145)
24BB  CB000000           [001] newtable   3   0   0    ; array=0, hash=0
24BF  0B010000           [002] newtable   4   0   0    ; array=0, hash=0
24C3  57010000           [003] loadbool   5   0   0    ; false
24C7  86010003           [004] loadnil    6   6      
24CB  DD010000           [005] getglobal  7   0        ; 248503575
24CF  12028000           [006] move       8   1      
24D3  E2010101           [007] call       7   2   4  
24D7  1A800A80           [008] jmp        43           ; to [52]
24DB  DD420000           [009] getglobal  11  1        ; 1780700712
24DF  12030005           [010] move       12  10     
24E3  E2820001           [011] call       11  2   2  
fail op	35
24E7  2380C005           [012] close      0  
24EB  1A400180           [013] jmp        6            ; to [20]
24EF  DDC20000           [014] getglobal  11  3        ; table
24F3  CE02C105           [015] gettable   11  11  260  ; -431682403
24F7  12038001           [016] move       12  3      
24FB  52030005           [017] move       13  10     
24FF  E2428001           [018] call       11  3   1  
2503  1AC00780           [019] jmp        32           ; to [52]
2507  DD420000           [020] getglobal  11  1        ; 1780700712
250B  12030005           [021] move       12  10     
250F  E2820001           [022] call       11  2   2  
fail op	35
2513  2340C105           [023] close      0  
2517  1A800480           [024] jmp        19           ; to [44]
251B  DDC20000           [025] getglobal  11  3        ; table
251F  CE02C105           [026] gettable   11  11  260  ; -431682403
2523  12030002           [027] move       12  4      
2527  52030005           [028] move       13  10     
252B  E2428001           [029] call       11  3   1  
fail op	33
252F  61804105           [030] tforloop   1       262  ; to [32] if exit
2533  1AC00080           [031] jmp        4            ; to [36]
2537  DDC20100           [032] getglobal  11  7        ; math
253B  CE02C205           [033] gettable   11  11  264  ; "huge"
fail op	33
253F  21808205           [034] tforloop   0       10   ; to [36] if exit
2543  1A400080           [035] jmp        2            ; to [38]
2547  57018000           [036] loadbool   5   1   0    ; true
254B  1A400380           [037] jmp        14           ; to [52]
254F  98010000           [038] test       6       0    ; to [40] if true
2553  1A400080           [039] jmp        2            ; to [42]
fail op	21
2557  15800203           [040] concat     0   6   10 
255B  1A400280           [041] jmp        10           ; to [52]
255F  92010005           [042] move       6   10     
2563  1AC00180           [043] jmp        8            ; to [52]
2567  E4424200           [044] self       11  0   265  ; 930586644
256B  59830200           [045] loadk      13  10       ; "can't encode table with a key of type "
256F  9D430000           [046] getglobal  14  1        ; 1780700712
2573  D2030005           [047] move       15  10     
2577  A2830001           [048] call       14  2   2  
257B  42838306           [049] concat     13  13  14 
257F  92030001           [050] move       14  2      
2583  E2420002           [051] call       11  4   1  
2587  D6410000           [052] tforloop   7       1    ; to [54] if exit
258B  1A80F47F           [053] jmp        -45          ; to [9]
258F  CA028001           [054] len        11  3      
fail op	35
2593  2380C105           [055] close      0  
2597  1A800680           [056] jmp        27           ; to [84]
259B  58410000           [057] test       5       1    ; to [59] if false
259F  1A000680           [058] jmp        25           ; to [84]
25A3  CA020002           [059] len        11  4      
fail op	21
25A7  15C00283           [060] concat     0   262 11 
25AB  1AC00080           [061] jmp        4            ; to [66]
25AF  C6028005           [062] loadnil    11  11     
25B3  12030003           [063] move       12  6      
25B7  DE028001           [064] return     11  3      
25BB  1A400480           [065] jmp        18           ; to [84]
25BF  DDC20200           [066] getglobal  11  11       ; -1615931716
25C3  12038000           [067] move       12  1      
25C7  E2820001           [068] call       11  2   2  
fail op	35
25CB  2300C305           [069] close      0  
25CF  1A800080           [070] jmp        3            ; to [74]
25D3  C6028005           [071] loadnil    11  11     
25D7  DE020001           [072] return     11  2      
25DB  1A400280           [073] jmp        10           ; to [84]
25DF  DDC20200           [074] getglobal  11  11       ; -1615931716
25E3  12038000           [075] move       12  1      
25E7  E2820001           [076] call       11  2   2  
fail op	35
25EB  2340C305           [077] close      0  
25EF  1A800080           [078] jmp        3            ; to [82]
25F3  CB020000           [079] newtable   11  0   0    ; array=0, hash=0
25F7  DE020001           [080] return     11  2      
25FB  1A400080           [081] jmp        2            ; to [84]
25FF  C6028005           [082] loadnil    11  11     
2603  DE020001           [083] return     11  2      
2607  DDC20000           [084] getglobal  11  3        ; table
260B  CE82C305           [085] gettable   11  11  270  ; -1513783280
260F  12038001           [086] move       12  3      
2613  E2420001           [087] call       11  2   1  
2617  C6028005           [088] loadnil    11  11     
261B  0A030002           [089] len        12  4      
fail op	21
261F  15000383           [090] concat     0   262 12 
2623  1A000C80           [091] jmp        49           ; to [141]
2627  1DC30300           [092] getglobal  12  15       ; _G
262B  0E034406           [093] gettable   12  12  272  ; "JSON"
262F  0E434406           [094] gettable   12  12  273  ; "noKeyConversion"
2633  18030000           [095] test       12      0    ; to [97] if true
2637  1AC00080           [096] jmp        4            ; to [101]
263B  24434200           [097] self       12  0   265  ; 930586644
263F  99830400           [098] loadk      14  18       ; "a table with both numeric and string keys could be an object or array; aborting"
2643  D2030001           [099] move       15  2      
2647  22430002           [100] call       12  4   1  
264B  0B030000           [101] newtable   12  0   0    ; array=0, hash=0
264F  D2020006           [102] move       11  12     
2653  1D030000           [103] getglobal  12  0        ; 248503575
2657  52038000           [104] move       13  1      
265B  22030101           [105] call       12  2   4  
265F  1A000080           [106] jmp        1            ; to [108]
2663  CC028407           [107] settable   11  15  16 
2667  16830000           [108] tforloop   12      2    ; to [110] if exit
266B  1A00FF7F           [109] jmp        -3           ; to [107]
266F  5DC40000           [110] getglobal  17  3        ; table
2673  4E84C308           [111] gettable   17  17  270  ; -1513783280
2677  92040002           [112] move       18  4      
267B  62440001           [113] call       17  2   1  
267F  5DC40400           [114] getglobal  17  19       ; 1672515847
2683  92040002           [115] move       18  4      
2687  62040101           [116] call       17  2   4  
268B  1A000580           [117] jmp        21           ; to [139]
268F  9DC50200           [118] getglobal  22  11       ; -1615931716
2693  D205800A           [119] move       23  21     
2697  A2850001           [120] call       22  2   2  
269B  CE858505           [121] gettable   23  11  22 
fail op	35
269F  2300C50B           [122] close      0  
26A3  1AC00180           [123] jmp        8            ; to [132]
26A7  DDC50000           [124] getglobal  23  3        ; table
26AB  CE05C10B           [125] gettable   23  23  260  ; -431682403
26AF  12068001           [126] move       24  3      
26B3  5206000B           [127] move       25  22     
26B7  E2458001           [128] call       23  3   1  
26BB  CE458500           [129] gettable   23  1   21 
26BF  CCC2050B           [130] settable   11  22  23 
26C3  1A800180           [131] jmp        7            ; to [139]
26C7  E4454200           [132] self       23  0   265  ; 930586644
26CB  59460500           [133] loadk      25  21       ; "conflict converting table with mixed-type keys into a JSON object: key "
26CF  9206800A           [134] move       26  21     
26D3  D9860500           [135] loadk      27  22       ; " exists both as a string and a number."
26D7  42C6860C           [136] concat     25  25  27 
26DB  92060001           [137] move       26  2      
26DF  E2450002           [138] call       23  4   1  
26E3  56840000           [139] tforloop   17      2    ; to [141] if exit
26E7  1A00FA7F           [140] jmp        -23          ; to [118]
26EB  D2058001           [141] move       23  3      
26EF  0606000C           [142] loadnil    24  24     
26F3  52068005           [143] move       25  11     
26F7  DE050002           [144] return     23  4      
26FB  1E008000           [145] return     0   1      
                         * constants:
26FF  17                 sizek (23)
2700  01                 const type 3
2701  17DDCF0E           const [0]: (248503575)
2705  01                 const type 3
2706  2856236A           const [1]: (1780700712)
270A  04                 const type 4
270B  07                 string size (7)
270C  737472696E6700     "string\0"
                         const [2]: "string"
2713  04                 const type 4
2714  06                 string size (6)
2715  7461626C6500       "table\0"
                         const [3]: "table"
271B  01                 const type 3
271C  9D0C45E6           const [4]: (-431682403)
2720  04                 const type 4
2721  07                 string size (7)
2722  6E756D62657200     "number\0"
                         const [5]: "number"
2729  03                 const type 3
272A  00000000           const [6]: (0)
272E  04                 const type 4
272F  05                 string size (5)
2730  6D61746800         "math\0"
                         const [7]: "math"
2735  04                 const type 4
2736  05                 string size (5)
2737  6875676500         "huge\0"
                         const [8]: "huge"
273C  01                 const type 3
273D  14A07737           const [9]: (930586644)
2741  04                 const type 4
2742  27                 string size (39)
2743  63616E277420656E+  "can't en"
274B  636F646520746162+  "code tab"
2753  6C65207769746820+  "le with "
275B  61206B6579206F66+  "a key of"
2763  20747970652000     " type \0"
                         const [10]: "can't encode table with a key of type "
276A  01                 const type 3
276B  BCD6AE9F           const [11]: (-1615931716)
276F  04                 const type 4
2770  0B                 string size (11)
2771  4A534F4E20617272+  "JSON arr"
2779  617900             "ay\0"
                         const [12]: "JSON array"
277C  04                 const type 4
277D  0C                 string size (12)
277E  4A534F4E206F626A+  "JSON obj"
2786  65637400           "ect\0"
                         const [13]: "JSON object"
278A  01                 const type 3
278B  1080C5A5           const [14]: (-1513783280)
278F  04                 const type 4
2790  03                 string size (3)
2791  5F4700             "_G\0"
                         const [15]: "_G"
2794  04                 const type 4
2795  05                 string size (5)
2796  4A534F4E00         "JSON\0"
                         const [16]: "JSON"
279B  04                 const type 4
279C  10                 string size (16)
279D  6E6F4B6579436F6E+  "noKeyCon"
27A5  76657273696F6E00   "version\0"
                         const [17]: "noKeyConversion"
27AD  04                 const type 4
27AE  50                 string size (80)
27AF  61207461626C6520+  "a table "
27B7  7769746820626F74+  "with bot"
27BF  68206E756D657269+  "h numeri"
27C7  6320616E64207374+  "c and st"
27CF  72696E67206B6579+  "ring key"
27D7  7320636F756C6420+  "s could "
27DF  626520616E206F62+  "be an ob"
27E7  6A656374206F7220+  "ject or "
27EF  61727261793B2061+  "array; a"
27F7  626F7274696E6700   "borting\0"
                         const [18]: "a table with both numeric and string keys could be an object or array; aborting"
27FF  01                 const type 3
2800  0791B063           const [19]: (1672515847)
2804  00                 const type 0
                         const [20]: nil
2805  04                 const type 4
2806  48                 string size (72)
2807  636F6E666C696374+  "conflict"
280F  20636F6E76657274+  " convert"
2817  696E67207461626C+  "ing tabl"
281F  652077697468206D+  "e with m"
2827  697865642D747970+  "ixed-typ"
282F  65206B6579732069+  "e keys i"
2837  6E746F2061204A53+  "nto a JS"
283F  4F4E206F626A6563+  "ON objec"
2847  743A206B65792000   "t: key \0"
                         const [21]: "conflict converting table with mixed-type keys into a JSON object: key "
284F  04                 const type 4
2850  27                 string size (39)
2851  2065786973747320+  " exists "
2859  626F746820617320+  "both as "
2861  6120737472696E67+  "a string"
2869  20616E642061206E+  " and a n"
2871  756D6265722E00     "umber.\0"
                         const [22]: " exists both as a string and a number."
                         * functions:
2878  00                 sizep (0)
                         * lines:
287A  01                 sizelineinfo (145)
                         [pc] (line)
287B  5B                 [001] (91)
287C  02                 [002] (92)
287D  00                 [003] (93)
287E  00                 [004] (94)
287F  5C                 [005] (96)
2880  02                 [006] (96)
2881  00                 [007] (96)
2882  00                 [008] (96)
2883  5D                 [009] (97)
2884  02                 [010] (97)
2885  00                 [011] (97)
2886  00                 [012] (97)
2887  5E                 [013] (97)
2888  02                 [014] (98)
2889  00                 [015] (98)
288A  00                 [016] (98)
288B  60                 [017] (98)
288C  02                 [018] (98)
288D  00                 [019] (98)
288E  00                 [020] (99)
288F  60                 [021] (99)
2890  02                 [022] (99)
2891  00                 [023] (99)
2892  00                 [024] (99)
2893  60                 [025] (100)
2894  02                 [026] (100)
2895  00                 [027] (100)
2896  00                 [028] (100)
2897  60                 [029] (100)
2898  02                 [030] (101)
2899  00                 [031] (101)
289A  00                 [032] (101)
289B  61                 [033] (101)
289C  02                 [034] (101)
289D  00                 [035] (101)
289E  00                 [036] (102)
289F  61                 [037] (102)
28A0  02                 [038] (103)
28A1  00                 [039] (103)
28A2  00                 [040] (103)
28A3  61                 [041] (103)
28A4  02                 [042] (104)
28A5  00                 [043] (105)
28A6  00                 [044] (107)
28A7  61                 [045] (107)
28A8  02                 [046] (107)
28A9  00                 [047] (107)
28AA  00                 [048] (107)
28AB  61                 [049] (107)
28AC  02                 [050] (107)
28AD  00                 [051] (107)
28AE  00                 [052] (96)
28AF  62                 [053] (108)
28B0  02                 [054] (111)
28B1  00                 [055] (111)
28B2  00                 [056] (111)
28B3  62                 [057] (111)
28B4  02                 [058] (111)
28B5  00                 [059] (115)
28B6  00                 [060] (115)
28B7  62                 [061] (115)
28B8  02                 [062] (116)
28B9  00                 [063] (116)
28BA  00                 [064] (116)
28BB  62                 [065] (116)
28BC  02                 [066] (117)
28BD  00                 [067] (117)
28BE  00                 [068] (117)
28BF  62                 [069] (117)
28C0  02                 [070] (117)
28C1  00                 [071] (118)
28C2  00                 [072] (118)
28C3  62                 [073] (118)
28C4  02                 [074] (119)
28C5  00                 [075] (119)
28C6  00                 [076] (119)
28C7  63                 [077] (119)
28C8  02                 [078] (119)
28C9  00                 [079] (120)
28CA  00                 [080] (120)
28CB  63                 [081] (120)
28CC  02                 [082] (123)
28CD  00                 [083] (123)
28CE  00                 [084] (127)
28CF  63                 [085] (127)
28D0  02                 [086] (127)
28D1  00                 [087] (127)
28D2  00                 [088] (-127)
28D3  63                 [089] (-126)
28D4  02                 [090] (-126)
28D5  00                 [091] (-126)
28D6  00                 [092] (-120)
28D7  63                 [093] (-120)
28D8  02                 [094] (-120)
28D9  00                 [095] (-120)
28DA  00                 [096] (-120)
28DB  64                 [097] (-119)
28DC  02                 [098] (-119)
28DD  00                 [099] (-119)
28DE  00                 [100] (-119)
28DF  64                 [101] (-113)
28E0  02                 [102] (-113)
28E1  00                 [103] (-112)
28E2  00                 [104] (-112)
28E3  64                 [105] (-112)
28E4  02                 [106] (-112)
28E5  00                 [107] (-111)
28E6  00                 [108] (-112)
28E7  64                 [109] (-111)
28E8  02                 [110] (-108)
28E9  00                 [111] (-108)
28EA  00                 [112] (-108)
28EB  64                 [113] (-108)
28EC  02                 [114] (-103)
28ED  00                 [115] (-103)
28EE  00                 [116] (-103)
28EF  65                 [117] (-103)
28F0  02                 [118] (-102)
28F1  00                 [119] (-102)
28F2  00                 [120] (-102)
28F3  65                 [121] (-101)
28F4  02                 [122] (-101)
28F5  00                 [123] (-101)
28F6  00                 [124] (-100)
28F7  65                 [125] (-100)
28F8  02                 [126] (-100)
28F9  00                 [127] (-100)
28FA  00                 [128] (-100)
28FB  65                 [129] (-99)
28FC  02                 [130] (-99)
28FD  00                 [131] (-99)
28FE  00                 [132] (-97)
28FF  65                 [133] (-97)
2900  02                 [134] (-97)
2901  00                 [135] (-97)
2902  00                 [136] (-97)
2903  65                 [137] (-97)
2904  02                 [138] (-97)
2905  00                 [139] (-103)
2906  00                 [140] (-96)
2907  66                 [141] (-92)
2908  02                 [142] (-92)
2909  00                 [143] (-92)
290A  00                 [144] (-92)
290B  66                 [145] (-91)
                         * locals:
2ABF  00                 sizelocvars (0)
                         * upvalues:
2AC0  00                 sizeupvalues (0)
                         ** end of function **

                         
2AC1                     ** function [17] definition (level 2)
                         ** start of function **
2AC1  00                 string size (0)
                         source name: (none)
2AC3  05                 line defined (683)
2AC4  A0                 last line defined (800)
2AC5  06                 nups (3)
2AC6  03                 numparams (5)
2AC7  05                 is_vararg (0)
2AC8  00                 maxstacksize (48)
                         * code:
2ACB  02                 sizecode (266)
fail op	35
2ACC  2300C000           [001] close      0  
2AD0  1A800080           [002] jmp        3            ; to [6]
2AD4  59410000           [003] loadk      5   1        ; "null"
2AD8  5E010001           [004] return     5   2      
2ADC  1AC04080           [005] jmp        260          ; to [266]
2AE0  5D810000           [006] getglobal  5   2        ; 1780700712
2AE4  92018000           [007] move       6   1      
2AE8  62810001           [008] call       5   2   2  
fail op	35
2AEC  23C0C002           [009] close      0  
2AF0  1A000180           [010] jmp        5            ; to [16]
2AF4  53010000           [011] getupval   5   0      
2AF8  92018000           [012] move       6   1      
2AFC  47010001           [013] tailcall   5   2   0  
2B00  5E010000           [014] return     5   0      
2B04  1A403E80           [015] jmp        250          ; to [266]
2B08  5D810000           [016] getglobal  5   2        ; 1780700712
2B0C  92018000           [017] move       6   1      
2B10  62810001           [018] call       5   2   2  
fail op	35
2B14  2300C102           [019] close      0  
2B18  1A000680           [020] jmp        25           ; to [46]
fail op	35
2B1C  63408000           [021] close      1  
2B20  1A800080           [022] jmp        3            ; to [26]
2B24  59410000           [023] loadk      5   1        ; "null"
2B28  5E010001           [024] return     5   2      
2B2C  1AC03B80           [025] jmp        240          ; to [266]
2B30  5D410100           [026] getglobal  5   5        ; math
2B34  4E81C102           [027] gettable   5   5   262  ; "huge"
fail op	33
2B38  21408002           [028] tforloop   0       1    ; to [30] if exit
2B3C  1A800080           [029] jmp        3            ; to [33]
2B40  59C10100           [030] loadk      5   7        ; "1e+9999"
2B44  5E010001           [031] return     5   2      
2B48  1A003A80           [032] jmp        233          ; to [266]
2B4C  5D410100           [033] getglobal  5   5        ; math
2B50  4E81C102           [034] gettable   5   5   262  ; "huge"
fail op	0
2B54  40018002           [035] move       5   5      
fail op	33
2B58  21408100           [036] tforloop   0       5    ; to [38] if exit
2B5C  1A800080           [037] jmp        3            ; to [41]
2B60  59010200           [038] loadk      5   8        ; "-1e+9999"
2B64  5E010001           [039] return     5   2      
2B68  1A003880           [040] jmp        225          ; to [266]
2B6C  5D410200           [041] getglobal  5   9        ; -1615931716
2B70  92018000           [042] move       6   1      
2B74  47010001           [043] tailcall   5   2   0  
2B78  5E010000           [044] return     5   0      
2B7C  1AC03680           [045] jmp        220          ; to [266]
2B80  5D810000           [046] getglobal  5   2        ; 1780700712
2B84  92018000           [047] move       6   1      
2B88  62810001           [048] call       5   2   2  
fail op	35
2B8C  2380C202           [049] close      0  
2B90  1A000180           [050] jmp        5            ; to [56]
2B94  5D410200           [051] getglobal  5   9        ; -1615931716
2B98  92018000           [052] move       6   1      
2B9C  47010001           [053] tailcall   5   2   0  
2BA0  5E010000           [054] return     5   0      
2BA4  1A403480           [055] jmp        210          ; to [266]
2BA8  5D810000           [056] getglobal  5   2        ; 1780700712
2BAC  92018000           [057] move       6   1      
2BB0  62810001           [058] call       5   2   2  
fail op	35
2BB4  63C0C202           [059] close      1  
2BB8  1A400280           [060] jmp        10           ; to [71]
2BBC  64014300           [061] self       5   0   268  ; 930586644
2BC0  D9410300           [062] loadk      7   13       ; "can't convert "
2BC4  1D820000           [063] getglobal  8   2        ; 1780700712
2BC8  52028000           [064] move       9   1      
2BCC  22820001           [065] call       8   2   2  
2BD0  59820300           [066] loadk      9   14       ; " to JSON"
2BD4  C2418203           [067] concat     7   7   9  
2BD8  12028001           [068] move       8   3      
2BDC  62410002           [069] call       5   4   1  
2BE0  1A803080           [070] jmp        195          ; to [266]
2BE4  52018000           [071] move       5   1      
2BE8  8E410101           [072] gettable   6   2   5  
2BEC  98010000           [073] test       6       0    ; to [75] if true
2BF0  1A400280           [074] jmp        10           ; to [85]
2BF4  A4014300           [075] self       6   0   268  ; 930586644
2BF8  19C20300           [076] loadk      8   15       ; "table "
2BFC  5D420200           [077] getglobal  9   9        ; -1615931716
2C00  92028002           [078] move       10  5      
2C04  62820001           [079] call       9   2   2  
2C08  99020400           [080] loadk      10  16       ; " is a child of itself"
2C0C  02820204           [081] concat     8   8   10 
2C10  52028001           [082] move       9   3      
2C14  A2410002           [083] call       6   4   1  
2C18  1A000080           [084] jmp        1            ; to [86]
2C1C  8C40C402           [085] settable   2   5   273  ; 1
2C20  86010003           [086] loadnil    6   6      
2C24  D3018000           [087] getupval   7   1      
2C28  12020000           [088] move       8   0      
2C2C  52028002           [089] move       9   5      
2C30  92028001           [090] move       10  3      
2C34  E2010102           [091] call       7   4   4  
2C38  18020000           [092] test       8       0    ; to [94] if true
2C3C  1A000980           [093] jmp        37           ; to [131]
2C40  8B020000           [094] newtable   10  0   0    ; array=0, hash=0
2C44  D9820400           [095] loadk      11  18       ; 0
2C48  12030004           [096] move       12  8      
2C4C  59830400           [097] loadk      13  18       ; 0
2C50  D0820280           [098] forprep    11  11       ; to [110]
2C54  DDC30200           [099] getglobal  15  11       ; table
2C58  CEC3C407           [100] gettable   15  15  275  ; -431682403
2C5C  12040005           [101] move       16  10     
2C60  53040001           [102] getupval   17  2      
2C64  92040000           [103] move       18  0      
2C68  CE848302           [104] gettable   19  5   14 
2C6C  12050001           [105] move       20  2      
2C70  52058001           [106] move       21  3      
2C74  92050002           [107] move       22  4      
2C78  62040003           [108] call       17  6   0  
2C7C  E2430000           [109] call       15  0   1  
2C80  D4C2FC7F           [110] forloop    11  -12      ; to [99] if loop
2C84  18010000           [111] test       4       0    ; to [113] if true
2C88  1A000280           [112] jmp        9            ; to [122]
2C8C  D9030500           [113] loadk      15  20       ; "[ "
2C90  1DC40200           [114] getglobal  16  11       ; table
2C94  0E444508           [115] gettable   16  16  277  ; 495070862
2C98  52040005           [116] move       17  10     
2C9C  99840500           [117] loadk      18  22       ; ", "
2CA0  22848001           [118] call       16  3   2  
2CA4  59C40500           [119] loadk      17  23       ; " ]"
2CA8  82418407           [120] concat     6   15  17 
2CAC  1A402380           [121] jmp        142          ; to [264]
2CB0  D9030600           [122] loadk      15  24       ; "["
2CB4  1DC40200           [123] getglobal  16  11       ; table
2CB8  0E444508           [124] gettable   16  16  277  ; 495070862
2CBC  52040005           [125] move       17  10     
2CC0  99440600           [126] loadk      18  25       ; ","
2CC4  22848001           [127] call       16  3   2  
2CC8  59840600           [128] loadk      17  26       ; "]"
2CCC  82418407           [129] concat     6   15  17 
2CD0  1A002180           [130] jmp        133          ; to [264]
2CD4  D8010000           [131] test       7       0    ; to [133] if true
2CD8  1A402080           [132] jmp        130          ; to [263]
fail op	5
2CDC  C5438004           [133] getglobal  15  4609     ; nil
2CE0  1A000080           [134] jmp        1            ; to [136]
2CE4  D2038002           [135] move       15  5      
2CE8  18010000           [136] test       4       0    ; to [138] if true
2CEC  1A801480           [137] jmp        83           ; to [221]
2CF0  0B040000           [138] newtable   16  0   0    ; array=0, hash=0
2CF4  59C40600           [139] loadk      17  27       ; 0
2CF8  9D040700           [140] getglobal  18  28       ; 1672515847
2CFC  D2048003           [141] move       19  7      
2D00  A2040101           [142] call       18  2   4  
2D04  1AC00480           [143] jmp        20           ; to [164]
2D08  D3050001           [144] getupval   23  2      
2D0C  12060000           [145] move       24  0      
2D10  5D460200           [146] getglobal  25  9        ; -1615931716
2D14  9206000B           [147] move       26  22     
2D18  62860001           [148] call       25  2   2  
2D1C  92060001           [149] move       26  2      
2D20  D2068001           [150] move       27  3      
2D24  19470700           [151] loadk      28  29       ; ""
2D28  E2850003           [152] call       23  6   2  
2D2C  1D460100           [153] getglobal  24  5        ; math
2D30  0E86470C           [154] gettable   24  24  286  ; -1962864584
2D34  52068008           [155] move       25  17     
2D38  8A06800B           [156] len        26  23     
2D3C  22868001           [157] call       24  3   2  
2D40  5204000C           [158] move       17  24     
2D44  1DC60200           [159] getglobal  24  11       ; table
2D48  0EC6440C           [160] gettable   24  24  275  ; -431682403
2D4C  52060008           [161] move       25  16     
2D50  9206800B           [162] move       26  23     
2D54  22468001           [163] call       24  3   1  
2D58  96840000           [164] tforloop   18      2    ; to [166] if exit
2D5C  1A40FA7F           [165] jmp        -22          ; to [144]
2D60  12060002           [166] move       24  4      
2D64  59C60700           [167] loadk      25  31       ; "    "
2D68  0246060C           [168] concat     24  24  25 
2D6C  52060002           [169] move       25  4      
2D70  9DC60000           [170] getglobal  26  3        ; string
2D74  8E06480D           [171] gettable   26  26  288  ; -1734920466
2D78  D9460800           [172] loadk      27  33       ; " "
2D7C  0387C808           [173] add        28  17  290  ; 0
2D80  03C7480E           [174] add        28  28  291  ; 0
2D84  A2868001           [175] call       26  3   2  
2D88  4286860C           [176] concat     25  25  26 
2D8C  99060900           [177] loadk      26  36       ; "%s%"
2D90  DDC60000           [178] getglobal  27  3        ; string
2D94  CE46C90D           [179] gettable   27  27  293  ; 1260343128
2D98  19870900           [180] loadk      28  38       ; "%d"
2D9C  52078008           [181] move       29  17     
2DA0  E2868001           [182] call       27  3   2  
2DA4  19C70900           [183] loadk      28  39       ; "s: %s"
2DA8  8206070D           [184] concat     26  26  28 
2DAC  CB060000           [185] newtable   27  0   0    ; array=0, hash=0
2DB0  1D070700           [186] getglobal  28  28       ; 1672515847
2DB4  52078003           [187] move       29  7      
2DB8  22070101           [188] call       28  2   4  
2DBC  1A400480           [189] jmp        18           ; to [208]
2DC0  53080001           [190] getupval   33  2      
2DC4  92080000           [191] move       34  0      
2DC8  CE088807           [192] gettable   35  15  32 
2DCC  12090001           [193] move       36  2      
2DD0  52098001           [194] move       37  3      
2DD4  9209800C           [195] move       38  25     
2DD8  62880003           [196] call       33  6   2  
2DDC  9DC80200           [197] getglobal  34  11       ; table
2DE0  8EC84411           [198] gettable   34  34  275  ; -431682403
2DE4  D208800D           [199] move       35  27     
2DE8  1DC90000           [200] getglobal  36  3        ; string
2DEC  0E494912           [201] gettable   36  36  293  ; 1260343128
2DF0  5209000D           [202] move       37  26     
2DF4  9209000C           [203] move       38  24     
2DF8  CEC90708           [204] gettable   39  16  31 
2DFC  120A8010           [205] move       40  33     
2E00  22098002           [206] call       36  5   0  
2E04  A2480000           [207] call       34  0   1  
2E08  16870000           [208] tforloop   28      2    ; to [210] if exit
2E0C  1AC0FA7F           [209] jmp        -20          ; to [190]
2E10  99080A00           [210] loadk      34  40       ; "{\n"
2E14  DDC80200           [211] getglobal  35  11       ; table
2E18  CE48C511           [212] gettable   35  35  277  ; 495070862
2E1C  1209800D           [213] move       36  27     
2E20  59490A00           [214] loadk      37  41       ; ",\n"
2E24  E2888001           [215] call       35  3   2  
2E28  19890A00           [216] loadk      36  42       ; "\n"
2E2C  52090002           [217] move       37  4      
2E30  99C90A00           [218] loadk      38  43       ; "}"
2E34  82810911           [219] concat     6   34  38 
2E38  1A800A80           [220] jmp        43           ; to [264]
2E3C  8B080000           [221] newtable   34  0   0    ; array=0, hash=0
2E40  DD080700           [222] getglobal  35  28       ; 1672515847
2E44  12098003           [223] move       36  7      
2E48  E2080101           [224] call       35  2   4  
2E4C  1A400680           [225] jmp        26           ; to [252]
2E50  130A0001           [226] getupval   40  2      
2E54  520A0000           [227] move       41  0      
2E58  8ECA8907           [228] gettable   42  15  39 
2E5C  D20A0001           [229] move       43  2      
2E60  120B8001           [230] move       44  3      
2E64  520B0002           [231] move       45  4      
2E68  228A0003           [232] call       40  6   2  
2E6C  530A0001           [233] getupval   41  2      
2E70  920A0000           [234] move       42  0      
2E74  DD4A0200           [235] getglobal  43  9        ; -1615931716
2E78  120B8013           [236] move       44  39     
2E7C  E28A0001           [237] call       43  2   2  
2E80  120B0001           [238] move       44  2      
2E84  520B8001           [239] move       45  3      
2E88  920B0002           [240] move       46  4      
2E8C  628A0003           [241] call       41  6   2  
2E90  9DCA0200           [242] getglobal  42  11       ; table
2E94  8ECA4415           [243] gettable   42  42  275  ; -431682403
2E98  D20A0011           [244] move       43  34     
2E9C  1DCB0000           [245] getglobal  44  3        ; string
2EA0  0E4B4916           [246] gettable   44  44  293  ; 1260343128
2EA4  590B0B00           [247] loadk      45  44       ; "%s:%s"
2EA8  920B8014           [248] move       46  41     
2EAC  D20B0014           [249] move       47  40     
2EB0  220B0002           [250] call       44  4   0  
2EB4  A24A0000           [251] call       42  0   1  
2EB8  D6880000           [252] tforloop   35      2    ; to [254] if exit
2EBC  1AC0F87F           [253] jmp        -28          ; to [226]
2EC0  994A0B00           [254] loadk      42  45       ; "{"
2EC4  DDCA0200           [255] getglobal  43  11       ; table
2EC8  CE4AC515           [256] gettable   43  43  277  ; 495070862
2ECC  120B0011           [257] move       44  34     
2ED0  594B0600           [258] loadk      45  25       ; ","
2ED4  E28A8001           [259] call       43  3   2  
2ED8  19CB0A00           [260] loadk      44  43       ; "}"
2EDC  82010B15           [261] concat     6   42  44 
2EE0  1A000080           [262] jmp        1            ; to [264]
2EE4  99810B00           [263] loadk      6   46       ; "[]"
2EE8  8CC0CB02           [264] settable   2   5   303  ; 0
2EEC  9E010001           [265] return     6   2      
2EF0  1E008000           [266] return     0   1      
                         * constants:
2EF4  30                 sizek (48)
2EF5  00                 const type 0
                         const [0]: nil
2EF6  04                 const type 4
2EF7  05                 string size (5)
2EF8  6E756C6C00         "null\0"
                         const [1]: "null"
2EFD  01                 const type 3
2EFE  2856236A           const [2]: (1780700712)
2F02  04                 const type 4
2F03  07                 string size (7)
2F04  737472696E6700     "string\0"
                         const [3]: "string"
2F0B  04                 const type 4
2F0C  07                 string size (7)
2F0D  6E756D62657200     "number\0"
                         const [4]: "number"
2F14  04                 const type 4
2F15  05                 string size (5)
2F16  6D61746800         "math\0"
                         const [5]: "math"
2F1B  04                 const type 4
2F1C  05                 string size (5)
2F1D  6875676500         "huge\0"
                         const [6]: "huge"
2F22  04                 const type 4
2F23  08                 string size (8)
2F24  31652B3939393900   "1e+9999\0"
                         const [7]: "1e+9999"
2F2C  04                 const type 4
2F2D  09                 string size (9)
2F2E  2D31652B39393939+  "-1e+9999"
2F36  00                 "\0"
                         const [8]: "-1e+9999"
2F37  01                 const type 3
2F38  BCD6AE9F           const [9]: (-1615931716)
2F3C  04                 const type 4
2F3D  08                 string size (8)
2F3E  626F6F6C65616E00   "boolean\0"
                         const [10]: "boolean"
2F46  04                 const type 4
2F47  06                 string size (6)
2F48  7461626C6500       "table\0"
                         const [11]: "table"
2F4E  01                 const type 3
2F4F  14A07737           const [12]: (930586644)
2F53  04                 const type 4
2F54  0F                 string size (15)
2F55  63616E277420636F+  "can't co"
2F5D  6E766572742000     "nvert \0"
                         const [13]: "can't convert "
2F64  04                 const type 4
2F65  09                 string size (9)
2F66  20746F204A534F4E+  " to JSON"
2F6E  00                 "\0"
                         const [14]: " to JSON"
2F6F  04                 const type 4
2F70  07                 string size (7)
2F71  7461626C652000     "table \0"
                         const [15]: "table "
2F78  04                 const type 4
2F79  16                 string size (22)
2F7A  2069732061206368+  " is a ch"
2F82  696C64206F662069+  "ild of i"
2F8A  7473656C6600       "tself\0"
                         const [16]: " is a child of itself"
2F90  01                 const type 3
2F91  01000000           const [17]: (1)
2F95  03                 const type 3
2F96  0000803F           const [18]: (0)
2F9A  01                 const type 3
2F9B  9D0C45E6           const [19]: (-431682403)
2F9F  04                 const type 4
2FA0  03                 string size (3)
2FA1  5B2000             "[ \0"
                         const [20]: "[ "
2FA4  01                 const type 3
2FA5  8E2E821D           const [21]: (495070862)
2FA9  04                 const type 4
2FAA  03                 string size (3)
2FAB  2C2000             ", \0"
                         const [22]: ", "
2FAE  04                 const type 4
2FAF  03                 string size (3)
2FB0  205D00             " ]\0"
                         const [23]: " ]"
2FB3  04                 const type 4
2FB4  02                 string size (2)
2FB5  5B00               "[\0"
                         const [24]: "["
2FB7  04                 const type 4
2FB8  02                 string size (2)
2FB9  2C00               ",\0"
                         const [25]: ","
2FBB  04                 const type 4
2FBC  02                 string size (2)
2FBD  5D00               "]\0"
                         const [26]: "]"
2FBF  03                 const type 3
2FC0  00000000           const [27]: (0)
2FC4  01                 const type 3
2FC5  0791B063           const [28]: (1672515847)
2FC9  04                 const type 4
2FCA  01                 string size (0)
                         const [29]: ""
2FCC  01                 const type 3
2FCD  3810018B           const [30]: (-1962864584)
2FD1  04                 const type 4
2FD2  05                 string size (5)
2FD3  2020202000         "    \0"
                         const [31]: "    "
2FD8  01                 const type 3
2FD9  EE369798           const [32]: (-1734920466)
2FDD  04                 const type 4
2FDE  02                 string size (2)
2FDF  2000               " \0"
                         const [33]: " "
2FE1  03                 const type 3
2FE2  00000040           const [34]: (0)
2FE6  03                 const type 3
2FE7  00008040           const [35]: (0)
2FEB  04                 const type 4
2FEC  04                 string size (4)
2FED  25732500           "%s%\0"
                         const [36]: "%s%"
2FF1  01                 const type 3
2FF2  584F1F4B           const [37]: (1260343128)
2FF6  04                 const type 4
2FF7  03                 string size (3)
2FF8  256400             "%d\0"
                         const [38]: "%d"
2FFB  04                 const type 4
2FFC  06                 string size (6)
2FFD  733A20257300       "s: %s\0"
                         const [39]: "s: %s"
3003  04                 const type 4
3004  03                 string size (3)
3005  7B0A00             "{\n\0"
                         const [40]: "{\n"
3008  04                 const type 4
3009  03                 string size (3)
300A  2C0A00             ",\n\0"
                         const [41]: ",\n"
300D  04                 const type 4
300E  02                 string size (2)
300F  0A00               "\n\0"
                         const [42]: "\n"
3011  04                 const type 4
3012  02                 string size (2)
3013  7D00               "}\0"
                         const [43]: "}"
3015  04                 const type 4
3016  06                 string size (6)
3017  25733A257300       "%s:%s\0"
                         const [44]: "%s:%s"
301D  04                 const type 4
301E  02                 string size (2)
301F  7B00               "{\0"
                         const [45]: "{"
3021  04                 const type 4
3022  03                 string size (3)
3023  5B5D00             "[]\0"
                         const [46]: "[]"
3026  01                 const type 3
3027  00000000           const [47]: (0)
                         * functions:
302B  00                 sizep (0)
                         * lines:
302D  02                 sizelineinfo (266)
                         [pc] (line)
302E  AD                 [001] (-83)
302F  02                 [002] (-83)
3030  00                 [003] (-82)
3031  00                 [004] (-82)
3032  AD                 [005] (-82)
3033  02                 [006] (-80)
3034  00                 [007] (-80)
3035  00                 [008] (-80)
3036  AE                 [009] (-80)
3037  02                 [010] (-80)
3038  00                 [011] (-79)
3039  00                 [012] (-79)
303A  AE                 [013] (-79)
303B  02                 [014] (-79)
303C  00                 [015] (-79)
303D  00                 [016] (-77)
303E  AE                 [017] (-77)
303F  02                 [018] (-77)
3040  00                 [019] (-77)
3041  00                 [020] (-77)
3042  B0                 [021] (-76)
3043  02                 [022] (-76)
3044  00                 [023] (-71)
3045  00                 [024] (-71)
3046  B0                 [025] (-71)
3047  02                 [026] (-70)
3048  00                 [027] (-70)
3049  00                 [028] (-70)
304A  B0                 [029] (-70)
304B  02                 [030] (-62)
304C  00                 [031] (-62)
304D  00                 [032] (-62)
304E  B0                 [033] (-61)
304F  02                 [034] (-61)
3050  00                 [035] (-61)
3051  00                 [036] (-61)
3052  B0                 [037] (-61)
3053  02                 [038] (-56)
3054  00                 [039] (-56)
3055  00                 [040] (-56)
3056  B1                 [041] (-54)
3057  02                 [042] (-54)
3058  00                 [043] (-54)
3059  00                 [044] (-54)
305A  B1                 [045] (-53)
305B  02                 [046] (-51)
305C  00                 [047] (-51)
305D  00                 [048] (-51)
305E  B1                 [049] (-51)
305F  02                 [050] (-51)
3060  00                 [051] (-50)
3061  00                 [052] (-50)
3062  B1                 [053] (-50)
3063  02                 [054] (-50)
3064  00                 [055] (-50)
3065  00                 [056] (-48)
3066  B1                 [057] (-48)
3067  02                 [058] (-48)
3068  00                 [059] (-48)
3069  00                 [060] (-48)
306A  B3                 [061] (-47)
306B  02                 [062] (-47)
306C  00                 [063] (-47)
306D  00                 [064] (-47)
306E  B3                 [065] (-47)
306F  02                 [066] (-47)
3070  00                 [067] (-47)
3071  00                 [068] (-47)
3072  B3                 [069] (-47)
3073  02                 [070] (-47)
3074  00                 [071] (-41)
3075  00                 [072] (-39)
3076  B3                 [073] (-39)
3077  02                 [074] (-39)
3078  00                 [075] (-38)
3079  00                 [076] (-38)
307A  B3                 [077] (-38)
307B  02                 [078] (-38)
307C  00                 [079] (-38)
307D  00                 [080] (-38)
307E  B4                 [081] (-38)
307F  02                 [082] (-38)
3080  00                 [083] (-38)
3081  00                 [084] (-38)
3082  B4                 [085] (-36)
3083  02                 [086] (-33)
3084  00                 [087] (-31)
3085  00                 [088] (-31)
3086  B9                 [089] (-31)
3087  02                 [090] (-31)
3088  00                 [091] (-31)
3089  00                 [092] (-30)
308A  B9                 [093] (-30)
308B  02                 [094] (-26)
308C  00                 [095] (-25)
308D  00                 [096] (-25)
308E  B9                 [097] (-25)
308F  02                 [098] (-25)
3090  00                 [099] (-24)
3091  00                 [100] (-24)
3092  BA                 [101] (-24)
3093  02                 [102] (-24)
3094  00                 [103] (-24)
3095  00                 [104] (-24)
3096  BA                 [105] (-24)
3097  02                 [106] (-24)
3098  00                 [107] (-24)
3099  00                 [108] (-24)
309A  BA                 [109] (-24)
309B  02                 [110] (-25)
309C  00                 [111] (-21)
309D  00                 [112] (-21)
309E  BA                 [113] (-20)
309F  02                 [114] (-20)
30A0  00                 [115] (-20)
30A1  00                 [116] (-20)
30A2  C2                 [117] (-20)
30A3  02                 [118] (-20)
30A4  00                 [119] (-20)
30A5  00                 [120] (-20)
30A6  C2                 [121] (-20)
30A7  02                 [122] (-18)
30A8  00                 [123] (-18)
30A9  00                 [124] (-18)
30AA  C2                 [125] (-18)
30AB  02                 [126] (-18)
30AC  00                 [127] (-18)
30AD  00                 [128] (-18)
30AE  C3                 [129] (-18)
30AF  02                 [130] (-17)
30B0  00                 [131] (-15)
30B1  00                 [132] (-15)
30B2  C3                 [133] (-11)
30B3  02                 [134] (-11)
30B4  00                 [135] (-11)
30B5  00                 [136] (-9)
30B6  C3                 [137] (-9)
30B7  02                 [138] (-7)
30B8  00                 [139] (-6)
30B9  00                 [140] (-5)
30BA  C3                 [141] (-5)
30BB  02                 [142] (-5)
30BC  00                 [143] (-5)
30BD  00                 [144] (-4)
30BE  C3                 [145] (-4)
30BF  02                 [146] (-4)
30C0  00                 [147] (-4)
30C1  00                 [148] (-4)
30C2  C8                 [149] (-4)
30C3  02                 [150] (-4)
30C4  00                 [151] (-4)
30C5  00                 [152] (-4)
30C6  C8                 [153] (-3)
30C7  02                 [154] (-3)
30C8  00                 [155] (-3)
30C9  00                 [156] (-3)
30CA  C8                 [157] (-3)
30CB  02                 [158] (-3)
30CC  00                 [159] (-2)
30CD  00                 [160] (-2)
30CE  CA                 [161] (-2)
30CF  02                 [162] (-2)
30D0  00                 [163] (-2)
30D1  00                 [164] (-5)
30D2  CA                 [165] (-2)
30D3  02                 [166] (0)
30D4  00                 [167] (0)
30D5  00                 [168] (0)
30D6  CA                 [169] (1)
30D7  02                 [170] (1)
30D8  00                 [171] (1)
30D9  00                 [172] (1)
30DA  CA                 [173] (1)
30DB  02                 [174] (1)
30DC  00                 [175] (1)
30DD  00                 [176] (1)
30DE  CB                 [177] (2)
30DF  02                 [178] (2)
30E0  00                 [179] (2)
30E1  00                 [180] (2)
30E2  CD                 [181] (2)
30E3  02                 [182] (2)
30E4  00                 [183] (2)
30E5  00                 [184] (2)
30E6  CD                 [185] (4)
30E7  02                 [186] (5)
30E8  00                 [187] (5)
30E9  00                 [188] (5)
30EA  CD                 [189] (5)
30EB  02                 [190] (6)
30EC  00                 [191] (6)
30ED  00                 [192] (6)
30EE  CD                 [193] (6)
30EF  02                 [194] (6)
30F0  00                 [195] (6)
30F1  00                 [196] (6)
30F2  CD                 [197] (7)
30F3  02                 [198] (7)
30F4  00                 [199] (7)
30F5  00                 [200] (7)
30F6  CE                 [201] (7)
30F7  02                 [202] (7)
30F8  00                 [203] (7)
30F9  00                 [204] (7)
30FA  CE                 [205] (7)
30FB  02                 [206] (7)
30FC  00                 [207] (7)
30FD  00                 [208] (5)
30FE  CE                 [209] (7)
30FF  02                 [210] (9)
3100  00                 [211] (9)
3101  00                 [212] (9)
3102  CE                 [213] (9)
3103  02                 [214] (9)
3104  00                 [215] (9)
3105  00                 [216] (9)
3106  CE                 [217] (9)
3107  02                 [218] (9)
3108  00                 [219] (9)
3109  00                 [220] (9)
310A  D0                 [221] (13)
310B  02                 [222] (14)
310C  00                 [223] (14)
310D  00                 [224] (14)
310E  D0                 [225] (14)
310F  02                 [226] (15)
3110  00                 [227] (15)
3111  00                 [228] (15)
3112  D0                 [229] (15)
3113  02                 [230] (15)
3114  00                 [231] (15)
3115  00                 [232] (15)
3116  D0                 [233] (16)
3117  02                 [234] (16)
3118  00                 [235] (16)
3119  00                 [236] (16)
311A  D0                 [237] (16)
311B  02                 [238] (16)
311C  00                 [239] (16)
311D  00                 [240] (16)
311E  D1                 [241] (16)
311F  02                 [242] (17)
3120  00                 [243] (17)
3121  00                 [244] (17)
3122  D1                 [245] (17)
3123  02                 [246] (17)
3124  00                 [247] (17)
3125  00                 [248] (17)
3126  D1                 [249] (17)
3127  02                 [250] (17)
3128  00                 [251] (17)
3129  00                 [252] (14)
312A  D1                 [253] (17)
312B  02                 [254] (19)
312C  00                 [255] (19)
312D  00                 [256] (19)
312E  D1                 [257] (19)
312F  02                 [258] (19)
3130  00                 [259] (19)
3131  00                 [260] (19)
3132  D1                 [261] (19)
3133  02                 [262] (21)
3134  00                 [263] (26)
3135  00                 [264] (29)
3136  D1                 [265] (30)
3137  02                 [266] (32)
                         * locals:
3456  00                 sizelocvars (0)
                         * upvalues:
3457  00                 sizeupvalues (0)
                         ** end of function **

                         
3458                     ** function [18] definition (level 2)
                         ** start of function **
3458  00                 string size (0)
                         source name: (none)
345A  06                 line defined (803)
345B  A8                 last line defined (808)
345C  06                 nups (2)
345D  02                 numparams (3)
345E  03                 is_vararg (0)
345F  00                 maxstacksize (9)
                         * code:
3461  17                 sizecode (23)
3462  DD000000           [01] getglobal  3   0        ; 1780700712
3466  12010000           [02] move       4   0      
346A  E2800001           [03] call       3   2   2  
fail op	35
346E  2340C001           [04] close      0  
3472  1AC00080           [05] jmp        4            ; to [10]
3476  CE804000           [06] gettable   3   0   258  ; "__index"
347A  13010000           [07] getupval   4   0      
fail op	35
347E  63008101           [08] close      1  
3482  1A000180           [09] jmp        5            ; to [15]
3486  D3000000           [10] getupval   3   0      
348A  E4C0C001           [11] self       3   3   259  ; 930586644
348E  59010100           [12] loadk      5   4        ; "JSON:encode must be called in method format"
3492  92010001           [13] move       6   2      
3496  E2400002           [14] call       3   4   1  
349A  D3008000           [15] getupval   3   1      
349E  12010000           [16] move       4   0      
34A2  52018000           [17] move       5   1      
34A6  8B010000           [18] newtable   6   0   0    ; array=0, hash=0
34AA  D2010001           [19] move       7   2      
34AE  06020004           [20] loadnil    8   8      
34B2  C7000003           [21] tailcall   3   6   0  
34B6  DE000000           [22] return     3   0      
34BA  1E008000           [23] return     0   1      
                         * constants:
34BE  05                 sizek (5)
34BF  01                 const type 3
34C0  2856236A           const [0]: (1780700712)
34C4  04                 const type 4
34C5  06                 string size (6)
34C6  7461626C6500       "table\0"
                         const [1]: "table"
34CC  04                 const type 4
34CD  08                 string size (8)
34CE  5F5F696E64657800   "__index\0"
                         const [2]: "__index"
34D6  01                 const type 3
34D7  14A07737           const [3]: (930586644)
34DB  04                 const type 4
34DC  2C                 string size (44)
34DD  4A534F4E3A656E63+  "JSON:enc"
34E5  6F6465206D757374+  "ode must"
34ED  2062652063616C6C+  " be call"
34F5  656420696E206D65+  "ed in me"
34FD  74686F6420666F72+  "thod for"
3505  6D617400           "mat\0"
                         const [4]: "JSON:encode must be called in method format"
                         * functions:
3509  00                 sizep (0)
                         * lines:
350A  17                 sizelineinfo (23)
                         [pc] (line)
350B  24                 [01] (36)
350C  03                 [02] (36)
350D  00                 [03] (36)
350E  00                 [04] (36)
350F  24                 [05] (36)
3510  03                 [06] (36)
3511  00                 [07] (36)
3512  00                 [08] (36)
3513  24                 [09] (36)
3514  03                 [10] (37)
3515  00                 [11] (37)
3516  00                 [12] (37)
3517  24                 [13] (37)
3518  03                 [14] (37)
3519  00                 [15] (39)
351A  00                 [16] (39)
351B  24                 [17] (39)
351C  03                 [18] (39)
351D  00                 [19] (39)
351E  00                 [20] (39)
351F  24                 [21] (39)
3520  03                 [22] (39)
3521  00                 [23] (40)
                         * locals:
3567  00                 sizelocvars (0)
                         * upvalues:
3568  00                 sizeupvalues (0)
                         ** end of function **

                         
3569                     ** function [19] definition (level 2)
                         ** start of function **
3569  00                 string size (0)
                         source name: (none)
356B  06                 line defined (810)
356C  AF                 last line defined (815)
356D  06                 nups (2)
356E  02                 numparams (3)
356F  03                 is_vararg (0)
3570  00                 maxstacksize (9)
                         * code:
3572  17                 sizecode (23)
3573  DD000000           [01] getglobal  3   0        ; 1780700712
3577  12010000           [02] move       4   0      
357B  E2800001           [03] call       3   2   2  
fail op	35
357F  2340C001           [04] close      0  
3583  1AC00080           [05] jmp        4            ; to [10]
3587  CE804000           [06] gettable   3   0   258  ; "__index"
358B  13010000           [07] getupval   4   0      
fail op	35
358F  63008101           [08] close      1  
3593  1A000180           [09] jmp        5            ; to [15]
3597  D3000000           [10] getupval   3   0      
359B  E4C0C001           [11] self       3   3   259  ; 930586644
359F  59010100           [12] loadk      5   4        ; "JSON:encode_pretty must be called in method format"
35A3  92010001           [13] move       6   2      
35A7  E2400002           [14] call       3   4   1  
35AB  D3008000           [15] getupval   3   1      
35AF  12010000           [16] move       4   0      
35B3  52018000           [17] move       5   1      
35B7  8B010000           [18] newtable   6   0   0    ; array=0, hash=0
35BB  D2010001           [19] move       7   2      
35BF  19420100           [20] loadk      8   5        ; ""
35C3  C7000003           [21] tailcall   3   6   0  
35C7  DE000000           [22] return     3   0      
35CB  1E008000           [23] return     0   1      
                         * constants:
35CF  06                 sizek (6)
35D0  01                 const type 3
35D1  2856236A           const [0]: (1780700712)
35D5  04                 const type 4
35D6  06                 string size (6)
35D7  7461626C6500       "table\0"
                         const [1]: "table"
35DD  04                 const type 4
35DE  08                 string size (8)
35DF  5F5F696E64657800   "__index\0"
                         const [2]: "__index"
35E7  01                 const type 3
35E8  14A07737           const [3]: (930586644)
35EC  04                 const type 4
35ED  33                 string size (51)
35EE  4A534F4E3A656E63+  "JSON:enc"
35F6  6F64655F70726574+  "ode_pret"
35FE  7479206D75737420+  "ty must "
3606  62652063616C6C65+  "be calle"
360E  6420696E206D6574+  "d in met"
3616  686F6420666F726D+  "hod form"
361E  617400             "at\0"
                         const [4]: "JSON:encode_pretty must be called in method format"
3621  04                 const type 4
3622  01                 string size (0)
                         const [5]: ""
                         * functions:
3624  00                 sizep (0)
                         * lines:
3625  17                 sizelineinfo (23)
                         [pc] (line)
3626  2B                 [01] (43)
3627  03                 [02] (43)
3628  00                 [03] (43)
3629  00                 [04] (43)
362A  2B                 [05] (43)
362B  03                 [06] (43)
362C  00                 [07] (43)
362D  00                 [08] (43)
362E  2B                 [09] (43)
362F  03                 [10] (44)
3630  00                 [11] (44)
3631  00                 [12] (44)
3632  2B                 [13] (44)
3633  03                 [14] (44)
3634  00                 [15] (46)
3635  00                 [16] (46)
3636  2B                 [17] (46)
3637  03                 [18] (46)
3638  00                 [19] (46)
3639  00                 [20] (46)
363A  2B                 [21] (46)
363B  03                 [22] (46)
363C  00                 [23] (47)
                         * locals:
3682  00                 sizelocvars (0)
                         * upvalues:
3683  00                 sizeupvalues (0)
                         ** end of function **

                         
3684                     ** function [20] definition (level 2)
                         ** start of function **
3684  00                 string size (0)
                         source name: (none)
3686  06                 line defined (817)
3687  B3                 last line defined (819)
3688  06                 nups (0)
3689  00                 numparams (0)
368A  00                 is_vararg (0)
368B  00                 maxstacksize (2)
                         * code:
368D  03                 sizecode (3)
368E  19000000           [1] loadk      0   0        ; "JSON encode/decode package"
3692  1E000001           [2] return     0   2      
3696  1E008000           [3] return     0   1      
                         * constants:
369A  01                 sizek (1)
369B  04                 const type 4
369C  1B                 string size (27)
369D  4A534F4E20656E63+  "JSON enc"
36A5  6F64652F6465636F+  "ode/deco"
36AD  6465207061636B61+  "de packa"
36B5  676500             "ge\0"
                         const [0]: "JSON encode/decode package"
                         * functions:
36B8  00                 sizep (0)
                         * lines:
36B9  03                 sizelineinfo (3)
                         [pc] (line)
36BA  32                 [1] (50)
36BB  03                 [2] (50)
36BC  00                 [3] (51)
                         * locals:
36C6  00                 sizelocvars (0)
                         * upvalues:
36C7  00                 sizeupvalues (0)
                         ** end of function **

                         
36C8                     ** function [21] definition (level 2)
                         ** start of function **
36C8  00                 string size (0)
                         source name: (none)
36CA  06                 line defined (823)
36CB  C1                 last line defined (833)
36CC  06                 nups (1)
36CD  01                 numparams (2)
36CE  02                 is_vararg (0)
36CF  00                 maxstacksize (11)
                         * code:
36D1  10                 sizecode (16)
36D2  8B000000           [01] newtable   2   0   0    ; array=0, hash=0
36D6  58000000           [02] test       1       0    ; to [4] if true
36DA  1A800180           [03] jmp        7            ; to [11]
36DE  DD000000           [04] getglobal  3   0        ; 248503575
36E2  12018000           [05] move       4   1      
36E6  E2000101           [06] call       3   2   4  
36EA  1A000080           [07] jmp        1            ; to [9]
36EE  8CC00103           [08] settable   2   6   7  
36F2  D6800000           [09] tforloop   3       2    ; to [11] if exit
36F6  1A00FF7F           [10] jmp        -3           ; to [8]
36FA  1D420000           [11] getglobal  8   1        ; -1900524209
36FE  52020001           [12] move       9   2      
3702  93020000           [13] getupval   10  0      
3706  07028001           [14] tailcall   8   3   0  
370A  1E020000           [15] return     8   0      
370E  1E008000           [16] return     0   1      
                         * constants:
3712  02                 sizek (2)
3713  01                 const type 3
3714  17DDCF0E           const [0]: (248503575)
3718  01                 const type 3
3719  4F4DB88E           const [1]: (-1900524209)
                         * functions:
371D  00                 sizep (0)
                         * lines:
371E  10                 sizelineinfo (16)
                         [pc] (line)
371F  38                 [01] (56)
3720  03                 [02] (58)
3721  00                 [03] (58)
3722  00                 [04] (59)
3723  3A                 [05] (59)
3724  03                 [06] (59)
3725  00                 [07] (59)
3726  00                 [08] (60)
3727  3A                 [09] (59)
3728  03                 [10] (60)
3729  00                 [11] (64)
372A  00                 [12] (64)
372B  3B                 [13] (64)
372C  03                 [14] (64)
372D  00                 [15] (64)
372E  00                 [16] (65)
                         * locals:
375F  00                 sizelocvars (0)
                         * upvalues:
3760  00                 sizeupvalues (0)
                         ** end of function **

                         * lines:
3761  5D                 sizelineinfo (93)
                         [pc] (line)
3762  10                 [01] (16)
3763  00                 [02] (17)
3764  00                 [03] (17)
3765  00                 [04] (-82)
3766  11                 [05] (-82)
3767  00                 [06] (-82)
3768  00                 [07] (-82)
3769  00                 [08] (-82)
376A  11                 [09] (-82)
376B  00                 [10] (-81)
376C  00                 [11] (-81)
376D  00                 [12] (-81)
376E  AE                 [13] (-81)
376F  00                 [14] (-80)
3770  00                 [15] (-80)
3771  00                 [16] (-80)
3772  AE                 [17] (-80)
3773  00                 [18] (-75)
3774  00                 [19] (-75)
3775  00                 [20] (-77)
3776  AE                 [21] (-71)
3777  00                 [22] (-71)
3778  00                 [23] (-73)
3779  00                 [24] (-8)
377A  AE                 [25] (12)
377B  00                 [26] (12)
377C  00                 [27] (-6)
377D  00                 [28] (14)
377E  AE                 [29] (14)
377F  00                 [30] (15)
3780  00                 [31] (15)
3781  00                 [32] (27)
3782  AE                 [33] (27)
3783  00                 [34] (17)
3784  00                 [35] (64)
3785  00                 [36] (-127)
3786  AF                 [37] (-127)
3787  00                 [38] (-117)
3788  00                 [39] (-115)
3789  00                 [40] (-66)
378A  AF                 [41] (-66)
378B  00                 [42] (-66)
378C  00                 [43] (-66)
378D  00                 [44] (-32)
378E  AF                 [45] (-32)
378F  00                 [46] (-32)
3790  00                 [47] (3)
3791  00                 [48] (3)
3792  AF                 [49] (3)
3793  00                 [50] (3)
3794  00                 [51] (3)
3795  00                 [52] (3)
3796  B0                 [53] (48)
3797  00                 [54] (48)
3798  00                 [55] (48)
3799  00                 [56] (5)
379A  B0                 [57] (68)
379B  00                 [58] (72)
379C  00                 [59] (73)
379D  00                 [60] (74)
379E  B0                 [61] (75)
379F  00                 [62] (75)
37A0  00                 [63] (75)
37A1  00                 [64] (76)
37A2  B0                 [65] (76)
37A3  00                 [66] (76)
37A4  00                 [67] (81)
37A5  00                 [68] (81)
37A6  B5                 [69] (81)
37A7  00                 [70] (-91)
37A8  00                 [71] (-86)
37A9  00                 [72] (32)
37AA  B5                 [73] (32)
37AB  00                 [74] (32)
37AC  00                 [75] (-85)
37AD  00                 [76] (40)
37AE  B3                 [77] (40)
37AF  00                 [78] (40)
37B0  00                 [79] (35)
37B1  00                 [80] (47)
37B2  B9                 [81] (47)
37B3  00                 [82] (47)
37B4  00                 [83] (42)
37B5  00                 [84] (51)
37B6  B9                 [85] (49)
37B7  00                 [86] (53)
37B8  00                 [87] (65)
37B9  00                 [88] (65)
37BA  B7                 [89] (55)
37BB  00                 [90] (67)
37BC  00                 [91] (67)
37BD  00                 [92] (67)
37BE  F8                 [93] (67)
                         * locals:
38D6  00                 sizelocvars (0)
                         * upvalues:
38D7  00                 sizeupvalues (0)
                         ** end of function **

38D8                     ** end of chunk **
