1	C:\wlua_dump\path\Lotus\Scripts\ChallengesPostureKill.lua
Pos   Hex Data           Description or Code
------------------------------------------------------------------------
0000                     ** source chunk: C:\wlua_dump\path\Lotus\Scripts\ChallengesPostureKill.lua
                         ** global header start **
0000  7F                 header signature: ""
0001  00                 version (major:minor hex digits)
0002  00                 format (0=official)
0003  00                 endianness (1=little endian)
0004  00                 size of int (bytes)
0005  00                 size of size_t (bytes)
0006  02                 size of Instruction (bytes)
0007  03                 size of number (bytes)
0008  13                 integral (1=integral)
419
                         * number type: single
                         * x86 standard (32-bit, little endian, doubles)
                         ** global header end **
CheckPreconditions
MatchAttackEvent
MatchTagEvent
MatchItemEvent
Engine
WALLRUNNING_LEFT
WALLRUNNING_RIGHT
WALLRUNNING_UP
gGameRules
archwingRequired
useModifiers
requiredModifiers
Engine
PM_PRE_DEATH
usePosture
requiredAttackAction
MELEE_FINISHER
gLotusWeaponType
requiredPosture
SLIDE
                         
0001                     ** function [0] definition (level 1)
                         ** start of function **
0001  00                 string size (0)
                         source name: (none)
0002  00                 line defined (0)
0003  00                 last line defined (0)
0004  00                 nups (0)
0005  00                 numparams (0)
0006  02                 is_vararg (2)
0007  03                 maxstacksize (3)
                         * code:
0008  13                 sizecode (19)
0009  25000000           [01] closure    0   0      
000D  65400000           [02] closure    1   1      
0011  60000000           [03] setglobal  1   0        ; CheckPreconditions
0015  60400000           [04] setglobal  1   1        ; -1008116562
0019  65800000           [05] closure    1   2      
001D  12000000           [06] move       0   0      
0021  A5C00000           [07] closure    2   3      
0025  12008000           [08] move       0   1      
0029  A0800000           [09] setglobal  2   2        ; MatchAttackEvent
002D  A0C00000           [10] setglobal  2   3        ; -1021051096
0031  A5000100           [11] closure    2   4      
0035  12008000           [12] move       0   1      
0039  A0000100           [13] setglobal  2   4        ; MatchTagEvent
003D  A0400100           [14] setglobal  2   5        ; -1299341210
0041  A5400100           [15] closure    2   5      
0045  12008000           [16] move       0   1      
0049  A0800100           [17] setglobal  2   6        ; MatchItemEvent
004D  A0C00100           [18] setglobal  2   7        ; 1172878987
0051  1E008000           [19] return     0   1      
                         * constants:
0055  08                 sizek (8)
0056  04                 const type 4
0057  13                 string size (19)
0058  436865636B507265+  "CheckPre"
0060  636F6E646974696F+  "conditio"
0068  6E7300             "ns\0"
                         const [0]: "CheckPreconditions"
006B  01                 const type 3
006C  AE5CE9C3           const [1]: (-1008116562)
0070  04                 const type 4
0071  11                 string size (17)
0072  4D61746368417474+  "MatchAtt"
007A  61636B4576656E74+  "ackEvent"
0082  00                 "\0"
                         const [2]: "MatchAttackEvent"
0083  01                 const type 3
0084  28FF23C3           const [3]: (-1021051096)
0088  04                 const type 4
0089  0E                 string size (14)
008A  4D61746368546167+  "MatchTag"
0092  4576656E7400       "Event\0"
                         const [4]: "MatchTagEvent"
0098  01                 const type 3
0099  66A08DB2           const [5]: (-1299341210)
009D  04                 const type 4
009E  0F                 string size (15)
009F  4D61746368497465+  "MatchIte"
00A7  6D4576656E7400     "mEvent\0"
                         const [6]: "MatchItemEvent"
00AE  01                 const type 3
00AF  8BB6E845           const [7]: (1172878987)
                         * functions:
00B3  06                 sizep (6)
                         
00B4                     ** function [0] definition (level 2)
                         ** start of function **
00B4  00                 string size (0)
                         source name: (none)
00B5  07                 line defined (7)
00B6  09                 last line defined (9)
00B7  00                 nups (0)
00B8  01                 numparams (1)
00B9  00                 is_vararg (0)
00BA  02                 maxstacksize (2)
                         * code:
00BB  10                 sizecode (16)
00BC  5D000000           [01] getglobal  1   0        ; Engine
00C0  4E40C000           [02] gettable   1   1   257  ; "WALLRUNNING_LEFT"
fail op	35
00C4  63400000           [03] close      1  
00C8  1A000280           [04] jmp        9            ; to [14]
00CC  5D000000           [05] getglobal  1   0        ; Engine
00D0  4E80C000           [06] gettable   1   1   258  ; "WALLRUNNING_RIGHT"
fail op	35
00D4  63400000           [07] close      1  
00D8  1A000180           [08] jmp        5            ; to [14]
00DC  5D000000           [09] getglobal  1   0        ; Engine
00E0  4EC0C000           [10] gettable   1   1   259  ; "WALLRUNNING_UP"
fail op	35
00E4  63400000           [11] close      1  
00E8  1A000080           [12] jmp        1            ; to [14]
00EC  57400000           [13] loadbool   1   0   1    ; false, to [15]
00F0  57008000           [14] loadbool   1   1   0    ; true
00F4  5E000001           [15] return     1   2      
00F8  1E008000           [16] return     0   1      
                         * constants:
00FC  04                 sizek (4)
00FD  04                 const type 4
00FE  07                 string size (7)
00FF  456E67696E6500     "Engine\0"
                         const [0]: "Engine"
0106  04                 const type 4
0107  11                 string size (17)
0108  57414C4C52554E4E+  "WALLRUNN"
0110  494E475F4C454654+  "ING_LEFT"
0118  00                 "\0"
                         const [1]: "WALLRUNNING_LEFT"
0119  04                 const type 4
011A  12                 string size (18)
011B  57414C4C52554E4E+  "WALLRUNN"
0123  494E475F52494748+  "ING_RIGH"
012B  5400               "T\0"
                         const [2]: "WALLRUNNING_RIGHT"
012D  04                 const type 4
012E  0F                 string size (15)
012F  57414C4C52554E4E+  "WALLRUNN"
0137  494E475F555000     "ING_UP\0"
                         const [3]: "WALLRUNNING_UP"
                         * functions:
013E  00                 sizep (0)
                         * lines:
013F  10                 sizelineinfo (16)
                         [pc] (line)
0140  08                 [01] (8)
0141  00                 [02] (8)
0142  00                 [03] (8)
0143  00                 [04] (8)
0144  08                 [05] (8)
0145  00                 [06] (8)
0146  00                 [07] (8)
0147  00                 [08] (8)
0148  08                 [09] (8)
0149  00                 [10] (8)
014A  00                 [11] (8)
014B  00                 [12] (8)
014C  08                 [13] (8)
014D  00                 [14] (8)
014E  00                 [15] (8)
014F  00                 [16] (9)
                         * locals:
0180  00                 sizelocvars (0)
                         * upvalues:
0181  00                 sizeupvalues (0)
                         ** end of function **

                         
0182                     ** function [1] definition (level 2)
                         ** start of function **
0182  00                 string size (0)
                         source name: (none)
0183  0B                 line defined (11)
0184  12                 last line defined (18)
0185  00                 nups (0)
0186  00                 numparams (0)
0187  00                 is_vararg (0)
0188  02                 maxstacksize (2)
                         * code:
0189  0B                 sizecode (11)
018A  1D000000           [01] getglobal  0   0        ; gGameRules
018E  24404000           [02] self       0   0   257  ; -1201441975
0192  22800001           [03] call       0   2   2  
0196  4E804000           [04] gettable   1   0   258  ; "archwingRequired"
019A  58000000           [05] test       1       0    ; to [7] if true
019E  1A400080           [06] jmp        2            ; to [9]
01A2  57000000           [07] loadbool   1   0   0    ; false
01A6  5E000001           [08] return     1   2      
01AA  57008000           [09] loadbool   1   1   0    ; true
01AE  5E000001           [10] return     1   2      
01B2  1E008000           [11] return     0   1      
                         * constants:
01B6  03                 sizek (3)
01B7  04                 const type 4
01B8  0B                 string size (11)
01B9  6747616D6552756C+  "gGameRul"
01C1  657300             "es\0"
                         const [0]: "gGameRules"
01C4  01                 const type 3
01C5  497363B8           const [1]: (-1201441975)
01C9  04                 const type 4
01CA  11                 string size (17)
01CB  6172636877696E67+  "archwing"
01D3  5265717569726564+  "Required"
01DB  00                 "\0"
                         const [2]: "archwingRequired"
                         * functions:
01DC  00                 sizep (0)
                         * lines:
01DD  0B                 sizelineinfo (11)
                         [pc] (line)
01DE  0C                 [01] (12)
01DF  00                 [02] (12)
01E0  00                 [03] (12)
01E1  00                 [04] (13)
01E2  0C                 [05] (13)
01E3  00                 [06] (13)
01E4  00                 [07] (14)
01E5  00                 [08] (14)
01E6  0C                 [09] (17)
01E7  00                 [10] (17)
01E8  00                 [11] (18)
                         * locals:
020A  00                 sizelocvars (0)
                         * upvalues:
020B  00                 sizeupvalues (0)
                         ** end of function **

                         
020C                     ** function [2] definition (level 2)
                         ** start of function **
020C  00                 string size (0)
                         source name: (none)
020D  14                 line defined (20)
020E  4A                 last line defined (74)
020F  01                 nups (1)
0210  02                 numparams (2)
0211  00                 is_vararg (0)
0212  11                 maxstacksize (17)
                         * code:
0214  01                 sizecode (157)
0215  A400C000           [001] self       2   1   256  ; -2135866365
0219  A2800001           [002] call       2   2   2  
021D  DD400000           [003] getglobal  3   1        ; useModifiers
0221  D8000000           [004] test       3       0    ; to [6] if true
0225  1A400980           [005] jmp        38           ; to [44]
0229  D9800000           [006] loadk      3   2        ; 0
022D  1DC10000           [007] getglobal  4   3        ; requiredModifiers
0231  0A010002           [008] len        4   4      
0235  59810000           [009] loadk      5   2        ; 0
0239  D0800680           [010] forprep    3   27       ; to [38]
023D  DDC10000           [011] getglobal  7   3        ; requiredModifiers
0241  CE818103           [012] gettable   7   7   6  
0245  1D020100           [013] getglobal  8   4        ; Engine
0249  0E424104           [014] gettable   8   8   261  ; "PM_PRE_DEATH"
fail op	35
024D  23008203           [015] close      0  
0251  1A000380           [016] jmp        13           ; to [30]
0255  E4814101           [017] self       7   2   262  ; -1519595333
0259  E2810001           [018] call       7   2   2  
025D  D8410000           [019] test       7       1    ; to [21] if false
0261  1A000480           [020] jmp        17           ; to [38]
0265  E4C14101           [021] self       7   2   263  ; -214694299
0269  5DC20000           [022] getglobal  9   3        ; requiredModifiers
026D  4E828104           [023] gettable   9   9   6  
0271  E2818001           [024] call       7   3   2  
0275  D8410000           [025] test       7       1    ; to [27] if false
0279  1A800280           [026] jmp        11           ; to [38]
027D  D7010000           [027] loadbool   7   0   0    ; false
0281  DE010001           [028] return     7   2      
0285  1AC00180           [029] jmp        8            ; to [38]
0289  E4C14101           [030] self       7   2   263  ; -214694299
028D  5DC20000           [031] getglobal  9   3        ; requiredModifiers
0291  4E828104           [032] gettable   9   9   6  
0295  E2818001           [033] call       7   3   2  
0299  D8410000           [034] test       7       1    ; to [36] if false
029D  1A400080           [035] jmp        2            ; to [38]
02A1  D7010000           [036] loadbool   7   0   0    ; false
02A5  DE010001           [037] return     7   2      
02A9  D4C0F87F           [038] forloop    3   -28      ; to [11] if loop
02AD  DD010200           [039] getglobal  7   8        ; usePosture
02B1  D8410000           [040] test       7       1    ; to [42] if false
02B5  1A400080           [041] jmp        2            ; to [44]
02B9  D7018000           [042] loadbool   7   1   0    ; true
02BD  DE010001           [043] return     7   2      
02C1  DD010200           [044] getglobal  7   8        ; usePosture
02C5  D8410000           [045] test       7       1    ; to [47] if false
02C9  1A800980           [046] jmp        39           ; to [86]
02CD  DD410200           [047] getglobal  7   9        ; 1074689893
02D1  12020000           [048] move       8   0      
02D5  E2810001           [049] call       7   2   2  
02D9  D8410000           [050] test       7       1    ; to [52] if false
02DD  1AC00780           [051] jmp        32           ; to [84]
02E1  DD810200           [052] getglobal  7   10       ; requiredAttackAction
02E5  1D020100           [053] getglobal  8   4        ; Engine
02E9  0EC24204           [054] gettable   8   8   267  ; "MELEE_FINISHER"
fail op	35
02ED  23008203           [055] close      0  
02F1  1A800680           [056] jmp        27           ; to [84]
02F5  E4014300           [057] self       7   0   268  ; 154574904
02F9  E2810001           [058] call       7   2   2  
02FD  1D420200           [059] getglobal  8   9        ; 1074689893
0301  52028003           [060] move       9   7      
0305  22820001           [061] call       8   2   2  
0309  18420000           [062] test       8       1    ; to [64] if false
030D  1AC00480           [063] jmp        20           ; to [84]
0311  2442C303           [064] self       8   7   269  ; -1957065004
0315  9D820300           [065] getglobal  10  14       ; gLotusWeaponType
0319  22828001           [066] call       8   3   2  
031D  18020000           [067] test       8       0    ; to [69] if true
0321  1A800380           [068] jmp        15           ; to [84]
0325  24C2C303           [069] self       8   7   271  ; -857886821
0329  22820001           [070] call       8   2   2  
032D  18020000           [071] test       8       0    ; to [73] if true
0331  1A800280           [072] jmp        11           ; to [84]
0335  2402C403           [073] self       8   7   272  ; -277534664
0339  22820001           [074] call       8   2   2  
033D  5D820200           [075] getglobal  9   10       ; requiredAttackAction
fail op	35
0341  63400204           [076] close      1  
0345  1AC00080           [077] jmp        4            ; to [82]
0349  24424401           [078] self       8   2   273  ; -117614403
034D  22820001           [079] call       8   2   2  
0351  18020000           [080] test       8       0    ; to [82] if true
0355  1A400080           [081] jmp        2            ; to [84]
0359  17028000           [082] loadbool   8   1   0    ; true
035D  1E020001           [083] return     8   2      
0361  17020000           [084] loadbool   8   0   0    ; false
0365  1E020001           [085] return     8   2      
0369  24824401           [086] self       8   2   274  ; -49551937
036D  22820001           [087] call       8   2   2  
0371  5DC20400           [088] getglobal  9   19       ; requiredPosture
fail op	35
0375  23400204           [089] close      0  
0379  1A800080           [090] jmp        3            ; to [94]
037D  57028000           [091] loadbool   9   1   0    ; true
0381  5E020001           [092] return     9   2      
0385  1A000F80           [093] jmp        61           ; to [155]
0389  5D420200           [094] getglobal  9   9        ; 1074689893
038D  92020000           [095] move       10  0      
0391  62820001           [096] call       9   2   2  
0395  58420000           [097] test       9       1    ; to [99] if false
0399  1A000780           [098] jmp        29           ; to [128]
039D  5DC20400           [099] getglobal  9   19       ; requiredPosture
03A1  9D020100           [100] getglobal  10  4        ; Engine
03A5  8E024505           [101] gettable   10  10  276  ; "SLIDE"
fail op	35
03A9  23808204           [102] close      0  
03AD  1AC00580           [103] jmp        24           ; to [128]
03B1  64024300           [104] self       9   0   268  ; 154574904
03B5  62820001           [105] call       9   2   2  
03B9  9D420200           [106] getglobal  10  9        ; 1074689893
03BD  D2028004           [107] move       11  9      
03C1  A2820001           [108] call       10  2   2  
03C5  98420000           [109] test       10      1    ; to [111] if false
03C9  1AC00A80           [110] jmp        44           ; to [155]
03CD  A442C304           [111] self       10  9   269  ; -1957065004
03D1  1D830300           [112] getglobal  12  14       ; gLotusWeaponType
03D5  A2828001           [113] call       10  3   2  
03D9  98020000           [114] test       10      0    ; to [116] if true
03DD  1A800980           [115] jmp        39           ; to [155]
03E1  A4C2C304           [116] self       10  9   271  ; -857886821
03E5  A2820001           [117] call       10  2   2  
03E9  98020000           [118] test       10      0    ; to [120] if true
03ED  1A800880           [119] jmp        35           ; to [155]
03F1  A402C404           [120] self       10  9   272  ; -277534664
03F5  A2820001           [121] call       10  2   2  
03F9  DD820200           [122] getglobal  11  10       ; requiredAttackAction
fail op	35
03FD  23C00205           [123] close      0  
0401  1A400780           [124] jmp        30           ; to [155]
0405  97028000           [125] loadbool   10  1   0    ; true
0409  9E020001           [126] return     10  2      
040D  1A800680           [127] jmp        27           ; to [155]
0411  93020000           [128] getupval   10  0      
0415  DDC20400           [129] getglobal  11  19       ; requiredPosture
0419  A2820001           [130] call       10  2   2  
041D  98020000           [131] test       10      0    ; to [133] if true
0421  1A400580           [132] jmp        22           ; to [155]
0425  93020000           [133] getupval   10  0      
0429  D2020004           [134] move       11  8      
042D  A2820001           [135] call       10  2   2  
0431  98020000           [136] test       10      0    ; to [138] if true
0435  1A800080           [137] jmp        3            ; to [141]
0439  97028000           [138] loadbool   10  1   0    ; true
043D  9E020001           [139] return     10  2      
0441  1A400380           [140] jmp        14           ; to [155]
0445  99820000           [141] loadk      10  2        ; 0
0449  DDC20000           [142] getglobal  11  3        ; requiredModifiers
044D  CA028005           [143] len        11  11     
0451  19830000           [144] loadk      12  2        ; 0
0455  90C20180           [145] forprep    10  8        ; to [154]
0459  A4C34101           [146] self       14  2   263  ; -214694299
045D  1DC40000           [147] getglobal  16  3        ; requiredModifiers
0461  0E440308           [148] gettable   16  16  13 
0465  A2838001           [149] call       14  3   2  
0469  98030000           [150] test       14      0    ; to [152] if true
046D  1A400080           [151] jmp        2            ; to [154]
0471  97038000           [152] loadbool   14  1   0    ; true
0475  9E030001           [153] return     14  2      
0479  9482FD7F           [154] forloop    10  -9       ; to [146] if loop
047D  97030000           [155] loadbool   14  0   0    ; false
0481  9E030001           [156] return     14  2      
0485  1E008000           [157] return     0   1      
                         * constants:
0489  15                 sizek (21)
048A  01                 const type 3
048B  0344B180           const [0]: (-2135866365)
048F  04                 const type 4
0490  0D                 string size (13)
0491  7573654D6F646966+  "useModif"
0499  6965727300         "iers\0"
                         const [1]: "useModifiers"
049E  03                 const type 3
049F  0000803F           const [2]: (0)
04A3  04                 const type 4
04A4  12                 string size (18)
04A5  7265717569726564+  "required"
04AD  4D6F646966696572+  "Modifier"
04B5  7300               "s\0"
                         const [3]: "requiredModifiers"
04B7  04                 const type 4
04B8  07                 string size (7)
04B9  456E67696E6500     "Engine\0"
                         const [4]: "Engine"
04C0  04                 const type 4
04C1  0D                 string size (13)
04C2  504D5F5052455F44+  "PM_PRE_D"
04CA  4541544800         "EATH\0"
                         const [5]: "PM_PRE_DEATH"
04CF  01                 const type 3
04D0  BBD06CA5           const [6]: (-1519595333)
04D4  01                 const type 3
04D5  650634F3           const [7]: (-214694299)
04D9  04                 const type 4
04DA  0B                 string size (11)
04DB  757365506F737475+  "usePostu"
04E3  726500             "re\0"
                         const [8]: "usePosture"
04E6  01                 const type 3
04E7  65770E40           const [9]: (1074689893)
04EB  04                 const type 4
04EC  15                 string size (21)
04ED  7265717569726564+  "required"
04F5  41747461636B4163+  "AttackAc"
04FD  74696F6E00         "tion\0"
                         const [10]: "requiredAttackAction"
0502  04                 const type 4
0503  0F                 string size (15)
0504  4D454C45455F4649+  "MELEE_FI"
050C  4E495348455200     "NISHER\0"
                         const [11]: "MELEE_FINISHER"
0513  01                 const type 3
0514  38A03609           const [12]: (154574904)
0518  01                 const type 3
0519  D48E598B           const [13]: (-1957065004)
051D  04                 const type 4
051E  11                 string size (17)
051F  674C6F7475735765+  "gLotusWe"
0527  61706F6E54797065+  "aponType"
052F  00                 "\0"
                         const [14]: "gLotusWeaponType"
0530  01                 const type 3
0531  9BAFDDCC           const [15]: (-857886821)
0535  01                 const type 3
0536  382875EF           const [16]: (-277534664)
053A  01                 const type 3
053B  BD58FDF8           const [17]: (-117614403)
053F  01                 const type 3
0540  BFE50BFD           const [18]: (-49551937)
0544  04                 const type 4
0545  10                 string size (16)
0546  7265717569726564+  "required"
054E  506F737475726500   "Posture\0"
                         const [19]: "requiredPosture"
0556  04                 const type 4
0557  06                 string size (6)
0558  534C49444500       "SLIDE\0"
                         const [20]: "SLIDE"
                         * functions:
055E  00                 sizep (0)
                         * lines:
0560  01                 sizelineinfo (157)
                         [pc] (line)
0561  15                 [001] (21)
0562  00                 [002] (21)
0563  00                 [003] (23)
0564  00                 [004] (23)
0565  15                 [005] (23)
0566  00                 [006] (24)
0567  00                 [007] (24)
0568  00                 [008] (24)
0569  17                 [009] (24)
056A  00                 [010] (24)
056B  00                 [011] (25)
056C  00                 [012] (25)
056D  17                 [013] (25)
056E  00                 [014] (25)
056F  00                 [015] (25)
0570  00                 [016] (25)
0571  17                 [017] (26)
0572  00                 [018] (26)
0573  00                 [019] (26)
0574  00                 [020] (26)
0575  18                 [021] (26)
0576  00                 [022] (26)
0577  00                 [023] (26)
0578  00                 [024] (26)
0579  18                 [025] (26)
057A  00                 [026] (26)
057B  00                 [027] (27)
057C  00                 [028] (27)
057D  18                 [029] (28)
057E  00                 [030] (30)
057F  00                 [031] (30)
0580  00                 [032] (30)
0581  18                 [033] (30)
0582  00                 [034] (30)
0583  00                 [035] (30)
0584  00                 [036] (31)
0585  18                 [037] (31)
0586  00                 [038] (24)
0587  00                 [039] (35)
0588  00                 [040] (35)
0589  19                 [041] (35)
058A  00                 [042] (36)
058B  00                 [043] (36)
058C  00                 [044] (40)
058D  19                 [045] (40)
058E  00                 [046] (40)
058F  00                 [047] (41)
0590  00                 [048] (41)
0591  19                 [049] (41)
0592  00                 [050] (41)
0593  00                 [051] (41)
0594  00                 [052] (41)
0595  19                 [053] (41)
0596  00                 [054] (41)
0597  00                 [055] (41)
0598  00                 [056] (41)
0599  19                 [057] (42)
059A  00                 [058] (42)
059B  00                 [059] (43)
059C  00                 [060] (43)
059D  19                 [061] (43)
059E  00                 [062] (43)
059F  00                 [063] (43)
05A0  00                 [064] (43)
05A1  1A                 [065] (43)
05A2  00                 [066] (43)
05A3  00                 [067] (43)
05A4  00                 [068] (43)
05A5  1A                 [069] (43)
05A6  00                 [070] (43)
05A7  00                 [071] (43)
05A8  00                 [072] (43)
05A9  1A                 [073] (43)
05AA  00                 [074] (43)
05AB  00                 [075] (43)
05AC  00                 [076] (43)
05AD  1A                 [077] (43)
05AE  00                 [078] (43)
05AF  00                 [079] (43)
05B0  00                 [080] (43)
05B1  1A                 [081] (43)
05B2  00                 [082] (44)
05B3  00                 [083] (44)
05B4  00                 [084] (47)
05B5  1A                 [085] (47)
05B6  00                 [086] (50)
05B7  00                 [087] (50)
05B8  00                 [088] (52)
05B9  1A                 [089] (52)
05BA  00                 [090] (52)
05BB  00                 [091] (53)
05BC  00                 [092] (53)
05BD  1A                 [093] (53)
05BE  00                 [094] (54)
05BF  00                 [095] (54)
05C0  00                 [096] (54)
05C1  1A                 [097] (54)
05C2  00                 [098] (54)
05C3  00                 [099] (54)
05C4  00                 [100] (54)
05C5  1A                 [101] (54)
05C6  00                 [102] (54)
05C7  00                 [103] (54)
05C8  00                 [104] (55)
05C9  1B                 [105] (55)
05CA  00                 [106] (57)
05CB  00                 [107] (57)
05CC  00                 [108] (57)
05CD  1B                 [109] (57)
05CE  00                 [110] (57)
05CF  00                 [111] (57)
05D0  00                 [112] (57)
05D1  1C                 [113] (57)
05D2  00                 [114] (57)
05D3  00                 [115] (57)
05D4  00                 [116] (57)
05D5  1E                 [117] (57)
05D6  00                 [118] (57)
05D7  00                 [119] (57)
05D8  00                 [120] (57)
05D9  1E                 [121] (57)
05DA  00                 [122] (57)
05DB  00                 [123] (57)
05DC  00                 [124] (57)
05DD  1E                 [125] (58)
05DE  00                 [126] (58)
05DF  00                 [127] (59)
05E0  00                 [128] (60)
05E1  1E                 [129] (60)
05E2  00                 [130] (60)
05E3  00                 [131] (60)
05E4  00                 [132] (60)
05E5  1E                 [133] (61)
05E6  00                 [134] (61)
05E7  00                 [135] (61)
05E8  00                 [136] (61)
05E9  1E                 [137] (61)
05EA  00                 [138] (62)
05EB  00                 [139] (62)
05EC  00                 [140] (62)
05ED  1F                 [141] (65)
05EE  00                 [142] (65)
05EF  00                 [143] (65)
05F0  00                 [144] (65)
05F1  1F                 [145] (65)
05F2  00                 [146] (66)
05F3  00                 [147] (66)
05F4  00                 [148] (66)
05F5  18                 [149] (66)
05F6  00                 [150] (66)
05F7  00                 [151] (66)
05F8  00                 [152] (67)
05F9  23                 [153] (67)
05FA  00                 [154] (65)
05FB  00                 [155] (73)
05FC  00                 [156] (73)
05FD  23                 [157] (74)
                         * locals:
07D5  00                 sizelocvars (0)
                         * upvalues:
07D6  00                 sizeupvalues (0)
                         ** end of function **

                         
07D7                     ** function [3] definition (level 2)
                         ** start of function **
07D7  00                 string size (0)
                         source name: (none)
07D8  4C                 line defined (76)
07D9  51                 last line defined (81)
07DA  01                 nups (1)
07DB  02                 numparams (2)
07DC  00                 is_vararg (0)
07DD  06                 maxstacksize (6)
                         * code:
07DE  0F                 sizecode (15)
07DF  A4004000           [01] self       2   0   256  ; -590993082
07E3  A2800001           [02] call       2   2   2  
07E7  DD400000           [03] getglobal  3   1        ; 1074689893
07EB  12010001           [04] move       4   2      
07EF  E2800001           [05] call       3   2   2  
07F3  D8000000           [06] test       3       0    ; to [8] if true
07F7  1A400080           [07] jmp        2            ; to [10]
07FB  D7000000           [08] loadbool   3   0   0    ; false
07FF  DE000001           [09] return     3   2      
0803  D3000000           [10] getupval   3   0      
0807  12010000           [11] move       4   0      
080B  52018000           [12] move       5   1      
080F  C7008001           [13] tailcall   3   3   0  
0813  DE000000           [14] return     3   0      
0817  1E008000           [15] return     0   1      
                         * constants:
081B  02                 sizek (2)
081C  01                 const type 3
081D  4629C6DC           const [0]: (-590993082)
0821  01                 const type 3
0822  65770E40           const [1]: (1074689893)
                         * functions:
0826  00                 sizep (0)
                         * lines:
0827  0F                 sizelineinfo (15)
                         [pc] (line)
0828  4D                 [01] (77)
0829  00                 [02] (77)
082A  00                 [03] (78)
082B  00                 [04] (78)
082C  4D                 [05] (78)
082D  00                 [06] (78)
082E  00                 [07] (78)
082F  00                 [08] (78)
0830  4E                 [09] (78)
0831  00                 [10] (80)
0832  00                 [11] (80)
0833  00                 [12] (80)
0834  4E                 [13] (80)
0835  00                 [14] (80)
0836  00                 [15] (81)
                         * locals:
0864  00                 sizelocvars (0)
                         * upvalues:
0865  00                 sizeupvalues (0)
                         ** end of function **

                         
0866                     ** function [4] definition (level 2)
                         ** start of function **
0866  00                 string size (0)
                         source name: (none)
0867  54                 line defined (84)
0868  56                 last line defined (86)
0869  01                 nups (1)
086A  02                 numparams (2)
086B  00                 is_vararg (0)
086C  05                 maxstacksize (5)
                         * code:
086D  06                 sizecode (6)
086E  93000000           [1] getupval   2   0      
0872  C6008001           [2] loadnil    3   3      
0876  12010000           [3] move       4   0      
087A  87008001           [4] tailcall   2   3   0  
087E  9E000000           [5] return     2   0      
0882  1E008000           [6] return     0   1      
                         * constants:
0886  00                 sizek (0)
                         * functions:
0887  00                 sizep (0)
                         * lines:
0888  06                 sizelineinfo (6)
                         [pc] (line)
0889  55                 [1] (85)
088A  00                 [2] (85)
088B  00                 [3] (85)
088C  00                 [4] (85)
088D  55                 [5] (85)
088E  00                 [6] (86)
                         * locals:
08A1  00                 sizelocvars (0)
                         * upvalues:
08A2  00                 sizeupvalues (0)
                         ** end of function **

                         
08A3                     ** function [5] definition (level 2)
                         ** start of function **
08A3  00                 string size (0)
                         source name: (none)
08A4  58                 line defined (88)
08A5  5A                 last line defined (90)
08A6  01                 nups (1)
08A7  02                 numparams (2)
08A8  00                 is_vararg (0)
08A9  05                 maxstacksize (5)
                         * code:
08AA  06                 sizecode (6)
08AB  93000000           [1] getupval   2   0      
08AF  C6008001           [2] loadnil    3   3      
08B3  12010000           [3] move       4   0      
08B7  87008001           [4] tailcall   2   3   0  
08BB  9E000000           [5] return     2   0      
08BF  1E008000           [6] return     0   1      
                         * constants:
08C3  00                 sizek (0)
                         * functions:
08C4  00                 sizep (0)
                         * lines:
08C5  06                 sizelineinfo (6)
                         [pc] (line)
08C6  59                 [1] (89)
08C7  00                 [2] (89)
08C8  00                 [3] (89)
08C9  00                 [4] (89)
08CA  59                 [5] (89)
08CB  00                 [6] (90)
                         * locals:
08DE  00                 sizelocvars (0)
                         * upvalues:
08DF  00                 sizeupvalues (0)
                         ** end of function **

                         * lines:
08E0  13                 sizelineinfo (19)
                         [pc] (line)
08E1  09                 [01] (9)
08E2  00                 [02] (18)
08E3  00                 [03] (18)
08E4  00                 [04] (11)
08E5  12                 [05] (74)
08E6  00                 [06] (74)
08E7  00                 [07] (81)
08E8  00                 [08] (81)
08E9  12                 [09] (81)
08EA  00                 [10] (76)
08EB  00                 [11] (86)
08EC  00                 [12] (86)
08ED  0B                 [13] (86)
08EE  00                 [14] (84)
08EF  00                 [15] (90)
08F0  00                 [16] (90)
08F1  4A                 [17] (90)
08F2  00                 [18] (88)
08F3  00                 [19] (90)
                         * locals:
092D  00                 sizelocvars (0)
                         * upvalues:
092E  00                 sizeupvalues (0)
                         ** end of function **

092F                     ** end of chunk **
