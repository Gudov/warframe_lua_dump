1	C:\wlua_dump\path\Lotus\Scripts\EffectsFireDeath.lua
Pos   Hex Data           Description or Code
------------------------------------------------------------------------
0000                     ** source chunk: C:\wlua_dump\path\Lotus\Scripts\EffectsFireDeath.lua
                         ** global header start **
0000  7F                 header signature: ""
0001  00                 version (major:minor hex digits)
0002  00                 format (0=official)
0003  00                 endianness (1=little endian)
0004  00                 size of int (bytes)
0005  00                 size of size_t (bytes)
0006  02                 size of Instruction (bytes)
0007  03                 size of number (bytes)
0008  0C                 integral (1=integral)
412
                         * number type: single
                         * x86 standard (32-bit, little endian, doubles)
                         ** global header end **
/EE/Types/Physics/Ragdoll
EffectsDeco
EnemyDeathByFire
useCreator
/EE/Types/Effects/Spawner
GAME_C1_HIP1
gBaseAvatarType
Engine
TORSO
pFX
burntBodyMat
gDecorationType
leadUpFxToKill
math
speed
gTennoAvatarType
                         
0001                     ** function [0] definition (level 1)
                         ** start of function **
0001  00                 string size (0)
                         source name: (none)
0002  00                 line defined (0)
0003  00                 last line defined (0)
0004  00                 nups (0)
0005  00                 numparams (0)
0006  02                 is_vararg (2)
0007  03                 maxstacksize (3)
                         * code:
0008  0C                 sizecode (12)
0009  1D000000           [01] getglobal  0   0        ; -895206725
000D  59400000           [02] loadk      1   1        ; "/EE/Types/Physics/Ragdoll"
0011  22800001           [03] call       0   2   2  
0015  5D800000           [04] getglobal  1   2        ; -332969190
0019  99C00000           [05] loadk      2   3        ; "EffectsDeco"
001D  62800001           [06] call       1   2   2  
0021  A5000000           [07] closure    2   0      
0025  12000000           [08] move       0   0      
0029  12008000           [09] move       0   1      
002D  A0000100           [10] setglobal  2   4        ; EnemyDeathByFire
0031  A0400100           [11] setglobal  2   5        ; -768056838
0035  1E008000           [12] return     0   1      
                         * constants:
0039  06                 sizek (6)
003A  01                 const type 3
003B  BB3AA4CA           const [0]: (-895206725)
003F  04                 const type 4
0040  1A                 string size (26)
0041  2F45452F54797065+  "/EE/Type"
0049  732F506879736963+  "s/Physic"
0051  732F526167646F6C+  "s/Ragdol"
0059  6C00               "l\0"
                         const [1]: "/EE/Types/Physics/Ragdoll"
005B  01                 const type 3
005C  1A4B27EC           const [2]: (-332969190)
0060  04                 const type 4
0061  0C                 string size (12)
0062  4566666563747344+  "EffectsD"
006A  65636F00           "eco\0"
                         const [3]: "EffectsDeco"
006E  04                 const type 4
006F  11                 string size (17)
0070  456E656D79446561+  "EnemyDea"
0078  7468427946697265+  "thByFire"
0080  00                 "\0"
                         const [4]: "EnemyDeathByFire"
0081  01                 const type 3
0082  FA6138D2           const [5]: (-768056838)
                         * functions:
0086  01                 sizep (1)
                         
0087                     ** function [0] definition (level 2)
                         ** start of function **
0087  00                 string size (0)
                         source name: (none)
0088  0B                 line defined (11)
0089  83                 last line defined (131)
008A  01                 nups (2)
008B  02                 numparams (1)
008C  01                 is_vararg (0)
008D  00                 maxstacksize (44)
                         * code:
0090  02                 sizecode (269)
0091  5D000000           [001] getglobal  1   0        ; 538022378
0095  99400000           [002] loadk      2   1        ; 0
0099  62400001           [003] call       1   2   1  
009D  5D800000           [004] getglobal  1   2        ; 1074689893
00A1  92000000           [005] move       2   0      
00A5  62800001           [006] call       1   2   2  
00A9  58000000           [007] test       1       0    ; to [9] if true
00AD  1A000080           [008] jmp        1            ; to [10]
00B1  1E008000           [009] return     0   1      
00B5  46008000           [010] loadnil    1   1      
00B9  9DC00000           [011] getglobal  2   3        ; useCreator
00BD  98000000           [012] test       2       0    ; to [14] if true
00C1  1AC00080           [013] jmp        4            ; to [18]
00C5  A4004100           [014] self       2   0   260  ; 129677183
00C9  A2800001           [015] call       2   2   2  
00CD  52000001           [016] move       1   2      
00D1  1A800080           [017] jmp        3            ; to [21]
00D5  A4404100           [018] self       2   0   261  ; -704974830
00D9  A2800001           [019] call       2   2   2  
00DD  52000001           [020] move       1   2      
00E1  99800100           [021] loadk      2   6        ; 0
00E5  DDC00100           [022] getglobal  3   7        ; 738251817
00E9  19010200           [023] loadk      4   8        ; "/EE/Types/Effects/Spawner"
00ED  E2800001           [024] call       3   2   2  
00F1  1D810000           [025] getglobal  4   2        ; 1074689893
00F5  52018000           [026] move       5   1      
00F9  22810001           [027] call       4   2   2  
00FD  18410000           [028] test       4       1    ; to [30] if false
0101  1A000180           [029] jmp        5            ; to [35]
0105  2441C200           [030] self       4   1   265  ; -1957065004
0109  92018001           [031] move       6   3      
010D  22818001           [032] call       4   3   2  
0111  18010000           [033] test       4       0    ; to [35] if true
0115  1A000480           [034] jmp        17           ; to [52]
fail op	21
0119  15808080           [035] concat     0   257 2  
011D  1A800380           [036] jmp        15           ; to [52]
0121  1DC10000           [037] getglobal  4   3        ; useCreator
0125  18010000           [038] test       4       0    ; to [40] if true
0129  1AC00080           [039] jmp        4            ; to [44]
012D  24014100           [040] self       4   0   260  ; 129677183
0131  22810001           [041] call       4   2   2  
0135  52000002           [042] move       1   4      
0139  1A800080           [043] jmp        3            ; to [47]
013D  24414100           [044] self       4   0   261  ; -704974830
0141  22810001           [045] call       4   2   2  
0145  52000002           [046] move       1   4      
0149  8D804201           [047] sub        2   2   266  ; 0
014D  1D010000           [048] getglobal  4   0        ; 538022378
0151  59410000           [049] loadk      5   1        ; 0
0155  22410001           [050] call       4   2   1  
0159  1A00F97F           [051] jmp        -27          ; to [25]
015D  12018000           [052] move       4   1      
0161  5D810000           [053] getglobal  5   2        ; 1074689893
0165  92010002           [054] move       6   4      
0169  62810001           [055] call       5   2   2  
016D  58010000           [056] test       5       0    ; to [58] if true
0171  1A000080           [057] jmp        1            ; to [59]
0175  1E008000           [058] return     0   1      
0179  64414202           [059] self       5   4   265  ; -1957065004
017D  D3010000           [060] getupval   7   0      
0181  62818001           [061] call       5   3   2  
0185  58010000           [062] test       5       0    ; to [64] if true
0189  1A800080           [063] jmp        3            ; to [67]
018D  64C14202           [064] self       5   4   267  ; 332067969
0191  62810001           [065] call       5   2   2  
0195  52008002           [066] move       1   5      
0199  5D010300           [067] getglobal  5   12       ; -332969190
019D  99410300           [068] loadk      6   13       ; "GAME_C1_HIP1"
01A1  62810001           [069] call       5   2   2  
01A5  9D810000           [070] getglobal  6   2        ; 1074689893
01A9  D2018000           [071] move       7   1      
01AD  A2810001           [072] call       6   2   2  
01B1  98410000           [073] test       6       1    ; to [75] if false
01B5  1A000180           [074] jmp        5            ; to [80]
01B9  A441C200           [075] self       6   1   265  ; -1957065004
01BD  1D820300           [076] getglobal  8   14       ; gBaseAvatarType
01C1  A2818001           [077] call       6   3   2  
01C5  98410000           [078] test       6       1    ; to [80] if false
01C9  1A000080           [079] jmp        1            ; to [81]
01CD  1E008000           [080] return     0   1      
01D1  A4C1C300           [081] self       6   1   271  ; -1544157541
01D5  A2810001           [082] call       6   2   2  
01D9  A4014403           [083] self       6   6   272  ; 384745901
01DD  1D420400           [084] getglobal  8   17       ; Engine
01E1  0E824404           [085] gettable   8   8   274  ; "TORSO"
01E5  A2818001           [086] call       6   3   2  
01E9  52010003           [087] move       5   6      
01ED  99810200           [088] loadk      6   10       ; 0
01F1  DDC10400           [089] getglobal  7   19       ; pFX
01F5  CA018003           [090] len        7   7      
01F9  19820200           [091] loadk      8   10       ; 0
01FD  90010180           [092] forprep    6   5        ; to [98]
0201  A4024502           [093] self       10  4   276  ; -1421644046
0205  1DC30400           [094] getglobal  12  19       ; pFX
0209  0E430206           [095] gettable   12  12  9  
020D  52038002           [096] move       13  5      
0211  A2820002           [097] call       10  4   2  
0215  9441FE7F           [098] forloop    6   -6       ; to [93] if loop
0219  D7020000           [099] loadbool   11  0   0    ; false
021D  17030000           [100] loadbool   12  0   0    ; false
0221  46038006           [101] loadnil    13  13     
0225  99430500           [102] loadk      14  21       ; 0
0229  E4834502           [103] self       15  4   278  ; -1205424221
022D  5DC40500           [104] getglobal  17  23       ; burntBodyMat
0231  97040000           [105] loadbool   18  0   0    ; false
0235  E2430002           [106] call       15  4   1  
0239  E4034602           [107] self       15  4   280  ; 366271214
023D  5D440600           [108] getglobal  17  25       ; gDecorationType
0241  E2838001           [109] call       15  3   2  
0245  19840200           [110] loadk      16  10       ; 0
0249  4A048007           [111] len        17  15     
024D  99840200           [112] loadk      18  10       ; 0
0251  10440280           [113] forprep    16  10       ; to [124]
0255  0EC58407           [114] gettable   20  15  19 
0259  6485460A           [115] self       21  20  282  ; -830264577
025D  62850001           [116] call       21  2   2  
0261  93058000           [117] getupval   22  1      
fail op	35
0265  6380850A           [118] close      1  
0269  1AC00080           [119] jmp        4            ; to [124]
026D  6485450A           [120] self       21  20  278  ; -1205424221
0271  DDC50500           [121] getglobal  23  23       ; burntBodyMat
0275  17060000           [122] loadbool   24  0   0    ; false
0279  62450002           [123] call       21  4   1  
027D  1404FD7F           [124] forloop    16  -11      ; to [114] if loop
0281  59450000           [125] loadk      21  1        ; 0
fail op	21
0285  1580830A           [126] concat     0   21  14 
0289  1A801680           [127] jmp        91           ; to [219]
028D  9D850000           [128] getglobal  22  2        ; 1074689893
0291  D2058000           [129] move       23  1      
0295  A2850001           [130] call       22  2   2  
0299  98450000           [131] test       22      1    ; to [133] if false
029D  1A800180           [132] jmp        7            ; to [140]
02A1  A4C5C600           [133] self       22  1   283  ; 796523475
02A5  A2850001           [134] call       22  2   2  
fail op	33
02A9  2140400B           [135] tforloop   0       257  ; to [137] if exit
02AD  1A800080           [136] jmp        3            ; to [140]
02B1  D8420000           [137] test       11      1    ; to [139] if false
02B5  1A000080           [138] jmp        1            ; to [140]
02B9  D7028000           [139] loadbool   11  1   0    ; true
02BD  D8020000           [140] test       11      0    ; to [142] if true
02C1  1AC00D80           [141] jmp        56           ; to [198]
02C5  18430000           [142] test       12      1    ; to [144] if false
02C9  1A400D80           [143] jmp        54           ; to [198]
02CD  9D850000           [144] getglobal  22  2        ; 1074689893
02D1  D2058000           [145] move       23  1      
02D5  A2850001           [146] call       22  2   2  
02D9  98450000           [147] test       22      1    ; to [149] if false
02DD  1A000C80           [148] jmp        49           ; to [198]
02E1  A405C700           [149] self       22  1   284  ; -242235676
02E5  A2850001           [150] call       22  2   2  
02E9  5203000B           [151] move       13  22     
02ED  9D850000           [152] getglobal  22  2        ; 1074689893
02F1  D2058006           [153] move       23  13     
02F5  A2850001           [154] call       22  2   2  
02F9  98450000           [155] test       22      1    ; to [157] if false
02FD  1A000A80           [156] jmp        41           ; to [198]
0301  17038000           [157] loadbool   12  1   0    ; true
0305  12018006           [158] move       4   13     
0309  A4854502           [159] self       22  4   278  ; -1205424221
030D  1DC60500           [160] getglobal  24  23       ; burntBodyMat
0311  57060000           [161] loadbool   25  0   0    ; false
0315  A2450002           [162] call       22  4   1  
0319  A4054602           [163] self       22  4   280  ; 366271214
031D  1D460600           [164] getglobal  24  25       ; gDecorationType
0321  A2858001           [165] call       22  3   2  
0325  D9850200           [166] loadk      23  10       ; 0
0329  0A06000B           [167] len        24  22     
032D  59860200           [168] loadk      25  10       ; 0
0331  D0450280           [169] forprep    23  10       ; to [180]
0335  CE86060B           [170] gettable   27  22  26 
0339  2487C60D           [171] self       28  27  282  ; -830264577
033D  22870001           [172] call       28  2   2  
0341  53078000           [173] getupval   29  1      
fail op	35
0345  6340070E           [174] close      1  
0349  1AC00080           [175] jmp        4            ; to [180]
034D  2487C50D           [176] self       28  27  278  ; -1205424221
0351  9DC70500           [177] getglobal  30  23       ; burntBodyMat
0355  D7070000           [178] loadbool   31  0   0    ; false
0359  22470002           [179] call       28  4   1  
035D  D405FD7F           [180] forloop    23  -11      ; to [170] if loop
0361  19870200           [181] loadk      28  10       ; 0
0365  5D470700           [182] getglobal  29  29       ; leadUpFxToKill
0369  4A07800E           [183] len        29  29     
036D  99870200           [184] loadk      30  10       ; 0
0371  10870280           [185] forprep    28  11       ; to [197]
0375  24884702           [186] self       32  4   286  ; -1625438872
0379  9D480700           [187] getglobal  34  29       ; leadUpFxToKill
037D  8EC80711           [188] gettable   34  34  31 
0381  22888001           [189] call       32  3   2  
0385  5D880000           [190] getglobal  33  2        ; 1074689893
0389  92080010           [191] move       34  32     
038D  62880001           [192] call       33  2   2  
0391  58480000           [193] test       33      1    ; to [195] if false
0395  1A400080           [194] jmp        2            ; to [197]
0399  64C84710           [195] self       33  32  287  ; -725453761
039D  62480001           [196] call       33  2   1  
03A1  14C7FC7F           [197] forloop    28  -12      ; to [186] if loop
03A5  5D880000           [198] getglobal  33  2        ; 1074689893
03A9  92080002           [199] move       34  4      
03AD  62880001           [200] call       33  2   2  
03B1  58480000           [201] test       33      1    ; to [203] if false
03B5  1A800180           [202] jmp        7            ; to [210]
03B9  64084802           [203] self       33  4   288  ; -703571861
03BD  DD480800           [204] getglobal  35  33       ; math
03C1  CE88C811           [205] gettable   35  35  290  ; -688728047
03C5  1C89830A           [206] div        36  21  14 
03C9  59C90800           [207] loadk      37  35       ; 0
03CD  E2088001           [208] call       35  3   0  
03D1  62480000           [209] call       33  0   1  
03D5  5D080900           [210] getglobal  33  36       ; 1289681407
03D9  62888000           [211] call       33  1   2  
03DD  9D480900           [212] getglobal  34  37       ; speed
03E1  44888810           [213] mul        33  33  34 
03E5  4345880A           [214] add        21  21  33 
03E9  5D080000           [215] getglobal  33  0        ; 538022378
03ED  99480000           [216] loadk      34  1        ; 0
03F1  62480001           [217] call       33  2   1  
03F5  1A80E87F           [218] jmp        -93          ; to [126]
03F9  5D880000           [219] getglobal  33  2        ; 1074689893
03FD  92088000           [220] move       34  1      
0401  62880001           [221] call       33  2   2  
0405  58080000           [222] test       33      0    ; to [224] if true
0409  1A000080           [223] jmp        1            ; to [225]
040D  1E008000           [224] return     0   1      
0411  6488C900           [225] self       33  1   294  ; -1003314401
0415  62880001           [226] call       33  2   2  
fail op	21
0419  15408880           [227] concat     0   257 33 
041D  1A800280           [228] jmp        11           ; to [240]
0421  99480000           [229] loadk      34  1        ; 0
0425  CD88C210           [230] sub        35  33  266  ; 0
0429  19890200           [231] loadk      36  10       ; 0
042D  90080180           [232] forprep    34  5        ; to [238]
0431  A4C9C900           [233] self       38  1   295  ; -1753287718
0435  120A8012           [234] move       40  37     
0439  A2898001           [235] call       38  3   2  
043D  E4C94713           [236] self       39  38  287  ; -725453761
0441  E2490001           [237] call       39  2   1  
0445  9448FE7F           [238] forloop    34  -6       ; to [233] if loop
0449  1A000780           [239] jmp        29           ; to [269]
044D  E409CA00           [240] self       39  1   296  ; -1411785325
0451  E2890001           [241] call       39  2   2  
0455  244ACA00           [242] self       40  1   297  ; -564624675
0459  228A0001           [243] call       40  2   2  
045D  5D8A0000           [244] getglobal  41  2        ; 1074689893
0461  920A8013           [245] move       42  39     
0465  628A0001           [246] call       41  2   2  
0469  580A0000           [247] test       41      0    ; to [249] if true
046D  1A000080           [248] jmp        1            ; to [250]
0471  1E008000           [249] return     0   1      
0475  5D8A0000           [250] getglobal  41  2        ; 1074689893
0479  920A0014           [251] move       42  40     
047D  628A0001           [252] call       41  2   2  
0481  584A0000           [253] test       41      1    ; to [255] if false
0485  1A000080           [254] jmp        1            ; to [256]
0489  1E008000           [255] return     0   1      
048D  644AC200           [256] self       41  1   265  ; -1957065004
0491  DD8A0A00           [257] getglobal  43  42       ; gTennoAvatarType
0495  628A8001           [258] call       41  3   2  
0499  580A0000           [259] test       41      0    ; to [261] if true
049D  1A000080           [260] jmp        1            ; to [262]
04A1  1E008000           [261] return     0   1      
04A5  5D8A0000           [262] getglobal  41  2        ; 1074689893
04A9  920A8000           [263] move       42  1      
04AD  628A0001           [264] call       41  2   2  
04B1  584A0000           [265] test       41      1    ; to [267] if false
04B5  1A400080           [266] jmp        2            ; to [269]
04B9  64CAC700           [267] self       41  1   287  ; -725453761
04BD  624A0001           [268] call       41  2   1  
04C1  1E008000           [269] return     0   1      
                         * constants:
04C5  2B                 sizek (43)
04C6  01                 const type 3
04C7  EA911120           const [0]: (538022378)
04CB  03                 const type 3
04CC  00000000           const [1]: (0)
04D0  01                 const type 3
04D1  65770E40           const [2]: (1074689893)
04D5  04                 const type 4
04D6  0B                 string size (11)
04D7  7573654372656174+  "useCreat"
04DF  6F7200             "or\0"
                         const [3]: "useCreator"
04E2  01                 const type 3
04E3  7FB7BA07           const [4]: (129677183)
04E7  01                 const type 3
04E8  12F0FAD5           const [5]: (-704974830)
04EC  03                 const type 3
04ED  00000041           const [6]: (0)
04F1  01                 const type 3
04F2  29D4002C           const [7]: (738251817)
04F6  04                 const type 4
04F7  1A                 string size (26)
04F8  2F45452F54797065+  "/EE/Type"
0500  732F456666656374+  "s/Effect"
0508  732F537061776E65+  "s/Spawne"
0510  7200               "r\0"
                         const [8]: "/EE/Types/Effects/Spawner"
0512  01                 const type 3
0513  D48E598B           const [9]: (-1957065004)
0517  03                 const type 3
0518  0000803F           const [10]: (0)
051C  01                 const type 3
051D  81F4CA13           const [11]: (332067969)
0521  01                 const type 3
0522  1A4B27EC           const [12]: (-332969190)
0526  04                 const type 4
0527  0D                 string size (13)
0528  47414D455F43315F+  "GAME_C1_"
0530  4849503100         "HIP1\0"
                         const [13]: "GAME_C1_HIP1"
0535  04                 const type 4
0536  10                 string size (16)
0537  6742617365417661+  "gBaseAva"
053F  7461725479706500   "tarType\0"
                         const [14]: "gBaseAvatarType"
0547  01                 const type 3
0548  9B06F6A3           const [15]: (-1544157541)
054C  01                 const type 3
054D  ADC1EE16           const [16]: (384745901)
0551  04                 const type 4
0552  07                 string size (7)
0553  456E67696E6500     "Engine\0"
                         const [17]: "Engine"
055A  04                 const type 4
055B  06                 string size (6)
055C  544F52534F00       "TORSO\0"
                         const [18]: "TORSO"
0562  04                 const type 4
0563  04                 string size (4)
0564  70465800           "pFX\0"
                         const [19]: "pFX"
0568  01                 const type 3
0569  F26E43AB           const [20]: (-1421644046)
056D  03                 const type 3
056E  0000C040           const [21]: (0)
0572  01                 const type 3
0573  A3AF26B8           const [22]: (-1205424221)
0577  04                 const type 4
0578  0D                 string size (13)
0579  6275726E74426F64+  "burntBod"
0581  794D617400         "yMat\0"
                         const [23]: "burntBodyMat"
0586  01                 const type 3
0587  EEDAD415           const [24]: (366271214)
058B  04                 const type 4
058C  10                 string size (16)
058D  674465636F726174+  "gDecorat"
0595  696F6E5479706500   "ionType\0"
                         const [25]: "gDecorationType"
059D  01                 const type 3
059E  FF2A83CE           const [26]: (-830264577)
05A2  01                 const type 3
05A3  D3FB792F           const [27]: (796523475)
05A7  01                 const type 3
05A8  E4C68FF1           const [28]: (-242235676)
05AC  04                 const type 4
05AD  0F                 string size (15)
05AE  6C65616455704678+  "leadUpFx"
05B6  546F4B696C6C00     "ToKill\0"
                         const [29]: "leadUpFxToKill"
05BD  01                 const type 3
05BE  68C51D9F           const [30]: (-1625438872)
05C2  01                 const type 3
05C3  3F74C2D4           const [31]: (-725453761)
05C7  01                 const type 3
05C8  6B5810D6           const [32]: (-703571861)
05CC  04                 const type 4
05CD  05                 string size (5)
05CE  6D61746800         "math\0"
                         const [33]: "math"
05D3  01                 const type 3
05D4  11D8F2D6           const [34]: (-688728047)
05D8  03                 const type 3
05D9  00004040           const [35]: (0)
05DD  01                 const type 3
05DE  FFF9DE4C           const [36]: (1289681407)
05E2  04                 const type 4
05E3  06                 string size (6)
05E4  737065656400       "speed\0"
                         const [37]: "speed"
05EA  01                 const type 3
05EB  1FA332C4           const [38]: (-1003314401)
05EF  01                 const type 3
05F0  DAF37E97           const [39]: (-1753287718)
05F4  01                 const type 3
05F5  93DDD9AB           const [40]: (-1411785325)
05F9  01                 const type 3
05FA  DD8258DE           const [41]: (-564624675)
05FE  04                 const type 4
05FF  11                 string size (17)
0600  6754656E6E6F4176+  "gTennoAv"
0608  6174617254797065+  "atarType"
0610  00                 "\0"
                         const [42]: "gTennoAvatarType"
                         * functions:
0611  00                 sizep (0)
                         * lines:
0613  02                 sizelineinfo (269)
                         [pc] (line)
0614  0C                 [001] (12)
0615  00                 [002] (12)
0616  00                 [003] (12)
0617  00                 [004] (13)
0618  0C                 [005] (13)
0619  00                 [006] (13)
061A  00                 [007] (13)
061B  00                 [008] (13)
061C  0C                 [009] (14)
061D  00                 [010] (16)
061E  00                 [011] (17)
061F  00                 [012] (17)
0620  0D                 [013] (17)
0621  00                 [014] (18)
0622  00                 [015] (18)
0623  00                 [016] (18)
0624  0D                 [017] (18)
0625  00                 [018] (20)
0626  00                 [019] (20)
0627  00                 [020] (20)
0628  0D                 [021] (22)
0629  00                 [022] (23)
062A  00                 [023] (23)
062B  00                 [024] (23)
062C  0D                 [025] (25)
062D  00                 [026] (25)
062E  00                 [027] (25)
062F  00                 [028] (25)
0630  0D                 [029] (25)
0631  00                 [030] (25)
0632  00                 [031] (25)
0633  00                 [032] (25)
0634  0E                 [033] (25)
0635  00                 [034] (25)
0636  00                 [035] (25)
0637  00                 [036] (25)
0638  10                 [037] (26)
0639  00                 [038] (26)
063A  00                 [039] (26)
063B  00                 [040] (27)
063C  11                 [041] (27)
063D  00                 [042] (27)
063E  00                 [043] (27)
063F  00                 [044] (29)
0640  11                 [045] (29)
0641  00                 [046] (29)
0642  00                 [047] (31)
0643  00                 [048] (32)
0644  11                 [049] (32)
0645  00                 [050] (32)
0646  00                 [051] (32)
0647  00                 [052] (34)
0648  12                 [053] (35)
0649  00                 [054] (35)
064A  00                 [055] (35)
064B  00                 [056] (35)
064C  12                 [057] (35)
064D  00                 [058] (36)
064E  00                 [059] (39)
064F  00                 [060] (39)
0650  12                 [061] (39)
0651  00                 [062] (39)
0652  00                 [063] (39)
0653  00                 [064] (40)
0654  12                 [065] (40)
0655  00                 [066] (40)
0656  00                 [067] (43)
0657  00                 [068] (43)
0658  14                 [069] (43)
0659  00                 [070] (44)
065A  00                 [071] (44)
065B  00                 [072] (44)
065C  14                 [073] (44)
065D  00                 [074] (44)
065E  00                 [075] (44)
065F  00                 [076] (44)
0660  14                 [077] (44)
0661  00                 [078] (44)
0662  00                 [079] (44)
0663  00                 [080] (45)
0664  16                 [081] (48)
0665  00                 [082] (48)
0666  00                 [083] (48)
0667  00                 [084] (48)
0668  17                 [085] (48)
0669  00                 [086] (48)
066A  00                 [087] (48)
066B  00                 [088] (49)
066C  17                 [089] (49)
066D  00                 [090] (49)
066E  00                 [091] (49)
066F  00                 [092] (49)
0670  17                 [093] (50)
0671  00                 [094] (50)
0672  00                 [095] (50)
0673  00                 [096] (50)
0674  19                 [097] (50)
0675  00                 [098] (49)
0676  00                 [099] (53)
0677  00                 [100] (54)
0678  19                 [101] (55)
0679  00                 [102] (56)
067A  00                 [103] (57)
067B  00                 [104] (57)
067C  19                 [105] (57)
067D  00                 [106] (57)
067E  00                 [107] (58)
067F  00                 [108] (58)
0680  19                 [109] (58)
0681  00                 [110] (59)
0682  00                 [111] (59)
0683  00                 [112] (59)
0684  19                 [113] (59)
0685  00                 [114] (60)
0686  00                 [115] (61)
0687  00                 [116] (61)
0688  19                 [117] (61)
0689  00                 [118] (61)
068A  00                 [119] (61)
068B  00                 [120] (62)
068C  19                 [121] (62)
068D  00                 [122] (62)
068E  00                 [123] (62)
068F  00                 [124] (59)
0690  19                 [125] (65)
0691  00                 [126] (67)
0692  00                 [127] (67)
0693  00                 [128] (68)
0694  19                 [129] (68)
0695  00                 [130] (68)
0696  00                 [131] (68)
0697  00                 [132] (68)
0698  19                 [133] (69)
0699  00                 [134] (69)
069A  00                 [135] (69)
069B  00                 [136] (69)
069C  19                 [137] (69)
069D  00                 [138] (69)
069E  00                 [139] (70)
069F  00                 [140] (73)
06A0  19                 [141] (73)
06A1  00                 [142] (73)
06A2  00                 [143] (73)
06A3  00                 [144] (73)
06A4  1A                 [145] (73)
06A5  00                 [146] (73)
06A6  00                 [147] (73)
06A7  00                 [148] (73)
06A8  1A                 [149] (74)
06A9  00                 [150] (74)
06AA  00                 [151] (74)
06AB  00                 [152] (75)
06AC  1A                 [153] (75)
06AD  00                 [154] (75)
06AE  00                 [155] (75)
06AF  00                 [156] (75)
06B0  1B                 [157] (76)
06B1  00                 [158] (77)
06B2  00                 [159] (78)
06B3  00                 [160] (78)
06B4  1B                 [161] (78)
06B5  00                 [162] (78)
06B6  00                 [163] (79)
06B7  00                 [164] (79)
06B8  1B                 [165] (79)
06B9  00                 [166] (80)
06BA  00                 [167] (80)
06BB  00                 [168] (80)
06BC  1B                 [169] (80)
06BD  00                 [170] (81)
06BE  00                 [171] (82)
06BF  00                 [172] (82)
06C0  1D                 [173] (82)
06C1  00                 [174] (82)
06C2  00                 [175] (82)
06C3  00                 [176] (83)
06C4  1D                 [177] (83)
06C5  00                 [178] (83)
06C6  00                 [179] (83)
06C7  00                 [180] (80)
06C8  1D                 [181] (86)
06C9  00                 [182] (86)
06CA  00                 [183] (86)
06CB  00                 [184] (86)
06CC  1F                 [185] (86)
06CD  00                 [186] (87)
06CE  00                 [187] (87)
06CF  00                 [188] (87)
06D0  20                 [189] (87)
06D1  00                 [190] (88)
06D2  00                 [191] (88)
06D3  00                 [192] (88)
06D4  20                 [193] (88)
06D5  00                 [194] (88)
06D6  00                 [195] (89)
06D7  00                 [196] (89)
06D8  20                 [197] (86)
06D9  00                 [198] (94)
06DA  00                 [199] (94)
06DB  00                 [200] (94)
06DC  20                 [201] (94)
06DD  00                 [202] (94)
06DE  00                 [203] (95)
06DF  00                 [204] (95)
06E0  22                 [205] (95)
06E1  00                 [206] (95)
06E2  00                 [207] (95)
06E3  00                 [208] (95)
06E4  23                 [209] (95)
06E5  00                 [210] (97)
06E6  00                 [211] (97)
06E7  00                 [212] (97)
06E8  23                 [213] (97)
06E9  00                 [214] (97)
06EA  00                 [215] (98)
06EB  00                 [216] (98)
06EC  23                 [217] (98)
06ED  00                 [218] (98)
06EE  00                 [219] (101)
06EF  00                 [220] (101)
06F0  23                 [221] (101)
06F1  00                 [222] (101)
06F2  00                 [223] (101)
06F3  00                 [224] (102)
06F4  23                 [225] (104)
06F5  00                 [226] (104)
06F6  00                 [227] (105)
06F7  00                 [228] (105)
06F8  24                 [229] (106)
06F9  00                 [230] (106)
06FA  00                 [231] (106)
06FB  00                 [232] (106)
06FC  27                 [233] (107)
06FD  00                 [234] (107)
06FE  00                 [235] (107)
06FF  00                 [236] (108)
0700  27                 [237] (108)
0701  00                 [238] (106)
0702  00                 [239] (109)
0703  00                 [240] (112)
0704  27                 [241] (112)
0705  00                 [242] (113)
0706  00                 [243] (113)
0707  00                 [244] (115)
0708  27                 [245] (115)
0709  00                 [246] (115)
070A  00                 [247] (115)
070B  00                 [248] (115)
070C  27                 [249] (116)
070D  00                 [250] (119)
070E  00                 [251] (119)
070F  00                 [252] (119)
0710  28                 [253] (119)
0711  00                 [254] (119)
0712  00                 [255] (120)
0713  00                 [256] (123)
0714  28                 [257] (123)
0715  00                 [258] (123)
0716  00                 [259] (123)
0717  00                 [260] (123)
0718  28                 [261] (124)
0719  00                 [262] (127)
071A  00                 [263] (127)
071B  00                 [264] (127)
071C  2B                 [265] (127)
071D  00                 [266] (127)
071E  00                 [267] (-128)
071F  00                 [268] (-128)
0720  2B                 [269] (-125)
                         * locals:
0A48  00                 sizelocvars (0)
                         * upvalues:
0A49  00                 sizeupvalues (0)
                         ** end of function **

                         * lines:
0A4A  0C                 sizelineinfo (12)
                         [pc] (line)
0A4B  08                 [01] (8)
0A4C  00                 [02] (8)
0A4D  00                 [03] (8)
0A4E  00                 [04] (9)
0A4F  08                 [05] (9)
0A50  00                 [06] (9)
0A51  00                 [07] (-125)
0A52  00                 [08] (-125)
0A53  08                 [09] (-125)
0A54  00                 [10] (-125)
0A55  00                 [11] (11)
0A56  00                 [12] (-125)
                         * locals:
0A7B  00                 sizelocvars (0)
                         * upvalues:
0A7C  00                 sizeupvalues (0)
                         ** end of function **

0A7D                     ** end of chunk **
